import { ChangeDetectorRef, Directive, EventEmitter, Input, Output, } from '@angular/core';
import { PaginationService } from './pagination.service';
/**
 * This directive is what powers all pagination controls components, including the default one.
 * It exposes an API which is hooked up to the PaginationService to keep the PaginatePipe in sync
 * with the pagination controls.
 */
export class PaginationDirective {
    constructor(service, changeDetectorRef) {
        this.service = service;
        this.changeDetectorRef = changeDetectorRef;
        this.maxSize = 7;
        this.pageChange = new EventEmitter();
        this.pageBoundsCorrection = new EventEmitter();
        this.pages = [];
        this.pageSizes = [];
        this.changeSub = this.service.change.subscribe((id) => {
            if (this.id === id) {
                this.updatePageLinks();
                this.changeDetectorRef.markForCheck();
                this.changeDetectorRef.detectChanges();
                const inst = this.service.getInstance(this.id);
                this.itemsPerPage = inst.itemsPerPage;
            }
        });
    }
    ngOnInit() {
        if (this.id === undefined) {
            this.id = this.service.defaultId();
        }
        const inst = this.service.getInstance(this.id);
        this.itemsPerPage = inst.itemsPerPage;
        for (let i = 5; i <= inst.totalItems;) {
            this.pageSizes.push(i);
            i += 5;
        }
        this.updatePageLinks();
    }
    ngOnChanges(changes) {
        this.updatePageLinks();
    }
    ngOnDestroy() {
        this.changeSub.unsubscribe();
    }
    pageSizeChanged(event) {
        this.itemsPerPage = event;
        this.service.setItemsPerPage(this.id, event);
        this.setCurrent(1);
        this.updatePageLinks();
    }
    /**
     * Go to the previous page
     */
    previous() {
        this.checkValidId();
        this.setCurrent(this.getCurrent() - 1);
    }
    /**
     * Go to the next page
     */
    next() {
        this.checkValidId();
        this.setCurrent(this.getCurrent() + 1);
    }
    /**
     * Returns true if current page is first page
     */
    isFirstPage() {
        return this.getCurrent() === 1;
    }
    /**
     * Returns true if current page is last page
     */
    isLastPage() {
        return this.getLastPage() === this.getCurrent();
    }
    /**
     * Set the current page number.
     */
    setCurrent(page) {
        this.pageChange.emit(page);
    }
    /**
     * Get the current page number.
     */
    getCurrent() {
        return this.service.getCurrentPage(this.id);
    }
    /**
     * Returns the last page number
     */
    getLastPage() {
        const inst = this.service.getInstance(this.id);
        if (inst.totalItems < 1) {
            // when there are 0 or fewer (an error case) items, there are no "pages" as such,
            // but it makes sense to consider a single, empty page as the last page.
            return 1;
        }
        return Math.ceil(inst.totalItems / inst.itemsPerPage);
    }
    getTotalItems() {
        return this.service.getInstance(this.id).totalItems;
    }
    getStartIndex() {
        const inst = this.service.getInstance(this.id);
        if (inst.totalItems < inst.itemsPerPage * (inst.currentPage - 1) + 1) {
            this.setCurrent(1);
        }
        return inst.itemsPerPage * (inst.currentPage - 1) + 1;
    }
    getEndIndex() {
        const inst = this.service.getInstance(this.id);
        const end = inst.itemsPerPage * inst.currentPage;
        if (inst.totalItems < end) {
            return inst.totalItems;
        }
        return end;
    }
    checkValidId() {
        if (this.service.getInstance(this.id).id == null) {
            console.warn(`PaginationControlsDirective: the specified id "${this.id}" does not match any registered PaginationInstance`);
        }
    }
    /**
     * Updates the page links and checks that the current page is valid. Should run whenever the
     * PaginationService.change stream emits a value matching the current ID, or when any of the
     * input values changes.
     */
    updatePageLinks() {
        const inst = this.service.getInstance(this.id);
        const correctedCurrentPage = this.outOfBoundCorrection(inst);
        if (correctedCurrentPage !== inst.currentPage) {
            setTimeout(() => {
                this.pageBoundsCorrection.emit(correctedCurrentPage);
                this.pages = this.createPageArray(inst.currentPage, inst.itemsPerPage, inst.totalItems, this.maxSize);
            });
        }
        else {
            this.pages = this.createPageArray(inst.currentPage, inst.itemsPerPage, inst.totalItems, this.maxSize);
        }
    }
    /**
     * Checks that the instance.currentPage property is within bounds for the current page range.
     * If not, return a correct value for currentPage, or the current value if OK.
     */
    outOfBoundCorrection(instance) {
        const totalPages = Math.ceil(instance.totalItems / instance.itemsPerPage);
        if (totalPages < instance.currentPage && 0 < totalPages) {
            return totalPages;
        }
        else if (instance.currentPage < 1) {
            return 1;
        }
        return instance.currentPage;
    }
    /**
     * Returns an array of Page objects to use in the pagination controls.
     */
    createPageArray(currentPage, itemsPerPage, totalItems, paginationRange) {
        // paginationRange could be a string if passed from attribute, so cast to number.
        paginationRange = +paginationRange;
        const pages = [];
        const totalPages = Math.ceil(totalItems / itemsPerPage);
        const halfWay = Math.ceil(paginationRange / 2);
        const isStart = currentPage <= halfWay;
        const isEnd = totalPages - halfWay < currentPage;
        const isMiddle = !isStart && !isEnd;
        const ellipsesNeeded = paginationRange < totalPages;
        let i = 1;
        while (i <= totalPages && i <= paginationRange) {
            let label;
            const pageNumber = this.calculatePageNumber(i, currentPage, paginationRange, totalPages);
            const openingEllipsesNeeded = i === 2 && (isMiddle || isEnd);
            const closingEllipsesNeeded = i === paginationRange - 1 && (isMiddle || isStart);
            if (ellipsesNeeded && (openingEllipsesNeeded || closingEllipsesNeeded)) {
                label = '...';
            }
            else {
                label = pageNumber;
            }
            pages.push({
                label,
                value: pageNumber,
            });
            i++;
        }
        return pages;
    }
    /**
     * Given the position in the sequence of pagination links [i],
     * figure out what page number corresponds to that position.
     */
    calculatePageNumber(i, currentPage, paginationRange, totalPages) {
        const halfWay = Math.ceil(paginationRange / 2);
        if (i === paginationRange) {
            return totalPages;
        }
        else if (i === 1) {
            return i;
        }
        else if (paginationRange < totalPages) {
            if (totalPages - halfWay < currentPage) {
                return totalPages - paginationRange + i;
            }
            else if (halfWay < currentPage) {
                return currentPage - halfWay + i;
            }
            else {
                return i;
            }
        }
        else {
            return i;
        }
    }
}
PaginationDirective.decorators = [
    { type: Directive, args: [{
                selector: 'pagination-template,[pagination-template]',
                exportAs: 'paginationApi',
            },] }
];
PaginationDirective.ctorParameters = () => [
    { type: PaginationService },
    { type: ChangeDetectorRef }
];
PaginationDirective.propDecorators = {
    id: [{ type: Input }],
    maxSize: [{ type: Input }],
    pageChange: [{ type: Output }],
    pageBoundsCorrection: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,