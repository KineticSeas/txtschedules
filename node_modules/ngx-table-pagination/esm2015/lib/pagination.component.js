import { Component, Input, Output, EventEmitter, ChangeDetectionStrategy, ViewEncapsulation, } from '@angular/core';
function coerceToBoolean(input) {
    return !!input && input !== 'false';
}
/**
 * The default pagination controls component. Actually just a default implementation of a custom template.
 */
export class PaginationComponent {
    constructor() {
        this.maxSize = 7;
        // @Input() isItemsNumber = false;
        this.previousLabel = '';
        this.nextLabel = '';
        this.screenReaderPaginationLabel = 'Pagination';
        this.screenReaderPageLabel = 'page';
        this.screenReaderCurrentLabel = `You're on page`;
        this.pageChange = new EventEmitter();
        this.pageBoundsCorrection = new EventEmitter();
        this._directionLinks = true;
        this._autoHide = false;
        this._responsive = false;
    }
    // @Input() itemsPerPage;
    get directionLinks() {
        return this._directionLinks;
    }
    set directionLinks(value) {
        this._directionLinks = coerceToBoolean(value);
    }
    get autoHide() {
        return this._autoHide;
    }
    set autoHide(value) {
        this._autoHide = coerceToBoolean(value);
    }
    get responsive() {
        return this._responsive;
    }
    set responsive(value) {
        this._responsive = coerceToBoolean(value);
    }
}
PaginationComponent.decorators = [
    { type: Component, args: [{
                selector: 'paging-controls',
                template: "<pagination-template\r\n  #p=\"paginationApi\"\r\n  [id]=\"id\"\r\n  [maxSize]=\"maxSize\"\r\n  (pageChange)=\"pageChange.emit($event)\"\r\n  (pageBoundsCorrection)=\"pageBoundsCorrection.emit($event)\"\r\n>\r\n  <div *ngIf=\"!(autoHide && p.pages.length <= 1)\">\r\n    <div *ngIf=\"isItemsPerPage\">\r\n      <span style=\"display: flex\" class=\"pagination-font\">\r\n        <label class=\"show-label\">Show</label>\r\n        <select\r\n          class=\"select-box pagination-font\"\r\n          [(ngModel)]=\"p.itemsPerPage\"\r\n          (change)=\"p.pageSizeChanged($event.target.value)\"\r\n        >\r\n          <option\r\n            *ngFor=\"let pageSizeDefault of p.pageSizes\"\r\n            value=\"{{ pageSizeDefault }}\"\r\n            [selected]=\"pageSizeDefault == p.itemsPerPage\"\r\n          >\r\n            {{ pageSizeDefault }}\r\n          </option>\r\n        </select>\r\n        <label class=\"entries-label\">entries</label></span\r\n      >\r\n    </div>\r\n\r\n    <div\r\n      class=\"ngx-pagination pagination-font\"\r\n      role=\"navigation\"\r\n      *ngIf=\"!isItemsPerPage\"\r\n      [attr.aria-label]=\"screenReaderPaginationLabel\"\r\n      [class.responsive]=\"responsive\"\r\n    >\r\n      <label\r\n        >Showing {{ p.getStartIndex() }} - {{ p.getEndIndex() }} of\r\n        {{ p.getTotalItems() }} entries</label\r\n      >\r\n      <ul role=\"navigation\" class=\"\">\r\n        <li\r\n          class=\"pagination-previous pagination-font page\"\r\n          [class.disabled]=\"p.isFirstPage()\"\r\n          *ngIf=\"directionLinks\"\r\n        >\r\n          <a\r\n            tabindex=\"0\"\r\n            *ngIf=\"1 < p.getCurrent()\"\r\n            (keyup.enter)=\"p.previous()\"\r\n            (click)=\"p.previous()\"\r\n            [attr.aria-label]=\"previousLabel + ' ' + screenReaderPageLabel\"\r\n          >\r\n            {{ previousLabel }}\r\n          </a>\r\n          <span *ngIf=\"p.isFirstPage()\">\r\n            {{ previousLabel }}\r\n          </span>\r\n        </li>\r\n        <li class=\"small-screen pagination-font page\">\r\n          {{ p.getCurrent() }} / {{ p.getLastPage() }}\r\n        </li>\r\n        <li\r\n          class=\"pagination-font page\"\r\n          [class.current]=\"p.getCurrent() === page.value\"\r\n          [class.ellipsis]=\"page.label === '...'\"\r\n          *ngFor=\"let page of p.pages\"\r\n        >\r\n          <a\r\n            tabindex=\"0\"\r\n            (keyup.enter)=\"p.setCurrent(page.value)\"\r\n            (click)=\"p.setCurrent(page.value)\"\r\n            *ngIf=\"p.getCurrent() !== page.value\"\r\n          >\r\n            <span class=\"show-for-sr\">{{ screenReaderPageLabel }} </span>\r\n            <span>{{\r\n              page.label === \"...\" ? page.label : (page.label | number: \"\")\r\n            }}</span>\r\n          </a>\r\n          <ng-container *ngIf=\"p.getCurrent() === page.value\">\r\n            <span class=\"show-for-sr\">{{ screenReaderCurrentLabel }} </span>\r\n            <span>{{\r\n              page.label === \"...\" ? page.label : (page.label | number: \"\")\r\n            }}</span>\r\n          </ng-container>\r\n        </li>\r\n        <li\r\n          class=\"pagination-next pagination-font page\"\r\n          [class.disabled]=\"p.isLastPage()\"\r\n          *ngIf=\"directionLinks\"\r\n        >\r\n          <a\r\n            tabindex=\"0\"\r\n            *ngIf=\"!p.isLastPage()\"\r\n            (keyup.enter)=\"p.next()\"\r\n            (click)=\"p.next()\"\r\n            [attr.aria-label]=\"nextLabel + ' ' + screenReaderPageLabel\"\r\n          >\r\n            {{ nextLabel }}\r\n          </a>\r\n          <span *ngIf=\"p.isLastPage()\">\r\n            {{ nextLabel }}\r\n          </span>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  </div>\r\n</pagination-template>\r\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None,
                styles: [".show-label{margin-right:.25rem}.no-padding{padding:0}.select-box{border:1px solid rgba(51,51,51,.6901960784313725);border-radius:4px;color:rgba(51,51,51,.6901960784313725);opacity:1}.entries-label{margin-left:.25rem}.page{background-color:#fff;border:1px solid #dee2e6;margin-left:-1px;padding:.15rem .2rem;position:relative}.ngx-pagination{display:flex;justify-content:space-between;margin-bottom:1rem;margin-left:0}.ngx-pagination:after,.ngx-pagination:before{display:table}.ngx-pagination:after{clear:both}.ngx-pagination li{-moz-user-select:none;-ms-user-select:none;-webkit-user-select:none;border-radius:0;display:inline-block}.ngx-pagination a,.ngx-pagination button{border-radius:0;display:block;padding:.1875rem .625rem}.ngx-pagination a:hover,.ngx-pagination button:hover{background:#e6e6e6}.ngx-pagination .current{background:#2199e8;border:1px solid #dee2e6;color:#fefefe;cursor:default;padding:.365rem .625rem}.ngx-pagination .disabled{color:#cacaca;cursor:default;padding:.3rem .625rem}.ngx-pagination .disabled:hover{background:transparent}.ngx-pagination a,.ngx-pagination button{cursor:pointer}.ngx-pagination .pagination-previous.disabled:before,.ngx-pagination .pagination-previous a:before{content:\"\u00AB\";display:inline-block}.ngx-pagination .pagination-next.disabled:after,.ngx-pagination .pagination-next a:after{content:\"\u00BB\";display:inline-block}.ngx-pagination .show-for-sr{clip:rect(0,0,0,0);height:1px;overflow:hidden;position:absolute!important;width:1px}.ngx-pagination .small-screen{display:none}@media screen and (max-width:601px){.ngx-pagination.responsive .small-screen{display:inline-block}.ngx-pagination.responsive li:not(.small-screen):not(.pagination-previous):not(.pagination-next){display:none}}@media only screen and (max-width:1023px){.pagination-font{color:#2e384d!important;font-size:14px!important}}@media only screen and (min-width:1024px) and (max-width:1439px){.pagination-font{color:#2e384d;font-size:16px!important}}@media only screen and (min-width:1440px) and (max-width:2559px){.pagination-font{color:#2e384d;font-size:18px!important}}"]
            },] }
];
PaginationComponent.propDecorators = {
    id: [{ type: Input }],
    maxSize: [{ type: Input }],
    isItemsPerPage: [{ type: Input }],
    directionLinks: [{ type: Input }],
    autoHide: [{ type: Input }],
    responsive: [{ type: Input }],
    previousLabel: [{ type: Input }],
    nextLabel: [{ type: Input }],
    screenReaderPaginationLabel: [{ type: Input }],
    screenReaderPageLabel: [{ type: Input }],
    screenReaderCurrentLabel: [{ type: Input }],
    pageChange: [{ type: Output }],
    pageBoundsCorrection: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFnaW5hdGlvbi5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiQzovQWRyZW5hbGluZVdTL2RlbW9zL25neC10YWJsZS1wYWdpbmF0aW9uL3Byb2plY3RzL25neC10YWJsZS1wYWdpbmF0aW9uL3NyYy8iLCJzb3VyY2VzIjpbImxpYi9wYWdpbmF0aW9uLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUNULEtBQUssRUFDTCxNQUFNLEVBQ04sWUFBWSxFQUNaLHVCQUF1QixFQUN2QixpQkFBaUIsR0FDbEIsTUFBTSxlQUFlLENBQUM7QUFDdkIsU0FBUyxlQUFlLENBQUMsS0FBdUI7SUFDOUMsT0FBTyxDQUFDLENBQUMsS0FBSyxJQUFJLEtBQUssS0FBSyxPQUFPLENBQUM7QUFDdEMsQ0FBQztBQUVEOztHQUVHO0FBUUgsTUFBTSxPQUFPLG1CQUFtQjtJQVBoQztRQVNXLFlBQU8sR0FBVyxDQUFDLENBQUM7UUF3QjdCLGtDQUFrQztRQUN6QixrQkFBYSxHQUFXLEVBQUUsQ0FBQztRQUMzQixjQUFTLEdBQVcsRUFBRSxDQUFDO1FBQ3ZCLGdDQUEyQixHQUFHLFlBQVksQ0FBQztRQUMzQywwQkFBcUIsR0FBVyxNQUFNLENBQUM7UUFDdkMsNkJBQXdCLEdBQVcsZ0JBQWdCLENBQUM7UUFDbkQsZUFBVSxHQUF5QixJQUFJLFlBQVksRUFBVSxDQUFDO1FBQzlELHlCQUFvQixHQUF5QixJQUFJLFlBQVksRUFFcEUsQ0FBQztRQUVJLG9CQUFlLEdBQVksSUFBSSxDQUFDO1FBQ2hDLGNBQVMsR0FBWSxLQUFLLENBQUM7UUFDM0IsZ0JBQVcsR0FBWSxLQUFLLENBQUM7SUFDdkMsQ0FBQztJQXBDQyx5QkFBeUI7SUFDekIsSUFDSSxjQUFjO1FBQ2hCLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQztJQUM5QixDQUFDO0lBQ0QsSUFBSSxjQUFjLENBQUMsS0FBYztRQUMvQixJQUFJLENBQUMsZUFBZSxHQUFHLGVBQWUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNoRCxDQUFDO0lBQ0QsSUFDSSxRQUFRO1FBQ1YsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDO0lBQ3hCLENBQUM7SUFDRCxJQUFJLFFBQVEsQ0FBQyxLQUFjO1FBQ3pCLElBQUksQ0FBQyxTQUFTLEdBQUcsZUFBZSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzFDLENBQUM7SUFDRCxJQUNJLFVBQVU7UUFDWixPQUFPLElBQUksQ0FBQyxXQUFXLENBQUM7SUFDMUIsQ0FBQztJQUNELElBQUksVUFBVSxDQUFDLEtBQWM7UUFDM0IsSUFBSSxDQUFDLFdBQVcsR0FBRyxlQUFlLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDNUMsQ0FBQzs7O1lBaENGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsaUJBQWlCO2dCQUMzQixveUhBQTBDO2dCQUUxQyxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtnQkFDL0MsYUFBYSxFQUFFLGlCQUFpQixDQUFDLElBQUk7O2FBQ3RDOzs7aUJBRUUsS0FBSztzQkFDTCxLQUFLOzZCQUNMLEtBQUs7NkJBRUwsS0FBSzt1QkFPTCxLQUFLO3lCQU9MLEtBQUs7NEJBUUwsS0FBSzt3QkFDTCxLQUFLOzBDQUNMLEtBQUs7b0NBQ0wsS0FBSzt1Q0FDTCxLQUFLO3lCQUNMLE1BQU07bUNBQ04sTUFBTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XHJcbiAgQ29tcG9uZW50LFxyXG4gIElucHV0LFxyXG4gIE91dHB1dCxcclxuICBFdmVudEVtaXR0ZXIsXHJcbiAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXHJcbiAgVmlld0VuY2Fwc3VsYXRpb24sXHJcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmZ1bmN0aW9uIGNvZXJjZVRvQm9vbGVhbihpbnB1dDogc3RyaW5nIHwgYm9vbGVhbik6IGJvb2xlYW4ge1xyXG4gIHJldHVybiAhIWlucHV0ICYmIGlucHV0ICE9PSAnZmFsc2UnO1xyXG59XHJcblxyXG4vKipcclxuICogVGhlIGRlZmF1bHQgcGFnaW5hdGlvbiBjb250cm9scyBjb21wb25lbnQuIEFjdHVhbGx5IGp1c3QgYSBkZWZhdWx0IGltcGxlbWVudGF0aW9uIG9mIGEgY3VzdG9tIHRlbXBsYXRlLlxyXG4gKi9cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICdwYWdpbmctY29udHJvbHMnLFxyXG4gIHRlbXBsYXRlVXJsOiAnLi9wYWdpbmF0aW9uLmNvbXBvbmVudC5odG1sJyxcclxuICBzdHlsZVVybHM6IFsnLi9wYWdpbmF0aW9uLmNvbXBvbmVudC5jc3MnXSxcclxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcclxuICBlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5Ob25lLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgUGFnaW5hdGlvbkNvbXBvbmVudCB7XHJcbiAgQElucHV0KCkgaWQ6IHN0cmluZztcclxuICBASW5wdXQoKSBtYXhTaXplOiBudW1iZXIgPSA3O1xyXG4gIEBJbnB1dCgpIGlzSXRlbXNQZXJQYWdlOiBib29sZWFuO1xyXG4gIC8vIEBJbnB1dCgpIGl0ZW1zUGVyUGFnZTtcclxuICBASW5wdXQoKVxyXG4gIGdldCBkaXJlY3Rpb25MaW5rcygpOiBib29sZWFuIHtcclxuICAgIHJldHVybiB0aGlzLl9kaXJlY3Rpb25MaW5rcztcclxuICB9XHJcbiAgc2V0IGRpcmVjdGlvbkxpbmtzKHZhbHVlOiBib29sZWFuKSB7XHJcbiAgICB0aGlzLl9kaXJlY3Rpb25MaW5rcyA9IGNvZXJjZVRvQm9vbGVhbih2YWx1ZSk7XHJcbiAgfVxyXG4gIEBJbnB1dCgpXHJcbiAgZ2V0IGF1dG9IaWRlKCk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHRoaXMuX2F1dG9IaWRlO1xyXG4gIH1cclxuICBzZXQgYXV0b0hpZGUodmFsdWU6IGJvb2xlYW4pIHtcclxuICAgIHRoaXMuX2F1dG9IaWRlID0gY29lcmNlVG9Cb29sZWFuKHZhbHVlKTtcclxuICB9XHJcbiAgQElucHV0KClcclxuICBnZXQgcmVzcG9uc2l2ZSgpOiBib29sZWFuIHtcclxuICAgIHJldHVybiB0aGlzLl9yZXNwb25zaXZlO1xyXG4gIH1cclxuICBzZXQgcmVzcG9uc2l2ZSh2YWx1ZTogYm9vbGVhbikge1xyXG4gICAgdGhpcy5fcmVzcG9uc2l2ZSA9IGNvZXJjZVRvQm9vbGVhbih2YWx1ZSk7XHJcbiAgfVxyXG4gIC8vIEBJbnB1dCgpIGlzSXRlbXNOdW1iZXIgPSBmYWxzZTtcclxuICBASW5wdXQoKSBwcmV2aW91c0xhYmVsOiBzdHJpbmcgPSAnJztcclxuICBASW5wdXQoKSBuZXh0TGFiZWw6IHN0cmluZyA9ICcnO1xyXG4gIEBJbnB1dCgpIHNjcmVlblJlYWRlclBhZ2luYXRpb25MYWJlbCA9ICdQYWdpbmF0aW9uJztcclxuICBASW5wdXQoKSBzY3JlZW5SZWFkZXJQYWdlTGFiZWw6IHN0cmluZyA9ICdwYWdlJztcclxuICBASW5wdXQoKSBzY3JlZW5SZWFkZXJDdXJyZW50TGFiZWw6IHN0cmluZyA9IGBZb3UncmUgb24gcGFnZWA7XHJcbiAgQE91dHB1dCgpIHBhZ2VDaGFuZ2U6IEV2ZW50RW1pdHRlcjxudW1iZXI+ID0gbmV3IEV2ZW50RW1pdHRlcjxudW1iZXI+KCk7XHJcbiAgQE91dHB1dCgpIHBhZ2VCb3VuZHNDb3JyZWN0aW9uOiBFdmVudEVtaXR0ZXI8bnVtYmVyPiA9IG5ldyBFdmVudEVtaXR0ZXI8XHJcbiAgICBudW1iZXJcclxuICA+KCk7XHJcblxyXG4gIHByaXZhdGUgX2RpcmVjdGlvbkxpbmtzOiBib29sZWFuID0gdHJ1ZTtcclxuICBwcml2YXRlIF9hdXRvSGlkZTogYm9vbGVhbiA9IGZhbHNlO1xyXG4gIHByaXZhdGUgX3Jlc3BvbnNpdmU6IGJvb2xlYW4gPSBmYWxzZTtcclxufVxyXG4iXX0=