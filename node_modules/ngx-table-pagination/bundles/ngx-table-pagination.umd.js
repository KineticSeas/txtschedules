(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('@angular/forms')) :
    typeof define === 'function' && define.amd ? define('ngx-table-pagination', ['exports', '@angular/core', '@angular/common', '@angular/forms'], factory) :
    (global = global || self, factory(global['ngx-table-pagination'] = {}, global.ng.core, global.ng.common, global.ng.forms));
}(this, (function (exports, core, common, forms) { 'use strict';

    var PaginationService = /** @class */ (function () {
        function PaginationService() {
            this.change = new core.EventEmitter();
            this.instances = {};
            this.DEFAULT_ID = 'DEFAULT_PAGINATION_ID';
        }
        PaginationService.prototype.defaultId = function () { return this.DEFAULT_ID; };
        /**
         * Register a PaginationInstance with this service. Returns a
         * boolean value signifying whether the instance is new or
         * updated (true = new or updated, false = unchanged).
         */
        PaginationService.prototype.register = function (instance) {
            if (instance.id == null) {
                instance.id = this.DEFAULT_ID;
            }
            if (!this.instances[instance.id]) {
                this.instances[instance.id] = instance;
                return true;
            }
            else {
                return this.updateInstance(instance);
            }
        };
        /**
         * Check each property of the instance and update any that have changed. Return
         * true if any changes were made, else return false.
         */
        PaginationService.prototype.updateInstance = function (instance) {
            var changed = false;
            for (var prop in this.instances[instance.id]) {
                if (instance[prop] !== this.instances[instance.id][prop]) {
                    this.instances[instance.id][prop] = instance[prop];
                    changed = true;
                }
            }
            return changed;
        };
        /**
         * Returns the current page number.
         */
        PaginationService.prototype.getCurrentPage = function (id) {
            if (this.instances[id]) {
                return this.instances[id].currentPage;
            }
        };
        /**
         * Sets the current page number.
         */
        PaginationService.prototype.setCurrentPage = function (id, page) {
            if (this.instances[id]) {
                var instance = this.instances[id];
                var maxPage = Math.ceil(instance.totalItems / instance.itemsPerPage);
                if (page <= maxPage && 1 <= page) {
                    this.instances[id].currentPage = page;
                    this.change.emit(id);
                }
            }
        };
        /**
         * Sets the value of instance.totalItems
         */
        PaginationService.prototype.setTotalItems = function (id, totalItems) {
            if (this.instances[id] && 0 <= totalItems) {
                this.instances[id].totalItems = totalItems;
                this.change.emit(id);
            }
        };
        /**
         * Sets the value of instance.itemsPerPage.
         */
        PaginationService.prototype.setItemsPerPage = function (id, itemsPerPage) {
            if (this.instances[id]) {
                this.instances[id].itemsPerPage = itemsPerPage;
                this.change.emit(id);
            }
        };
        /**
         * Returns a clone of the pagination instance object matching the id. If no
         * id specified, returns the instance corresponding to the default id.
         */
        PaginationService.prototype.getInstance = function (id) {
            if (id === void 0) { id = this.DEFAULT_ID; }
            if (this.instances[id]) {
                return this.clone(this.instances[id]);
            }
            return {};
        };
        /**
         * Perform a shallow clone of an object.
         */
        PaginationService.prototype.clone = function (obj) {
            var target = {};
            for (var i in obj) {
                if (obj.hasOwnProperty(i)) {
                    target[i] = obj[i];
                }
            }
            return target;
        };
        return PaginationService;
    }());

    function coerceToBoolean(input) {
        return !!input && input !== 'false';
    }
    /**
     * The default pagination controls component. Actually just a default implementation of a custom template.
     */
    var PaginationComponent = /** @class */ (function () {
        function PaginationComponent() {
            this.maxSize = 7;
            // @Input() isItemsNumber = false;
            this.previousLabel = '';
            this.nextLabel = '';
            this.screenReaderPaginationLabel = 'Pagination';
            this.screenReaderPageLabel = 'page';
            this.screenReaderCurrentLabel = "You're on page";
            this.pageChange = new core.EventEmitter();
            this.pageBoundsCorrection = new core.EventEmitter();
            this._directionLinks = true;
            this._autoHide = false;
            this._responsive = false;
        }
        Object.defineProperty(PaginationComponent.prototype, "directionLinks", {
            // @Input() itemsPerPage;
            get: function () {
                return this._directionLinks;
            },
            set: function (value) {
                this._directionLinks = coerceToBoolean(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PaginationComponent.prototype, "autoHide", {
            get: function () {
                return this._autoHide;
            },
            set: function (value) {
                this._autoHide = coerceToBoolean(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PaginationComponent.prototype, "responsive", {
            get: function () {
                return this._responsive;
            },
            set: function (value) {
                this._responsive = coerceToBoolean(value);
            },
            enumerable: false,
            configurable: true
        });
        return PaginationComponent;
    }());
    PaginationComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'paging-controls',
                    template: "<pagination-template\r\n  #p=\"paginationApi\"\r\n  [id]=\"id\"\r\n  [maxSize]=\"maxSize\"\r\n  (pageChange)=\"pageChange.emit($event)\"\r\n  (pageBoundsCorrection)=\"pageBoundsCorrection.emit($event)\"\r\n>\r\n  <div *ngIf=\"!(autoHide && p.pages.length <= 1)\">\r\n    <div *ngIf=\"isItemsPerPage\">\r\n      <span style=\"display: flex\" class=\"pagination-font\">\r\n        <label class=\"show-label\">Show</label>\r\n        <select\r\n          class=\"select-box pagination-font\"\r\n          [(ngModel)]=\"p.itemsPerPage\"\r\n          (change)=\"p.pageSizeChanged($event.target.value)\"\r\n        >\r\n          <option\r\n            *ngFor=\"let pageSizeDefault of p.pageSizes\"\r\n            value=\"{{ pageSizeDefault }}\"\r\n            [selected]=\"pageSizeDefault == p.itemsPerPage\"\r\n          >\r\n            {{ pageSizeDefault }}\r\n          </option>\r\n        </select>\r\n        <label class=\"entries-label\">entries</label></span\r\n      >\r\n    </div>\r\n\r\n    <div\r\n      class=\"ngx-pagination pagination-font\"\r\n      role=\"navigation\"\r\n      *ngIf=\"!isItemsPerPage\"\r\n      [attr.aria-label]=\"screenReaderPaginationLabel\"\r\n      [class.responsive]=\"responsive\"\r\n    >\r\n      <label\r\n        >Showing {{ p.getStartIndex() }} - {{ p.getEndIndex() }} of\r\n        {{ p.getTotalItems() }} entries</label\r\n      >\r\n      <ul role=\"navigation\" class=\"\">\r\n        <li\r\n          class=\"pagination-previous pagination-font page\"\r\n          [class.disabled]=\"p.isFirstPage()\"\r\n          *ngIf=\"directionLinks\"\r\n        >\r\n          <a\r\n            tabindex=\"0\"\r\n            *ngIf=\"1 < p.getCurrent()\"\r\n            (keyup.enter)=\"p.previous()\"\r\n            (click)=\"p.previous()\"\r\n            [attr.aria-label]=\"previousLabel + ' ' + screenReaderPageLabel\"\r\n          >\r\n            {{ previousLabel }}\r\n          </a>\r\n          <span *ngIf=\"p.isFirstPage()\">\r\n            {{ previousLabel }}\r\n          </span>\r\n        </li>\r\n        <li class=\"small-screen pagination-font page\">\r\n          {{ p.getCurrent() }} / {{ p.getLastPage() }}\r\n        </li>\r\n        <li\r\n          class=\"pagination-font page\"\r\n          [class.current]=\"p.getCurrent() === page.value\"\r\n          [class.ellipsis]=\"page.label === '...'\"\r\n          *ngFor=\"let page of p.pages\"\r\n        >\r\n          <a\r\n            tabindex=\"0\"\r\n            (keyup.enter)=\"p.setCurrent(page.value)\"\r\n            (click)=\"p.setCurrent(page.value)\"\r\n            *ngIf=\"p.getCurrent() !== page.value\"\r\n          >\r\n            <span class=\"show-for-sr\">{{ screenReaderPageLabel }} </span>\r\n            <span>{{\r\n              page.label === \"...\" ? page.label : (page.label | number: \"\")\r\n            }}</span>\r\n          </a>\r\n          <ng-container *ngIf=\"p.getCurrent() === page.value\">\r\n            <span class=\"show-for-sr\">{{ screenReaderCurrentLabel }} </span>\r\n            <span>{{\r\n              page.label === \"...\" ? page.label : (page.label | number: \"\")\r\n            }}</span>\r\n          </ng-container>\r\n        </li>\r\n        <li\r\n          class=\"pagination-next pagination-font page\"\r\n          [class.disabled]=\"p.isLastPage()\"\r\n          *ngIf=\"directionLinks\"\r\n        >\r\n          <a\r\n            tabindex=\"0\"\r\n            *ngIf=\"!p.isLastPage()\"\r\n            (keyup.enter)=\"p.next()\"\r\n            (click)=\"p.next()\"\r\n            [attr.aria-label]=\"nextLabel + ' ' + screenReaderPageLabel\"\r\n          >\r\n            {{ nextLabel }}\r\n          </a>\r\n          <span *ngIf=\"p.isLastPage()\">\r\n            {{ nextLabel }}\r\n          </span>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  </div>\r\n</pagination-template>\r\n",
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    encapsulation: core.ViewEncapsulation.None,
                    styles: [".show-label{margin-right:.25rem}.no-padding{padding:0}.select-box{border:1px solid rgba(51,51,51,.6901960784313725);border-radius:4px;color:rgba(51,51,51,.6901960784313725);opacity:1}.entries-label{margin-left:.25rem}.page{background-color:#fff;border:1px solid #dee2e6;margin-left:-1px;padding:.15rem .2rem;position:relative}.ngx-pagination{display:flex;justify-content:space-between;margin-bottom:1rem;margin-left:0}.ngx-pagination:after,.ngx-pagination:before{display:table}.ngx-pagination:after{clear:both}.ngx-pagination li{-moz-user-select:none;-ms-user-select:none;-webkit-user-select:none;border-radius:0;display:inline-block}.ngx-pagination a,.ngx-pagination button{border-radius:0;display:block;padding:.1875rem .625rem}.ngx-pagination a:hover,.ngx-pagination button:hover{background:#e6e6e6}.ngx-pagination .current{background:#2199e8;border:1px solid #dee2e6;color:#fefefe;cursor:default;padding:.365rem .625rem}.ngx-pagination .disabled{color:#cacaca;cursor:default;padding:.3rem .625rem}.ngx-pagination .disabled:hover{background:transparent}.ngx-pagination a,.ngx-pagination button{cursor:pointer}.ngx-pagination .pagination-previous.disabled:before,.ngx-pagination .pagination-previous a:before{content:\"\u00AB\";display:inline-block}.ngx-pagination .pagination-next.disabled:after,.ngx-pagination .pagination-next a:after{content:\"\u00BB\";display:inline-block}.ngx-pagination .show-for-sr{clip:rect(0,0,0,0);height:1px;overflow:hidden;position:absolute!important;width:1px}.ngx-pagination .small-screen{display:none}@media screen and (max-width:601px){.ngx-pagination.responsive .small-screen{display:inline-block}.ngx-pagination.responsive li:not(.small-screen):not(.pagination-previous):not(.pagination-next){display:none}}@media only screen and (max-width:1023px){.pagination-font{color:#2e384d!important;font-size:14px!important}}@media only screen and (min-width:1024px) and (max-width:1439px){.pagination-font{color:#2e384d;font-size:16px!important}}@media only screen and (min-width:1440px) and (max-width:2559px){.pagination-font{color:#2e384d;font-size:18px!important}}"]
                },] }
    ];
    PaginationComponent.propDecorators = {
        id: [{ type: core.Input }],
        maxSize: [{ type: core.Input }],
        isItemsPerPage: [{ type: core.Input }],
        directionLinks: [{ type: core.Input }],
        autoHide: [{ type: core.Input }],
        responsive: [{ type: core.Input }],
        previousLabel: [{ type: core.Input }],
        nextLabel: [{ type: core.Input }],
        screenReaderPaginationLabel: [{ type: core.Input }],
        screenReaderPageLabel: [{ type: core.Input }],
        screenReaderCurrentLabel: [{ type: core.Input }],
        pageChange: [{ type: core.Output }],
        pageBoundsCorrection: [{ type: core.Output }]
    };

    /**
     * This directive is what powers all pagination controls components, including the default one.
     * It exposes an API which is hooked up to the PaginationService to keep the PaginatePipe in sync
     * with the pagination controls.
     */
    var PaginationDirective = /** @class */ (function () {
        function PaginationDirective(service, changeDetectorRef) {
            var _this = this;
            this.service = service;
            this.changeDetectorRef = changeDetectorRef;
            this.maxSize = 7;
            this.pageChange = new core.EventEmitter();
            this.pageBoundsCorrection = new core.EventEmitter();
            this.pages = [];
            this.pageSizes = [];
            this.changeSub = this.service.change.subscribe(function (id) {
                if (_this.id === id) {
                    _this.updatePageLinks();
                    _this.changeDetectorRef.markForCheck();
                    _this.changeDetectorRef.detectChanges();
                    var inst = _this.service.getInstance(_this.id);
                    _this.itemsPerPage = inst.itemsPerPage;
                }
            });
        }
        PaginationDirective.prototype.ngOnInit = function () {
            if (this.id === undefined) {
                this.id = this.service.defaultId();
            }
            var inst = this.service.getInstance(this.id);
            this.itemsPerPage = inst.itemsPerPage;
            for (var i = 5; i <= inst.totalItems;) {
                this.pageSizes.push(i);
                i += 5;
            }
            this.updatePageLinks();
        };
        PaginationDirective.prototype.ngOnChanges = function (changes) {
            this.updatePageLinks();
        };
        PaginationDirective.prototype.ngOnDestroy = function () {
            this.changeSub.unsubscribe();
        };
        PaginationDirective.prototype.pageSizeChanged = function (event) {
            this.itemsPerPage = event;
            this.service.setItemsPerPage(this.id, event);
            this.setCurrent(1);
            this.updatePageLinks();
        };
        /**
         * Go to the previous page
         */
        PaginationDirective.prototype.previous = function () {
            this.checkValidId();
            this.setCurrent(this.getCurrent() - 1);
        };
        /**
         * Go to the next page
         */
        PaginationDirective.prototype.next = function () {
            this.checkValidId();
            this.setCurrent(this.getCurrent() + 1);
        };
        /**
         * Returns true if current page is first page
         */
        PaginationDirective.prototype.isFirstPage = function () {
            return this.getCurrent() === 1;
        };
        /**
         * Returns true if current page is last page
         */
        PaginationDirective.prototype.isLastPage = function () {
            return this.getLastPage() === this.getCurrent();
        };
        /**
         * Set the current page number.
         */
        PaginationDirective.prototype.setCurrent = function (page) {
            this.pageChange.emit(page);
        };
        /**
         * Get the current page number.
         */
        PaginationDirective.prototype.getCurrent = function () {
            return this.service.getCurrentPage(this.id);
        };
        /**
         * Returns the last page number
         */
        PaginationDirective.prototype.getLastPage = function () {
            var inst = this.service.getInstance(this.id);
            if (inst.totalItems < 1) {
                // when there are 0 or fewer (an error case) items, there are no "pages" as such,
                // but it makes sense to consider a single, empty page as the last page.
                return 1;
            }
            return Math.ceil(inst.totalItems / inst.itemsPerPage);
        };
        PaginationDirective.prototype.getTotalItems = function () {
            return this.service.getInstance(this.id).totalItems;
        };
        PaginationDirective.prototype.getStartIndex = function () {
            var inst = this.service.getInstance(this.id);
            if (inst.totalItems < inst.itemsPerPage * (inst.currentPage - 1) + 1) {
                this.setCurrent(1);
            }
            return inst.itemsPerPage * (inst.currentPage - 1) + 1;
        };
        PaginationDirective.prototype.getEndIndex = function () {
            var inst = this.service.getInstance(this.id);
            var end = inst.itemsPerPage * inst.currentPage;
            if (inst.totalItems < end) {
                return inst.totalItems;
            }
            return end;
        };
        PaginationDirective.prototype.checkValidId = function () {
            if (this.service.getInstance(this.id).id == null) {
                console.warn("PaginationControlsDirective: the specified id \"" + this.id + "\" does not match any registered PaginationInstance");
            }
        };
        /**
         * Updates the page links and checks that the current page is valid. Should run whenever the
         * PaginationService.change stream emits a value matching the current ID, or when any of the
         * input values changes.
         */
        PaginationDirective.prototype.updatePageLinks = function () {
            var _this = this;
            var inst = this.service.getInstance(this.id);
            var correctedCurrentPage = this.outOfBoundCorrection(inst);
            if (correctedCurrentPage !== inst.currentPage) {
                setTimeout(function () {
                    _this.pageBoundsCorrection.emit(correctedCurrentPage);
                    _this.pages = _this.createPageArray(inst.currentPage, inst.itemsPerPage, inst.totalItems, _this.maxSize);
                });
            }
            else {
                this.pages = this.createPageArray(inst.currentPage, inst.itemsPerPage, inst.totalItems, this.maxSize);
            }
        };
        /**
         * Checks that the instance.currentPage property is within bounds for the current page range.
         * If not, return a correct value for currentPage, or the current value if OK.
         */
        PaginationDirective.prototype.outOfBoundCorrection = function (instance) {
            var totalPages = Math.ceil(instance.totalItems / instance.itemsPerPage);
            if (totalPages < instance.currentPage && 0 < totalPages) {
                return totalPages;
            }
            else if (instance.currentPage < 1) {
                return 1;
            }
            return instance.currentPage;
        };
        /**
         * Returns an array of Page objects to use in the pagination controls.
         */
        PaginationDirective.prototype.createPageArray = function (currentPage, itemsPerPage, totalItems, paginationRange) {
            // paginationRange could be a string if passed from attribute, so cast to number.
            paginationRange = +paginationRange;
            var pages = [];
            var totalPages = Math.ceil(totalItems / itemsPerPage);
            var halfWay = Math.ceil(paginationRange / 2);
            var isStart = currentPage <= halfWay;
            var isEnd = totalPages - halfWay < currentPage;
            var isMiddle = !isStart && !isEnd;
            var ellipsesNeeded = paginationRange < totalPages;
            var i = 1;
            while (i <= totalPages && i <= paginationRange) {
                var label = void 0;
                var pageNumber = this.calculatePageNumber(i, currentPage, paginationRange, totalPages);
                var openingEllipsesNeeded = i === 2 && (isMiddle || isEnd);
                var closingEllipsesNeeded = i === paginationRange - 1 && (isMiddle || isStart);
                if (ellipsesNeeded && (openingEllipsesNeeded || closingEllipsesNeeded)) {
                    label = '...';
                }
                else {
                    label = pageNumber;
                }
                pages.push({
                    label: label,
                    value: pageNumber,
                });
                i++;
            }
            return pages;
        };
        /**
         * Given the position in the sequence of pagination links [i],
         * figure out what page number corresponds to that position.
         */
        PaginationDirective.prototype.calculatePageNumber = function (i, currentPage, paginationRange, totalPages) {
            var halfWay = Math.ceil(paginationRange / 2);
            if (i === paginationRange) {
                return totalPages;
            }
            else if (i === 1) {
                return i;
            }
            else if (paginationRange < totalPages) {
                if (totalPages - halfWay < currentPage) {
                    return totalPages - paginationRange + i;
                }
                else if (halfWay < currentPage) {
                    return currentPage - halfWay + i;
                }
                else {
                    return i;
                }
            }
            else {
                return i;
            }
        };
        return PaginationDirective;
    }());
    PaginationDirective.decorators = [
        { type: core.Directive, args: [{
                    selector: 'pagination-template,[pagination-template]',
                    exportAs: 'paginationApi',
                },] }
    ];
    PaginationDirective.ctorParameters = function () { return [
        { type: PaginationService },
        { type: core.ChangeDetectorRef }
    ]; };
    PaginationDirective.propDecorators = {
        id: [{ type: core.Input }],
        maxSize: [{ type: core.Input }],
        pageChange: [{ type: core.Output }],
        pageBoundsCorrection: [{ type: core.Output }]
    };

    var LARGE_NUMBER = Number.MAX_SAFE_INTEGER;
    var PaginationPipe = /** @class */ (function () {
        function PaginationPipe(service) {
            this.service = service;
            // store the values from the last time the pipe was invoked
            this.state = {};
        }
        PaginationPipe.prototype.transform = function (collection, args) {
            // When an observable is passed through the AsyncPipe, it will output
            // `null` until the subscription resolves. In this case, we want to
            // use the cached data from the `state` object to prevent the NgFor
            // from flashing empty until the real values arrive.
            if (!(collection instanceof Array)) {
                var _id = args.id || this.service.defaultId();
                if (this.state[_id]) {
                    return this.state[_id].slice;
                }
                else {
                    return collection;
                }
            }
            var serverSideMode = args.totalItems && args.totalItems !== collection.length;
            var instance = this.createInstance(collection, args);
            var id = instance.id;
            var start, end;
            var perPage = instance.itemsPerPage;
            var emitChange = this.service.register(instance);
            if (!serverSideMode && collection instanceof Array) {
                perPage = +perPage || LARGE_NUMBER;
                start = (instance.currentPage - 1) * perPage;
                end = start + perPage;
                var isIdentical = this.stateIsIdentical(id, collection, start, end);
                if (isIdentical) {
                    return this.state[id].slice;
                }
                else {
                    var slice = collection.slice(start, end);
                    this.saveState(id, collection, slice, start, end);
                    this.service.change.emit(id);
                    return slice;
                }
            }
            else {
                if (emitChange) {
                    this.service.change.emit(id);
                }
                // save the state for server-side collection to avoid null
                // flash as new data loads.
                this.saveState(id, collection, collection, start, end);
                return collection;
            }
        };
        /**
         * Create an PaginationInstance object, using defaults for any optional properties not supplied.
         */
        PaginationPipe.prototype.createInstance = function (collection, config) {
            var _a;
            this.checkConfig(config);
            var id = config.id != null ? config.id : this.service.defaultId();
            if (config.itemsPerPage) {
                if (!((_a = this.service.getInstance(id)) === null || _a === void 0 ? void 0 : _a.itemsPerPage)) {
                    this.service.setItemsPerPage(id, +config.itemsPerPage);
                }
            }
            var perPage = (config.itemsPerPage && !this.service.getInstance(id).itemsPerPage) ? config.itemsPerPage :
                this.service.getInstance(id).itemsPerPage;
            return {
                id: config.id != null ? config.id : this.service.defaultId(),
                itemsPerPage: +perPage || 5,
                currentPage: +config.currentPage || 1,
                totalItems: +config.totalItems || collection.length
            };
        };
        /**
         * Ensure the argument passed to the filter contains the required properties.
         */
        PaginationPipe.prototype.checkConfig = function (config) {
            var required = ['currentPage'];
            var missing = required.filter(function (prop) { return !(prop in config); });
            if (0 < missing.length) {
                throw new Error("PaginatePipe: Argument is missing the following required properties: " + missing.join(', '));
            }
        };
        /**
         * To avoid returning a brand new array each time the pipe is run, we store the state of the sliced
         * array for a given id. This means that the next time the pipe is run on this collection & id, we just
         * need to check that the collection, start and end points are all identical, and if so, return the
         * last sliced array.
         */
        PaginationPipe.prototype.saveState = function (id, collection, slice, start, end) {
            this.state[id] = {
                collection: collection,
                size: collection.length,
                slice: slice,
                start: start,
                end: end
            };
        };
        /**
         * For a given id, returns true if the collection, size, start and end values are identical.
         */
        PaginationPipe.prototype.stateIsIdentical = function (id, collection, start, end) {
            var state = this.state[id];
            if (!state) {
                return false;
            }
            var isMetaDataIdentical = state.size === collection.length &&
                state.start === start &&
                state.end === end;
            if (!isMetaDataIdentical) {
                return false;
            }
            return state.slice.every(function (element, index) { return element === collection[start + index]; });
        };
        return PaginationPipe;
    }());
    PaginationPipe.decorators = [
        { type: core.Pipe, args: [{
                    name: 'paginate',
                    pure: false
                },] }
    ];
    PaginationPipe.ctorParameters = function () { return [
        { type: PaginationService }
    ]; };

    var NgxTablePaginationModule = /** @class */ (function () {
        function NgxTablePaginationModule() {
        }
        return NgxTablePaginationModule;
    }());
    NgxTablePaginationModule.decorators = [
        { type: core.NgModule, args: [{
                    declarations: [
                        PaginationComponent,
                        PaginationPipe,
                        PaginationDirective
                    ],
                    imports: [
                        common.CommonModule,
                        forms.FormsModule
                    ],
                    providers: [PaginationService],
                    exports: [PaginationComponent,
                        PaginationPipe,
                        PaginationDirective]
                },] }
    ];

    /*
     * Public API Surface of pagination
     */

    /**
     * Generated bundle index. Do not edit.
     */

    exports.NgxTablePaginationModule = NgxTablePaginationModule;
    exports.PaginationComponent = PaginationComponent;
    exports.PaginationDirective = PaginationDirective;
    exports.PaginationPipe = PaginationPipe;
    exports.PaginationService = PaginationService;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ngx-table-pagination.umd.js.map
