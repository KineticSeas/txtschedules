{"version":3,"file":"ngx-table-pagination.umd.js","sources":["../../../projects/ngx-table-pagination/src/lib/pagination.service.ts","../../../projects/ngx-table-pagination/src/lib/pagination.component.ts","../../../projects/ngx-table-pagination/src/lib/pagination.directive.ts","../../../projects/ngx-table-pagination/src/lib/pagination.pipe.ts","../../../projects/ngx-table-pagination/src/lib/pagination.module.ts","../../../projects/ngx-table-pagination/src/public-api.ts","../../../projects/ngx-table-pagination/src/ngx-table-pagination.ts"],"sourcesContent":["import {EventEmitter} from '@angular/core'\r\nimport {PaginationInstance} from './pagination-instance';\r\n\r\nexport class PaginationService {\r\n\r\n    public change: EventEmitter<string> = new EventEmitter<string>();\r\n\r\n    private instances: { [id: string]: PaginationInstance } = {};\r\n    private DEFAULT_ID = 'DEFAULT_PAGINATION_ID';\r\n\r\n    public defaultId(): string { return this.DEFAULT_ID }\r\n\r\n    /**\r\n     * Register a PaginationInstance with this service. Returns a\r\n     * boolean value signifying whether the instance is new or\r\n     * updated (true = new or updated, false = unchanged).\r\n     */\r\n    public register(instance: PaginationInstance): boolean {\r\n        if (instance.id == null) {\r\n            instance.id = this.DEFAULT_ID;\r\n        }\r\n\r\n        if (!this.instances[instance.id]) {\r\n            this.instances[instance.id] = instance;\r\n            return true;\r\n        } else {\r\n            return this.updateInstance(instance);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Check each property of the instance and update any that have changed. Return\r\n     * true if any changes were made, else return false.\r\n     */\r\n    private updateInstance(instance: PaginationInstance): boolean {\r\n        let changed = false;\r\n        for (let prop in this.instances[instance.id]) {\r\n            if (instance[prop] !== this.instances[instance.id][prop]) {\r\n                this.instances[instance.id][prop] = instance[prop];\r\n                changed = true;\r\n            }\r\n        }\r\n        return changed;\r\n    }\r\n\r\n    /**\r\n     * Returns the current page number.\r\n     */\r\n    public getCurrentPage(id: string): number {\r\n        if (this.instances[id]) {\r\n            return this.instances[id].currentPage;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the current page number.\r\n     */\r\n    public setCurrentPage(id: string, page: number) {\r\n        if (this.instances[id]) {\r\n            let instance = this.instances[id];\r\n            let maxPage = Math.ceil(instance.totalItems / instance.itemsPerPage);\r\n            if (page <= maxPage && 1 <= page) {\r\n                this.instances[id].currentPage = page;\r\n                this.change.emit(id);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the value of instance.totalItems\r\n     */\r\n    public setTotalItems(id: string, totalItems: number) {\r\n        if (this.instances[id] && 0 <= totalItems) {\r\n            this.instances[id].totalItems = totalItems;\r\n            this.change.emit(id);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the value of instance.itemsPerPage.\r\n     */\r\n    public setItemsPerPage(id: string, itemsPerPage: number): void {\r\n        if (this.instances[id]) {\r\n            this.instances[id].itemsPerPage = itemsPerPage;\r\n            this.change.emit(id);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns a clone of the pagination instance object matching the id. If no\r\n     * id specified, returns the instance corresponding to the default id.\r\n     */\r\n    public getInstance(id: string = this.DEFAULT_ID): PaginationInstance {\r\n        if (this.instances[id]) {\r\n            return this.clone(this.instances[id]);\r\n        }\r\n        return {} as PaginationInstance;\r\n    }\r\n\r\n    /**\r\n     * Perform a shallow clone of an object.\r\n     */\r\n    private clone(obj: any): any {\r\n        const target = {};\r\n        for (const i in obj) {\r\n            if (obj.hasOwnProperty(i)) {\r\n                target[i] = obj[i];\r\n            }\r\n        }\r\n        return target;\r\n    }\r\n\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  ChangeDetectionStrategy,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nfunction coerceToBoolean(input: string | boolean): boolean {\r\n  return !!input && input !== 'false';\r\n}\r\n\r\n/**\r\n * The default pagination controls component. Actually just a default implementation of a custom template.\r\n */\r\n@Component({\r\n  selector: 'paging-controls',\r\n  templateUrl: './pagination.component.html',\r\n  styleUrls: ['./pagination.component.css'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class PaginationComponent {\r\n  @Input() id: string;\r\n  @Input() maxSize: number = 7;\r\n  @Input() isItemsPerPage: boolean;\r\n  // @Input() itemsPerPage;\r\n  @Input()\r\n  get directionLinks(): boolean {\r\n    return this._directionLinks;\r\n  }\r\n  set directionLinks(value: boolean) {\r\n    this._directionLinks = coerceToBoolean(value);\r\n  }\r\n  @Input()\r\n  get autoHide(): boolean {\r\n    return this._autoHide;\r\n  }\r\n  set autoHide(value: boolean) {\r\n    this._autoHide = coerceToBoolean(value);\r\n  }\r\n  @Input()\r\n  get responsive(): boolean {\r\n    return this._responsive;\r\n  }\r\n  set responsive(value: boolean) {\r\n    this._responsive = coerceToBoolean(value);\r\n  }\r\n  // @Input() isItemsNumber = false;\r\n  @Input() previousLabel: string = '';\r\n  @Input() nextLabel: string = '';\r\n  @Input() screenReaderPaginationLabel = 'Pagination';\r\n  @Input() screenReaderPageLabel: string = 'page';\r\n  @Input() screenReaderCurrentLabel: string = `You're on page`;\r\n  @Output() pageChange: EventEmitter<number> = new EventEmitter<number>();\r\n  @Output() pageBoundsCorrection: EventEmitter<number> = new EventEmitter<\r\n    number\r\n  >();\r\n\r\n  private _directionLinks: boolean = true;\r\n  private _autoHide: boolean = false;\r\n  private _responsive: boolean = false;\r\n}\r\n","import {\r\n  ChangeDetectorRef,\r\n  Directive,\r\n  EventEmitter,\r\n  Input,\r\n  Output,\r\n  OnInit,\r\n} from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\n\r\nimport { PaginationService } from './pagination.service';\r\nimport { PaginationInstance } from './pagination-instance';\r\n\r\nexport interface Page {\r\n  label: string;\r\n  value: any;\r\n}\r\n\r\n/**\r\n * This directive is what powers all pagination controls components, including the default one.\r\n * It exposes an API which is hooked up to the PaginationService to keep the PaginatePipe in sync\r\n * with the pagination controls.\r\n */\r\n@Directive({\r\n  selector: 'pagination-template,[pagination-template]',\r\n  exportAs: 'paginationApi',\r\n})\r\nexport class PaginationDirective implements OnInit {\r\n  @Input() id: string;\r\n  @Input() maxSize = 7;\r\n\r\n  @Output() pageChange: EventEmitter<number> = new EventEmitter<number>();\r\n  @Output() pageBoundsCorrection: EventEmitter<number> = new EventEmitter<\r\n    number\r\n  >();\r\n  pages: Page[] = [];\r\n  pageSizes: any[] = [];\r\n  itemsPerPage: number;\r\n  private changeSub: Subscription;\r\n\r\n  constructor(\r\n    private service: PaginationService,\r\n    private changeDetectorRef: ChangeDetectorRef\r\n  ) {\r\n    this.changeSub = this.service.change.subscribe((id) => {\r\n      if (this.id === id) {\r\n        this.updatePageLinks();\r\n        this.changeDetectorRef.markForCheck();\r\n        this.changeDetectorRef.detectChanges();\r\n        const inst = this.service.getInstance(this.id);\r\n        this.itemsPerPage = inst.itemsPerPage;\r\n      }\r\n    });\r\n  }\r\n\r\n  ngOnInit() {\r\n    if (this.id === undefined) {\r\n      this.id = this.service.defaultId();\r\n    }\r\n    const inst = this.service.getInstance(this.id);\r\n    this.itemsPerPage = inst.itemsPerPage;\r\n    for (let i = 5; i <= inst.totalItems; ) {\r\n      this.pageSizes.push(i);\r\n      i += 5;\r\n    }\r\n    this.updatePageLinks();\r\n  }\r\n\r\n  ngOnChanges(changes: any) {\r\n    this.updatePageLinks();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.changeSub.unsubscribe();\r\n  }\r\n  pageSizeChanged(event) {\r\n    this.itemsPerPage = event;\r\n    this.service.setItemsPerPage(this.id, event);\r\n    this.setCurrent(1);\r\n    this.updatePageLinks();\r\n  }\r\n  /**\r\n   * Go to the previous page\r\n   */\r\n  previous() {\r\n    this.checkValidId();\r\n    this.setCurrent(this.getCurrent() - 1);\r\n  }\r\n\r\n  /**\r\n   * Go to the next page\r\n   */\r\n  next() {\r\n    this.checkValidId();\r\n    this.setCurrent(this.getCurrent() + 1);\r\n  }\r\n\r\n  /**\r\n   * Returns true if current page is first page\r\n   */\r\n  isFirstPage(): boolean {\r\n    return this.getCurrent() === 1;\r\n  }\r\n\r\n  /**\r\n   * Returns true if current page is last page\r\n   */\r\n  isLastPage(): boolean {\r\n    return this.getLastPage() === this.getCurrent();\r\n  }\r\n\r\n  /**\r\n   * Set the current page number.\r\n   */\r\n  setCurrent(page: number) {\r\n    this.pageChange.emit(page);\r\n  }\r\n\r\n  /**\r\n   * Get the current page number.\r\n   */\r\n  getCurrent(): number {\r\n    return this.service.getCurrentPage(this.id);\r\n  }\r\n\r\n  /**\r\n   * Returns the last page number\r\n   */\r\n  getLastPage(): number {\r\n    const inst = this.service.getInstance(this.id);\r\n    if (inst.totalItems < 1) {\r\n      // when there are 0 or fewer (an error case) items, there are no \"pages\" as such,\r\n      // but it makes sense to consider a single, empty page as the last page.\r\n      return 1;\r\n    }\r\n    return Math.ceil(inst.totalItems / inst.itemsPerPage);\r\n  }\r\n\r\n  getTotalItems(): number {\r\n    return this.service.getInstance(this.id).totalItems;\r\n  }\r\n  getStartIndex(): number {\r\n    const inst = this.service.getInstance(this.id);\r\n    if (inst.totalItems < inst.itemsPerPage * (inst.currentPage - 1) + 1) {\r\n      this.setCurrent(1);\r\n    }\r\n    return inst.itemsPerPage * (inst.currentPage - 1) + 1;\r\n  }\r\n\r\n  getEndIndex(): number {\r\n    const inst = this.service.getInstance(this.id);\r\n    const end = inst.itemsPerPage * inst.currentPage;\r\n    if (inst.totalItems < end) {\r\n      return inst.totalItems;\r\n    }\r\n    return end;\r\n  }\r\n  private checkValidId(): void {\r\n    if (this.service.getInstance(this.id).id == null) {\r\n      console.warn(\r\n        `PaginationControlsDirective: the specified id \"${this.id}\" does not match any registered PaginationInstance`\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Updates the page links and checks that the current page is valid. Should run whenever the\r\n   * PaginationService.change stream emits a value matching the current ID, or when any of the\r\n   * input values changes.\r\n   */\r\n  private updatePageLinks() {\r\n    const inst = this.service.getInstance(this.id);\r\n    const correctedCurrentPage = this.outOfBoundCorrection(inst);\r\n\r\n    if (correctedCurrentPage !== inst.currentPage) {\r\n      setTimeout(() => {\r\n        this.pageBoundsCorrection.emit(correctedCurrentPage);\r\n        this.pages = this.createPageArray(\r\n          inst.currentPage,\r\n          inst.itemsPerPage,\r\n          inst.totalItems,\r\n          this.maxSize\r\n        );\r\n      });\r\n    } else {\r\n      this.pages = this.createPageArray(\r\n        inst.currentPage,\r\n        inst.itemsPerPage,\r\n        inst.totalItems,\r\n        this.maxSize\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Checks that the instance.currentPage property is within bounds for the current page range.\r\n   * If not, return a correct value for currentPage, or the current value if OK.\r\n   */\r\n  private outOfBoundCorrection(instance: PaginationInstance): number {\r\n    const totalPages = Math.ceil(instance.totalItems / instance.itemsPerPage);\r\n    if (totalPages < instance.currentPage && 0 < totalPages) {\r\n      return totalPages;\r\n    } else if (instance.currentPage < 1) {\r\n      return 1;\r\n    }\r\n\r\n    return instance.currentPage;\r\n  }\r\n\r\n  /**\r\n   * Returns an array of Page objects to use in the pagination controls.\r\n   */\r\n  private createPageArray(\r\n    currentPage: number,\r\n    itemsPerPage: number,\r\n    totalItems: number,\r\n    paginationRange: number\r\n  ): Page[] {\r\n    // paginationRange could be a string if passed from attribute, so cast to number.\r\n    paginationRange = +paginationRange;\r\n    const pages = [];\r\n    const totalPages = Math.ceil(totalItems / itemsPerPage);\r\n    const halfWay = Math.ceil(paginationRange / 2);\r\n\r\n    const isStart = currentPage <= halfWay;\r\n    const isEnd = totalPages - halfWay < currentPage;\r\n    const isMiddle = !isStart && !isEnd;\r\n\r\n    const ellipsesNeeded = paginationRange < totalPages;\r\n    let i = 1;\r\n\r\n    while (i <= totalPages && i <= paginationRange) {\r\n      let label;\r\n      const pageNumber = this.calculatePageNumber(\r\n        i,\r\n        currentPage,\r\n        paginationRange,\r\n        totalPages\r\n      );\r\n      const openingEllipsesNeeded = i === 2 && (isMiddle || isEnd);\r\n      const closingEllipsesNeeded =\r\n        i === paginationRange - 1 && (isMiddle || isStart);\r\n      if (ellipsesNeeded && (openingEllipsesNeeded || closingEllipsesNeeded)) {\r\n        label = '...';\r\n      } else {\r\n        label = pageNumber;\r\n      }\r\n      pages.push({\r\n        label,\r\n        value: pageNumber,\r\n      });\r\n      i++;\r\n    }\r\n    return pages;\r\n  }\r\n\r\n  /**\r\n   * Given the position in the sequence of pagination links [i],\r\n   * figure out what page number corresponds to that position.\r\n   */\r\n  private calculatePageNumber(\r\n    i: number,\r\n    currentPage: number,\r\n    paginationRange: number,\r\n    totalPages: number\r\n  ) {\r\n    const halfWay = Math.ceil(paginationRange / 2);\r\n    if (i === paginationRange) {\r\n      return totalPages;\r\n    } else if (i === 1) {\r\n      return i;\r\n    } else if (paginationRange < totalPages) {\r\n      if (totalPages - halfWay < currentPage) {\r\n        return totalPages - paginationRange + i;\r\n      } else if (halfWay < currentPage) {\r\n        return currentPage - halfWay + i;\r\n      } else {\r\n        return i;\r\n      }\r\n    } else {\r\n      return i;\r\n    }\r\n  }\r\n}\r\n","import {Pipe, PipeTransform} from '@angular/core';\r\nimport {PaginationService} from './pagination.service';\r\nimport {PaginationInstance} from './pagination-instance';\r\n\r\nconst LARGE_NUMBER = Number.MAX_SAFE_INTEGER;\r\n\r\nexport type Collection<T> = T[] | ReadonlyArray<T>;\r\n\r\nexport interface PaginatePipeArgs {\r\n  id?: string;\r\n  itemsPerPage?: string | number;\r\n        currentPage?: string | number;\r\n    totalItems?: string | number;\r\n}\r\n\r\nexport interface PipeState {\r\n    collection: any[];\r\n    size: number;\r\n    start: number;\r\n    end: number;\r\n    slice: any[];\r\n}\r\n\r\n@Pipe({\r\n    name: 'paginate',\r\n    pure: false\r\n})\r\nexport class PaginationPipe implements PipeTransform{\r\n\r\n    // store the values from the last time the pipe was invoked\r\n    private state: { [id: string]: PipeState } = {};\r\n\r\n    constructor(private service: PaginationService) {\r\n    }\r\n\r\n    public transform<T, U extends Collection<T>>(collection: U, args: PaginatePipeArgs): U {\r\n\r\n        // When an observable is passed through the AsyncPipe, it will output\r\n        // `null` until the subscription resolves. In this case, we want to\r\n        // use the cached data from the `state` object to prevent the NgFor\r\n        // from flashing empty until the real values arrive.\r\n        if (!(collection instanceof Array)) {\r\n            const _id = args.id || this.service.defaultId();\r\n            if (this.state[_id]) {\r\n                return this.state[_id].slice as U;\r\n            } else {\r\n                return collection;\r\n            }\r\n        }\r\n\r\n        const serverSideMode = args.totalItems && args.totalItems !== collection.length;\r\n\r\n        const instance = this.createInstance(collection, args);\r\n        const id = instance.id;\r\n        let start, end;\r\n        let perPage = instance.itemsPerPage;\r\n\r\n        const emitChange = this.service.register(instance);\r\n\r\n        if (!serverSideMode && collection instanceof Array) {\r\n            perPage = +perPage || LARGE_NUMBER;\r\n            start = (instance.currentPage - 1) * perPage;\r\n            end = start + perPage;\r\n\r\n            const isIdentical = this.stateIsIdentical(id, collection, start, end);\r\n            if (isIdentical) {\r\n                return this.state[id].slice as U;\r\n            } else {\r\n                const slice = collection.slice(start, end);\r\n                this.saveState(id, collection, slice, start, end);\r\n                this.service.change.emit(id);\r\n                return slice as U;\r\n            }\r\n        } else {\r\n            if (emitChange) {\r\n                this.service.change.emit(id);\r\n            }\r\n\r\n            // save the state for server-side collection to avoid null\r\n            // flash as new data loads.\r\n            this.saveState(id, collection, collection, start, end);\r\n\r\n            return collection;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Create an PaginationInstance object, using defaults for any optional properties not supplied.\r\n     */\r\n    private createInstance(collection: any[], config: PaginatePipeArgs): PaginationInstance {\r\n      this.checkConfig(config);\r\n      const id = config.id != null ? config.id : this.service.defaultId();\r\n      if (config.itemsPerPage) {\r\n        if (!this.service.getInstance(id)?.itemsPerPage) {\r\n                  this.service.setItemsPerPage(id, +config.itemsPerPage);\r\n        }\r\n\r\n      }\r\n\r\n      const perPage = (config.itemsPerPage && !this.service.getInstance(id).itemsPerPage) ? config.itemsPerPage :\r\n        this.service.getInstance(id).itemsPerPage;\r\n      return {\r\n          id: config.id != null ? config.id : this.service.defaultId(),\r\n          itemsPerPage: +perPage || 5,\r\n          currentPage: +config.currentPage || 1,\r\n          totalItems: +config.totalItems || collection.length\r\n        };\r\n\r\n\r\n    }\r\n\r\n    /**\r\n     * Ensure the argument passed to the filter contains the required properties.\r\n     */\r\n    private checkConfig(config: PaginatePipeArgs): void {\r\n        const required = [ 'currentPage'];\r\n\r\n        const missing = required.filter(prop => !(prop in config));\r\n        if (0 < missing.length) {\r\n            throw new Error(`PaginatePipe: Argument is missing the following required properties: ${missing.join(', ')}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * To avoid returning a brand new array each time the pipe is run, we store the state of the sliced\r\n     * array for a given id. This means that the next time the pipe is run on this collection & id, we just\r\n     * need to check that the collection, start and end points are all identical, and if so, return the\r\n     * last sliced array.\r\n     */\r\n    private saveState(id: string, collection: any[], slice: any[], start: number, end: number) {\r\n        this.state[id] = {\r\n            collection,\r\n            size: collection.length,\r\n            slice,\r\n            start,\r\n            end\r\n        };\r\n    }\r\n\r\n    /**\r\n     * For a given id, returns true if the collection, size, start and end values are identical.\r\n     */\r\n    private stateIsIdentical(id: string, collection: any[], start: number, end: number): boolean {\r\n        const state = this.state[id];\r\n        if (!state) {\r\n            return false;\r\n        }\r\n        const isMetaDataIdentical = state.size === collection.length &&\r\n            state.start === start &&\r\n            state.end === end;\r\n\r\n        if (!isMetaDataIdentical) {\r\n            return false;\r\n        }\r\n\r\n        return state.slice.every((element, index) => element === collection[start + index]);\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport{FormsModule} from '@angular/forms';\r\nimport { PaginationComponent } from './pagination.component';\r\nimport { PaginationService } from './pagination.service';\r\nimport { PaginationDirective } from './pagination.directive';\r\nimport { PaginationPipe } from './pagination.pipe';\r\nexport { PaginationInstance } from './pagination-instance';\r\n\r\nexport {PaginationService} from './pagination.service';\r\nexport {PaginationComponent} from './pagination.component';\r\nexport {PaginationDirective} from './pagination.directive';\r\nexport {PaginationPipe} from './pagination.pipe';\r\n\r\n@NgModule({\r\n  declarations: [\r\n  PaginationComponent,\r\n  PaginationPipe,\r\n  PaginationDirective],\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule\r\n  ],\r\n  providers: [PaginationService],\r\n  exports: [  PaginationComponent,\r\n  PaginationPipe,\r\n  PaginationDirective]\r\n})\r\nexport class NgxTablePaginationModule { }\r\n","/*\n * Public API Surface of pagination\n */\n\nexport * from './lib/pagination.service';\nexport * from './lib/pagination.component';\nexport * from './lib/pagination.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["EventEmitter","Component","ChangeDetectionStrategy","ViewEncapsulation","Input","Output","Directive","ChangeDetectorRef","Pipe","NgModule","CommonModule","FormsModule"],"mappings":"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"}