{"version":3,"file":"ngx-table-pagination.js","sources":["../../../projects/ngx-table-pagination/src/lib/pagination.service.ts","../../../projects/ngx-table-pagination/src/lib/pagination.component.ts","../../../projects/ngx-table-pagination/src/lib/pagination.directive.ts","../../../projects/ngx-table-pagination/src/lib/pagination.pipe.ts","../../../projects/ngx-table-pagination/src/lib/pagination.module.ts","../../../projects/ngx-table-pagination/src/public-api.ts","../../../projects/ngx-table-pagination/src/ngx-table-pagination.ts"],"sourcesContent":["import {EventEmitter} from '@angular/core'\r\nimport {PaginationInstance} from './pagination-instance';\r\n\r\nexport class PaginationService {\r\n\r\n    public change: EventEmitter<string> = new EventEmitter<string>();\r\n\r\n    private instances: { [id: string]: PaginationInstance } = {};\r\n    private DEFAULT_ID = 'DEFAULT_PAGINATION_ID';\r\n\r\n    public defaultId(): string { return this.DEFAULT_ID }\r\n\r\n    /**\r\n     * Register a PaginationInstance with this service. Returns a\r\n     * boolean value signifying whether the instance is new or\r\n     * updated (true = new or updated, false = unchanged).\r\n     */\r\n    public register(instance: PaginationInstance): boolean {\r\n        if (instance.id == null) {\r\n            instance.id = this.DEFAULT_ID;\r\n        }\r\n\r\n        if (!this.instances[instance.id]) {\r\n            this.instances[instance.id] = instance;\r\n            return true;\r\n        } else {\r\n            return this.updateInstance(instance);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Check each property of the instance and update any that have changed. Return\r\n     * true if any changes were made, else return false.\r\n     */\r\n    private updateInstance(instance: PaginationInstance): boolean {\r\n        let changed = false;\r\n        for (let prop in this.instances[instance.id]) {\r\n            if (instance[prop] !== this.instances[instance.id][prop]) {\r\n                this.instances[instance.id][prop] = instance[prop];\r\n                changed = true;\r\n            }\r\n        }\r\n        return changed;\r\n    }\r\n\r\n    /**\r\n     * Returns the current page number.\r\n     */\r\n    public getCurrentPage(id: string): number {\r\n        if (this.instances[id]) {\r\n            return this.instances[id].currentPage;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the current page number.\r\n     */\r\n    public setCurrentPage(id: string, page: number) {\r\n        if (this.instances[id]) {\r\n            let instance = this.instances[id];\r\n            let maxPage = Math.ceil(instance.totalItems / instance.itemsPerPage);\r\n            if (page <= maxPage && 1 <= page) {\r\n                this.instances[id].currentPage = page;\r\n                this.change.emit(id);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the value of instance.totalItems\r\n     */\r\n    public setTotalItems(id: string, totalItems: number) {\r\n        if (this.instances[id] && 0 <= totalItems) {\r\n            this.instances[id].totalItems = totalItems;\r\n            this.change.emit(id);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the value of instance.itemsPerPage.\r\n     */\r\n    public setItemsPerPage(id: string, itemsPerPage: number): void {\r\n        if (this.instances[id]) {\r\n            this.instances[id].itemsPerPage = itemsPerPage;\r\n            this.change.emit(id);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns a clone of the pagination instance object matching the id. If no\r\n     * id specified, returns the instance corresponding to the default id.\r\n     */\r\n    public getInstance(id: string = this.DEFAULT_ID): PaginationInstance {\r\n        if (this.instances[id]) {\r\n            return this.clone(this.instances[id]);\r\n        }\r\n        return {} as PaginationInstance;\r\n    }\r\n\r\n    /**\r\n     * Perform a shallow clone of an object.\r\n     */\r\n    private clone(obj: any): any {\r\n        const target = {};\r\n        for (const i in obj) {\r\n            if (obj.hasOwnProperty(i)) {\r\n                target[i] = obj[i];\r\n            }\r\n        }\r\n        return target;\r\n    }\r\n\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  ChangeDetectionStrategy,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nfunction coerceToBoolean(input: string | boolean): boolean {\r\n  return !!input && input !== 'false';\r\n}\r\n\r\n/**\r\n * The default pagination controls component. Actually just a default implementation of a custom template.\r\n */\r\n@Component({\r\n  selector: 'paging-controls',\r\n  templateUrl: './pagination.component.html',\r\n  styleUrls: ['./pagination.component.css'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class PaginationComponent {\r\n  @Input() id: string;\r\n  @Input() maxSize: number = 7;\r\n  @Input() isItemsPerPage: boolean;\r\n  // @Input() itemsPerPage;\r\n  @Input()\r\n  get directionLinks(): boolean {\r\n    return this._directionLinks;\r\n  }\r\n  set directionLinks(value: boolean) {\r\n    this._directionLinks = coerceToBoolean(value);\r\n  }\r\n  @Input()\r\n  get autoHide(): boolean {\r\n    return this._autoHide;\r\n  }\r\n  set autoHide(value: boolean) {\r\n    this._autoHide = coerceToBoolean(value);\r\n  }\r\n  @Input()\r\n  get responsive(): boolean {\r\n    return this._responsive;\r\n  }\r\n  set responsive(value: boolean) {\r\n    this._responsive = coerceToBoolean(value);\r\n  }\r\n  // @Input() isItemsNumber = false;\r\n  @Input() previousLabel: string = '';\r\n  @Input() nextLabel: string = '';\r\n  @Input() screenReaderPaginationLabel = 'Pagination';\r\n  @Input() screenReaderPageLabel: string = 'page';\r\n  @Input() screenReaderCurrentLabel: string = `You're on page`;\r\n  @Output() pageChange: EventEmitter<number> = new EventEmitter<number>();\r\n  @Output() pageBoundsCorrection: EventEmitter<number> = new EventEmitter<\r\n    number\r\n  >();\r\n\r\n  private _directionLinks: boolean = true;\r\n  private _autoHide: boolean = false;\r\n  private _responsive: boolean = false;\r\n}\r\n","import {\r\n  ChangeDetectorRef,\r\n  Directive,\r\n  EventEmitter,\r\n  Input,\r\n  Output,\r\n  OnInit,\r\n} from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\n\r\nimport { PaginationService } from './pagination.service';\r\nimport { PaginationInstance } from './pagination-instance';\r\n\r\nexport interface Page {\r\n  label: string;\r\n  value: any;\r\n}\r\n\r\n/**\r\n * This directive is what powers all pagination controls components, including the default one.\r\n * It exposes an API which is hooked up to the PaginationService to keep the PaginatePipe in sync\r\n * with the pagination controls.\r\n */\r\n@Directive({\r\n  selector: 'pagination-template,[pagination-template]',\r\n  exportAs: 'paginationApi',\r\n})\r\nexport class PaginationDirective implements OnInit {\r\n  @Input() id: string;\r\n  @Input() maxSize = 7;\r\n\r\n  @Output() pageChange: EventEmitter<number> = new EventEmitter<number>();\r\n  @Output() pageBoundsCorrection: EventEmitter<number> = new EventEmitter<\r\n    number\r\n  >();\r\n  pages: Page[] = [];\r\n  pageSizes: any[] = [];\r\n  itemsPerPage: number;\r\n  private changeSub: Subscription;\r\n\r\n  constructor(\r\n    private service: PaginationService,\r\n    private changeDetectorRef: ChangeDetectorRef\r\n  ) {\r\n    this.changeSub = this.service.change.subscribe((id) => {\r\n      if (this.id === id) {\r\n        this.updatePageLinks();\r\n        this.changeDetectorRef.markForCheck();\r\n        this.changeDetectorRef.detectChanges();\r\n        const inst = this.service.getInstance(this.id);\r\n        this.itemsPerPage = inst.itemsPerPage;\r\n      }\r\n    });\r\n  }\r\n\r\n  ngOnInit() {\r\n    if (this.id === undefined) {\r\n      this.id = this.service.defaultId();\r\n    }\r\n    const inst = this.service.getInstance(this.id);\r\n    this.itemsPerPage = inst.itemsPerPage;\r\n    for (let i = 5; i <= inst.totalItems; ) {\r\n      this.pageSizes.push(i);\r\n      i += 5;\r\n    }\r\n    this.updatePageLinks();\r\n  }\r\n\r\n  ngOnChanges(changes: any) {\r\n    this.updatePageLinks();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.changeSub.unsubscribe();\r\n  }\r\n  pageSizeChanged(event) {\r\n    this.itemsPerPage = event;\r\n    this.service.setItemsPerPage(this.id, event);\r\n    this.setCurrent(1);\r\n    this.updatePageLinks();\r\n  }\r\n  /**\r\n   * Go to the previous page\r\n   */\r\n  previous() {\r\n    this.checkValidId();\r\n    this.setCurrent(this.getCurrent() - 1);\r\n  }\r\n\r\n  /**\r\n   * Go to the next page\r\n   */\r\n  next() {\r\n    this.checkValidId();\r\n    this.setCurrent(this.getCurrent() + 1);\r\n  }\r\n\r\n  /**\r\n   * Returns true if current page is first page\r\n   */\r\n  isFirstPage(): boolean {\r\n    return this.getCurrent() === 1;\r\n  }\r\n\r\n  /**\r\n   * Returns true if current page is last page\r\n   */\r\n  isLastPage(): boolean {\r\n    return this.getLastPage() === this.getCurrent();\r\n  }\r\n\r\n  /**\r\n   * Set the current page number.\r\n   */\r\n  setCurrent(page: number) {\r\n    this.pageChange.emit(page);\r\n  }\r\n\r\n  /**\r\n   * Get the current page number.\r\n   */\r\n  getCurrent(): number {\r\n    return this.service.getCurrentPage(this.id);\r\n  }\r\n\r\n  /**\r\n   * Returns the last page number\r\n   */\r\n  getLastPage(): number {\r\n    const inst = this.service.getInstance(this.id);\r\n    if (inst.totalItems < 1) {\r\n      // when there are 0 or fewer (an error case) items, there are no \"pages\" as such,\r\n      // but it makes sense to consider a single, empty page as the last page.\r\n      return 1;\r\n    }\r\n    return Math.ceil(inst.totalItems / inst.itemsPerPage);\r\n  }\r\n\r\n  getTotalItems(): number {\r\n    return this.service.getInstance(this.id).totalItems;\r\n  }\r\n  getStartIndex(): number {\r\n    const inst = this.service.getInstance(this.id);\r\n    if (inst.totalItems < inst.itemsPerPage * (inst.currentPage - 1) + 1) {\r\n      this.setCurrent(1);\r\n    }\r\n    return inst.itemsPerPage * (inst.currentPage - 1) + 1;\r\n  }\r\n\r\n  getEndIndex(): number {\r\n    const inst = this.service.getInstance(this.id);\r\n    const end = inst.itemsPerPage * inst.currentPage;\r\n    if (inst.totalItems < end) {\r\n      return inst.totalItems;\r\n    }\r\n    return end;\r\n  }\r\n  private checkValidId(): void {\r\n    if (this.service.getInstance(this.id).id == null) {\r\n      console.warn(\r\n        `PaginationControlsDirective: the specified id \"${this.id}\" does not match any registered PaginationInstance`\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Updates the page links and checks that the current page is valid. Should run whenever the\r\n   * PaginationService.change stream emits a value matching the current ID, or when any of the\r\n   * input values changes.\r\n   */\r\n  private updatePageLinks() {\r\n    const inst = this.service.getInstance(this.id);\r\n    const correctedCurrentPage = this.outOfBoundCorrection(inst);\r\n\r\n    if (correctedCurrentPage !== inst.currentPage) {\r\n      setTimeout(() => {\r\n        this.pageBoundsCorrection.emit(correctedCurrentPage);\r\n        this.pages = this.createPageArray(\r\n          inst.currentPage,\r\n          inst.itemsPerPage,\r\n          inst.totalItems,\r\n          this.maxSize\r\n        );\r\n      });\r\n    } else {\r\n      this.pages = this.createPageArray(\r\n        inst.currentPage,\r\n        inst.itemsPerPage,\r\n        inst.totalItems,\r\n        this.maxSize\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Checks that the instance.currentPage property is within bounds for the current page range.\r\n   * If not, return a correct value for currentPage, or the current value if OK.\r\n   */\r\n  private outOfBoundCorrection(instance: PaginationInstance): number {\r\n    const totalPages = Math.ceil(instance.totalItems / instance.itemsPerPage);\r\n    if (totalPages < instance.currentPage && 0 < totalPages) {\r\n      return totalPages;\r\n    } else if (instance.currentPage < 1) {\r\n      return 1;\r\n    }\r\n\r\n    return instance.currentPage;\r\n  }\r\n\r\n  /**\r\n   * Returns an array of Page objects to use in the pagination controls.\r\n   */\r\n  private createPageArray(\r\n    currentPage: number,\r\n    itemsPerPage: number,\r\n    totalItems: number,\r\n    paginationRange: number\r\n  ): Page[] {\r\n    // paginationRange could be a string if passed from attribute, so cast to number.\r\n    paginationRange = +paginationRange;\r\n    const pages = [];\r\n    const totalPages = Math.ceil(totalItems / itemsPerPage);\r\n    const halfWay = Math.ceil(paginationRange / 2);\r\n\r\n    const isStart = currentPage <= halfWay;\r\n    const isEnd = totalPages - halfWay < currentPage;\r\n    const isMiddle = !isStart && !isEnd;\r\n\r\n    const ellipsesNeeded = paginationRange < totalPages;\r\n    let i = 1;\r\n\r\n    while (i <= totalPages && i <= paginationRange) {\r\n      let label;\r\n      const pageNumber = this.calculatePageNumber(\r\n        i,\r\n        currentPage,\r\n        paginationRange,\r\n        totalPages\r\n      );\r\n      const openingEllipsesNeeded = i === 2 && (isMiddle || isEnd);\r\n      const closingEllipsesNeeded =\r\n        i === paginationRange - 1 && (isMiddle || isStart);\r\n      if (ellipsesNeeded && (openingEllipsesNeeded || closingEllipsesNeeded)) {\r\n        label = '...';\r\n      } else {\r\n        label = pageNumber;\r\n      }\r\n      pages.push({\r\n        label,\r\n        value: pageNumber,\r\n      });\r\n      i++;\r\n    }\r\n    return pages;\r\n  }\r\n\r\n  /**\r\n   * Given the position in the sequence of pagination links [i],\r\n   * figure out what page number corresponds to that position.\r\n   */\r\n  private calculatePageNumber(\r\n    i: number,\r\n    currentPage: number,\r\n    paginationRange: number,\r\n    totalPages: number\r\n  ) {\r\n    const halfWay = Math.ceil(paginationRange / 2);\r\n    if (i === paginationRange) {\r\n      return totalPages;\r\n    } else if (i === 1) {\r\n      return i;\r\n    } else if (paginationRange < totalPages) {\r\n      if (totalPages - halfWay < currentPage) {\r\n        return totalPages - paginationRange + i;\r\n      } else if (halfWay < currentPage) {\r\n        return currentPage - halfWay + i;\r\n      } else {\r\n        return i;\r\n      }\r\n    } else {\r\n      return i;\r\n    }\r\n  }\r\n}\r\n","import {Pipe, PipeTransform} from '@angular/core';\r\nimport {PaginationService} from './pagination.service';\r\nimport {PaginationInstance} from './pagination-instance';\r\n\r\nconst LARGE_NUMBER = Number.MAX_SAFE_INTEGER;\r\n\r\nexport type Collection<T> = T[] | ReadonlyArray<T>;\r\n\r\nexport interface PaginatePipeArgs {\r\n  id?: string;\r\n  itemsPerPage?: string | number;\r\n        currentPage?: string | number;\r\n    totalItems?: string | number;\r\n}\r\n\r\nexport interface PipeState {\r\n    collection: any[];\r\n    size: number;\r\n    start: number;\r\n    end: number;\r\n    slice: any[];\r\n}\r\n\r\n@Pipe({\r\n    name: 'paginate',\r\n    pure: false\r\n})\r\nexport class PaginationPipe implements PipeTransform{\r\n\r\n    // store the values from the last time the pipe was invoked\r\n    private state: { [id: string]: PipeState } = {};\r\n\r\n    constructor(private service: PaginationService) {\r\n    }\r\n\r\n    public transform<T, U extends Collection<T>>(collection: U, args: PaginatePipeArgs): U {\r\n\r\n        // When an observable is passed through the AsyncPipe, it will output\r\n        // `null` until the subscription resolves. In this case, we want to\r\n        // use the cached data from the `state` object to prevent the NgFor\r\n        // from flashing empty until the real values arrive.\r\n        if (!(collection instanceof Array)) {\r\n            const _id = args.id || this.service.defaultId();\r\n            if (this.state[_id]) {\r\n                return this.state[_id].slice as U;\r\n            } else {\r\n                return collection;\r\n            }\r\n        }\r\n\r\n        const serverSideMode = args.totalItems && args.totalItems !== collection.length;\r\n\r\n        const instance = this.createInstance(collection, args);\r\n        const id = instance.id;\r\n        let start, end;\r\n        let perPage = instance.itemsPerPage;\r\n\r\n        const emitChange = this.service.register(instance);\r\n\r\n        if (!serverSideMode && collection instanceof Array) {\r\n            perPage = +perPage || LARGE_NUMBER;\r\n            start = (instance.currentPage - 1) * perPage;\r\n            end = start + perPage;\r\n\r\n            const isIdentical = this.stateIsIdentical(id, collection, start, end);\r\n            if (isIdentical) {\r\n                return this.state[id].slice as U;\r\n            } else {\r\n                const slice = collection.slice(start, end);\r\n                this.saveState(id, collection, slice, start, end);\r\n                this.service.change.emit(id);\r\n                return slice as U;\r\n            }\r\n        } else {\r\n            if (emitChange) {\r\n                this.service.change.emit(id);\r\n            }\r\n\r\n            // save the state for server-side collection to avoid null\r\n            // flash as new data loads.\r\n            this.saveState(id, collection, collection, start, end);\r\n\r\n            return collection;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Create an PaginationInstance object, using defaults for any optional properties not supplied.\r\n     */\r\n    private createInstance(collection: any[], config: PaginatePipeArgs): PaginationInstance {\r\n      this.checkConfig(config);\r\n      const id = config.id != null ? config.id : this.service.defaultId();\r\n      if (config.itemsPerPage) {\r\n        if (!this.service.getInstance(id)?.itemsPerPage) {\r\n                  this.service.setItemsPerPage(id, +config.itemsPerPage);\r\n        }\r\n\r\n      }\r\n\r\n      const perPage = (config.itemsPerPage && !this.service.getInstance(id).itemsPerPage) ? config.itemsPerPage :\r\n        this.service.getInstance(id).itemsPerPage;\r\n      return {\r\n          id: config.id != null ? config.id : this.service.defaultId(),\r\n          itemsPerPage: +perPage || 5,\r\n          currentPage: +config.currentPage || 1,\r\n          totalItems: +config.totalItems || collection.length\r\n        };\r\n\r\n\r\n    }\r\n\r\n    /**\r\n     * Ensure the argument passed to the filter contains the required properties.\r\n     */\r\n    private checkConfig(config: PaginatePipeArgs): void {\r\n        const required = [ 'currentPage'];\r\n\r\n        const missing = required.filter(prop => !(prop in config));\r\n        if (0 < missing.length) {\r\n            throw new Error(`PaginatePipe: Argument is missing the following required properties: ${missing.join(', ')}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * To avoid returning a brand new array each time the pipe is run, we store the state of the sliced\r\n     * array for a given id. This means that the next time the pipe is run on this collection & id, we just\r\n     * need to check that the collection, start and end points are all identical, and if so, return the\r\n     * last sliced array.\r\n     */\r\n    private saveState(id: string, collection: any[], slice: any[], start: number, end: number) {\r\n        this.state[id] = {\r\n            collection,\r\n            size: collection.length,\r\n            slice,\r\n            start,\r\n            end\r\n        };\r\n    }\r\n\r\n    /**\r\n     * For a given id, returns true if the collection, size, start and end values are identical.\r\n     */\r\n    private stateIsIdentical(id: string, collection: any[], start: number, end: number): boolean {\r\n        const state = this.state[id];\r\n        if (!state) {\r\n            return false;\r\n        }\r\n        const isMetaDataIdentical = state.size === collection.length &&\r\n            state.start === start &&\r\n            state.end === end;\r\n\r\n        if (!isMetaDataIdentical) {\r\n            return false;\r\n        }\r\n\r\n        return state.slice.every((element, index) => element === collection[start + index]);\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport{FormsModule} from '@angular/forms';\r\nimport { PaginationComponent } from './pagination.component';\r\nimport { PaginationService } from './pagination.service';\r\nimport { PaginationDirective } from './pagination.directive';\r\nimport { PaginationPipe } from './pagination.pipe';\r\nexport { PaginationInstance } from './pagination-instance';\r\n\r\nexport {PaginationService} from './pagination.service';\r\nexport {PaginationComponent} from './pagination.component';\r\nexport {PaginationDirective} from './pagination.directive';\r\nexport {PaginationPipe} from './pagination.pipe';\r\n\r\n@NgModule({\r\n  declarations: [\r\n  PaginationComponent,\r\n  PaginationPipe,\r\n  PaginationDirective],\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule\r\n  ],\r\n  providers: [PaginationService],\r\n  exports: [  PaginationComponent,\r\n  PaginationPipe,\r\n  PaginationDirective]\r\n})\r\nexport class NgxTablePaginationModule { }\r\n","/*\n * Public API Surface of pagination\n */\n\nexport * from './lib/pagination.service';\nexport * from './lib/pagination.component';\nexport * from './lib/pagination.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}