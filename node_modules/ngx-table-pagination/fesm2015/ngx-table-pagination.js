import { EventEmitter, Component, ChangeDetectionStrategy, ViewEncapsulation, Input, Output, Directive, ChangeDetectorRef, Pipe, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';

class PaginationService {
    constructor() {
        this.change = new EventEmitter();
        this.instances = {};
        this.DEFAULT_ID = 'DEFAULT_PAGINATION_ID';
    }
    defaultId() { return this.DEFAULT_ID; }
    /**
     * Register a PaginationInstance with this service. Returns a
     * boolean value signifying whether the instance is new or
     * updated (true = new or updated, false = unchanged).
     */
    register(instance) {
        if (instance.id == null) {
            instance.id = this.DEFAULT_ID;
        }
        if (!this.instances[instance.id]) {
            this.instances[instance.id] = instance;
            return true;
        }
        else {
            return this.updateInstance(instance);
        }
    }
    /**
     * Check each property of the instance and update any that have changed. Return
     * true if any changes were made, else return false.
     */
    updateInstance(instance) {
        let changed = false;
        for (let prop in this.instances[instance.id]) {
            if (instance[prop] !== this.instances[instance.id][prop]) {
                this.instances[instance.id][prop] = instance[prop];
                changed = true;
            }
        }
        return changed;
    }
    /**
     * Returns the current page number.
     */
    getCurrentPage(id) {
        if (this.instances[id]) {
            return this.instances[id].currentPage;
        }
    }
    /**
     * Sets the current page number.
     */
    setCurrentPage(id, page) {
        if (this.instances[id]) {
            let instance = this.instances[id];
            let maxPage = Math.ceil(instance.totalItems / instance.itemsPerPage);
            if (page <= maxPage && 1 <= page) {
                this.instances[id].currentPage = page;
                this.change.emit(id);
            }
        }
    }
    /**
     * Sets the value of instance.totalItems
     */
    setTotalItems(id, totalItems) {
        if (this.instances[id] && 0 <= totalItems) {
            this.instances[id].totalItems = totalItems;
            this.change.emit(id);
        }
    }
    /**
     * Sets the value of instance.itemsPerPage.
     */
    setItemsPerPage(id, itemsPerPage) {
        if (this.instances[id]) {
            this.instances[id].itemsPerPage = itemsPerPage;
            this.change.emit(id);
        }
    }
    /**
     * Returns a clone of the pagination instance object matching the id. If no
     * id specified, returns the instance corresponding to the default id.
     */
    getInstance(id = this.DEFAULT_ID) {
        if (this.instances[id]) {
            return this.clone(this.instances[id]);
        }
        return {};
    }
    /**
     * Perform a shallow clone of an object.
     */
    clone(obj) {
        const target = {};
        for (const i in obj) {
            if (obj.hasOwnProperty(i)) {
                target[i] = obj[i];
            }
        }
        return target;
    }
}

function coerceToBoolean(input) {
    return !!input && input !== 'false';
}
/**
 * The default pagination controls component. Actually just a default implementation of a custom template.
 */
class PaginationComponent {
    constructor() {
        this.maxSize = 7;
        // @Input() isItemsNumber = false;
        this.previousLabel = '';
        this.nextLabel = '';
        this.screenReaderPaginationLabel = 'Pagination';
        this.screenReaderPageLabel = 'page';
        this.screenReaderCurrentLabel = `You're on page`;
        this.pageChange = new EventEmitter();
        this.pageBoundsCorrection = new EventEmitter();
        this._directionLinks = true;
        this._autoHide = false;
        this._responsive = false;
    }
    // @Input() itemsPerPage;
    get directionLinks() {
        return this._directionLinks;
    }
    set directionLinks(value) {
        this._directionLinks = coerceToBoolean(value);
    }
    get autoHide() {
        return this._autoHide;
    }
    set autoHide(value) {
        this._autoHide = coerceToBoolean(value);
    }
    get responsive() {
        return this._responsive;
    }
    set responsive(value) {
        this._responsive = coerceToBoolean(value);
    }
}
PaginationComponent.decorators = [
    { type: Component, args: [{
                selector: 'paging-controls',
                template: "<pagination-template\r\n  #p=\"paginationApi\"\r\n  [id]=\"id\"\r\n  [maxSize]=\"maxSize\"\r\n  (pageChange)=\"pageChange.emit($event)\"\r\n  (pageBoundsCorrection)=\"pageBoundsCorrection.emit($event)\"\r\n>\r\n  <div *ngIf=\"!(autoHide && p.pages.length <= 1)\">\r\n    <div *ngIf=\"isItemsPerPage\">\r\n      <span style=\"display: flex\" class=\"pagination-font\">\r\n        <label class=\"show-label\">Show</label>\r\n        <select\r\n          class=\"select-box pagination-font\"\r\n          [(ngModel)]=\"p.itemsPerPage\"\r\n          (change)=\"p.pageSizeChanged($event.target.value)\"\r\n        >\r\n          <option\r\n            *ngFor=\"let pageSizeDefault of p.pageSizes\"\r\n            value=\"{{ pageSizeDefault }}\"\r\n            [selected]=\"pageSizeDefault == p.itemsPerPage\"\r\n          >\r\n            {{ pageSizeDefault }}\r\n          </option>\r\n        </select>\r\n        <label class=\"entries-label\">entries</label></span\r\n      >\r\n    </div>\r\n\r\n    <div\r\n      class=\"ngx-pagination pagination-font\"\r\n      role=\"navigation\"\r\n      *ngIf=\"!isItemsPerPage\"\r\n      [attr.aria-label]=\"screenReaderPaginationLabel\"\r\n      [class.responsive]=\"responsive\"\r\n    >\r\n      <label\r\n        >Showing {{ p.getStartIndex() }} - {{ p.getEndIndex() }} of\r\n        {{ p.getTotalItems() }} entries</label\r\n      >\r\n      <ul role=\"navigation\" class=\"\">\r\n        <li\r\n          class=\"pagination-previous pagination-font page\"\r\n          [class.disabled]=\"p.isFirstPage()\"\r\n          *ngIf=\"directionLinks\"\r\n        >\r\n          <a\r\n            tabindex=\"0\"\r\n            *ngIf=\"1 < p.getCurrent()\"\r\n            (keyup.enter)=\"p.previous()\"\r\n            (click)=\"p.previous()\"\r\n            [attr.aria-label]=\"previousLabel + ' ' + screenReaderPageLabel\"\r\n          >\r\n            {{ previousLabel }}\r\n          </a>\r\n          <span *ngIf=\"p.isFirstPage()\">\r\n            {{ previousLabel }}\r\n          </span>\r\n        </li>\r\n        <li class=\"small-screen pagination-font page\">\r\n          {{ p.getCurrent() }} / {{ p.getLastPage() }}\r\n        </li>\r\n        <li\r\n          class=\"pagination-font page\"\r\n          [class.current]=\"p.getCurrent() === page.value\"\r\n          [class.ellipsis]=\"page.label === '...'\"\r\n          *ngFor=\"let page of p.pages\"\r\n        >\r\n          <a\r\n            tabindex=\"0\"\r\n            (keyup.enter)=\"p.setCurrent(page.value)\"\r\n            (click)=\"p.setCurrent(page.value)\"\r\n            *ngIf=\"p.getCurrent() !== page.value\"\r\n          >\r\n            <span class=\"show-for-sr\">{{ screenReaderPageLabel }} </span>\r\n            <span>{{\r\n              page.label === \"...\" ? page.label : (page.label | number: \"\")\r\n            }}</span>\r\n          </a>\r\n          <ng-container *ngIf=\"p.getCurrent() === page.value\">\r\n            <span class=\"show-for-sr\">{{ screenReaderCurrentLabel }} </span>\r\n            <span>{{\r\n              page.label === \"...\" ? page.label : (page.label | number: \"\")\r\n            }}</span>\r\n          </ng-container>\r\n        </li>\r\n        <li\r\n          class=\"pagination-next pagination-font page\"\r\n          [class.disabled]=\"p.isLastPage()\"\r\n          *ngIf=\"directionLinks\"\r\n        >\r\n          <a\r\n            tabindex=\"0\"\r\n            *ngIf=\"!p.isLastPage()\"\r\n            (keyup.enter)=\"p.next()\"\r\n            (click)=\"p.next()\"\r\n            [attr.aria-label]=\"nextLabel + ' ' + screenReaderPageLabel\"\r\n          >\r\n            {{ nextLabel }}\r\n          </a>\r\n          <span *ngIf=\"p.isLastPage()\">\r\n            {{ nextLabel }}\r\n          </span>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  </div>\r\n</pagination-template>\r\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None,
                styles: [".show-label{margin-right:.25rem}.no-padding{padding:0}.select-box{border:1px solid rgba(51,51,51,.6901960784313725);border-radius:4px;color:rgba(51,51,51,.6901960784313725);opacity:1}.entries-label{margin-left:.25rem}.page{background-color:#fff;border:1px solid #dee2e6;margin-left:-1px;padding:.15rem .2rem;position:relative}.ngx-pagination{display:flex;justify-content:space-between;margin-bottom:1rem;margin-left:0}.ngx-pagination:after,.ngx-pagination:before{display:table}.ngx-pagination:after{clear:both}.ngx-pagination li{-moz-user-select:none;-ms-user-select:none;-webkit-user-select:none;border-radius:0;display:inline-block}.ngx-pagination a,.ngx-pagination button{border-radius:0;display:block;padding:.1875rem .625rem}.ngx-pagination a:hover,.ngx-pagination button:hover{background:#e6e6e6}.ngx-pagination .current{background:#2199e8;border:1px solid #dee2e6;color:#fefefe;cursor:default;padding:.365rem .625rem}.ngx-pagination .disabled{color:#cacaca;cursor:default;padding:.3rem .625rem}.ngx-pagination .disabled:hover{background:transparent}.ngx-pagination a,.ngx-pagination button{cursor:pointer}.ngx-pagination .pagination-previous.disabled:before,.ngx-pagination .pagination-previous a:before{content:\"\u00AB\";display:inline-block}.ngx-pagination .pagination-next.disabled:after,.ngx-pagination .pagination-next a:after{content:\"\u00BB\";display:inline-block}.ngx-pagination .show-for-sr{clip:rect(0,0,0,0);height:1px;overflow:hidden;position:absolute!important;width:1px}.ngx-pagination .small-screen{display:none}@media screen and (max-width:601px){.ngx-pagination.responsive .small-screen{display:inline-block}.ngx-pagination.responsive li:not(.small-screen):not(.pagination-previous):not(.pagination-next){display:none}}@media only screen and (max-width:1023px){.pagination-font{color:#2e384d!important;font-size:14px!important}}@media only screen and (min-width:1024px) and (max-width:1439px){.pagination-font{color:#2e384d;font-size:16px!important}}@media only screen and (min-width:1440px) and (max-width:2559px){.pagination-font{color:#2e384d;font-size:18px!important}}"]
            },] }
];
PaginationComponent.propDecorators = {
    id: [{ type: Input }],
    maxSize: [{ type: Input }],
    isItemsPerPage: [{ type: Input }],
    directionLinks: [{ type: Input }],
    autoHide: [{ type: Input }],
    responsive: [{ type: Input }],
    previousLabel: [{ type: Input }],
    nextLabel: [{ type: Input }],
    screenReaderPaginationLabel: [{ type: Input }],
    screenReaderPageLabel: [{ type: Input }],
    screenReaderCurrentLabel: [{ type: Input }],
    pageChange: [{ type: Output }],
    pageBoundsCorrection: [{ type: Output }]
};

/**
 * This directive is what powers all pagination controls components, including the default one.
 * It exposes an API which is hooked up to the PaginationService to keep the PaginatePipe in sync
 * with the pagination controls.
 */
class PaginationDirective {
    constructor(service, changeDetectorRef) {
        this.service = service;
        this.changeDetectorRef = changeDetectorRef;
        this.maxSize = 7;
        this.pageChange = new EventEmitter();
        this.pageBoundsCorrection = new EventEmitter();
        this.pages = [];
        this.pageSizes = [];
        this.changeSub = this.service.change.subscribe((id) => {
            if (this.id === id) {
                this.updatePageLinks();
                this.changeDetectorRef.markForCheck();
                this.changeDetectorRef.detectChanges();
                const inst = this.service.getInstance(this.id);
                this.itemsPerPage = inst.itemsPerPage;
            }
        });
    }
    ngOnInit() {
        if (this.id === undefined) {
            this.id = this.service.defaultId();
        }
        const inst = this.service.getInstance(this.id);
        this.itemsPerPage = inst.itemsPerPage;
        for (let i = 5; i <= inst.totalItems;) {
            this.pageSizes.push(i);
            i += 5;
        }
        this.updatePageLinks();
    }
    ngOnChanges(changes) {
        this.updatePageLinks();
    }
    ngOnDestroy() {
        this.changeSub.unsubscribe();
    }
    pageSizeChanged(event) {
        this.itemsPerPage = event;
        this.service.setItemsPerPage(this.id, event);
        this.setCurrent(1);
        this.updatePageLinks();
    }
    /**
     * Go to the previous page
     */
    previous() {
        this.checkValidId();
        this.setCurrent(this.getCurrent() - 1);
    }
    /**
     * Go to the next page
     */
    next() {
        this.checkValidId();
        this.setCurrent(this.getCurrent() + 1);
    }
    /**
     * Returns true if current page is first page
     */
    isFirstPage() {
        return this.getCurrent() === 1;
    }
    /**
     * Returns true if current page is last page
     */
    isLastPage() {
        return this.getLastPage() === this.getCurrent();
    }
    /**
     * Set the current page number.
     */
    setCurrent(page) {
        this.pageChange.emit(page);
    }
    /**
     * Get the current page number.
     */
    getCurrent() {
        return this.service.getCurrentPage(this.id);
    }
    /**
     * Returns the last page number
     */
    getLastPage() {
        const inst = this.service.getInstance(this.id);
        if (inst.totalItems < 1) {
            // when there are 0 or fewer (an error case) items, there are no "pages" as such,
            // but it makes sense to consider a single, empty page as the last page.
            return 1;
        }
        return Math.ceil(inst.totalItems / inst.itemsPerPage);
    }
    getTotalItems() {
        return this.service.getInstance(this.id).totalItems;
    }
    getStartIndex() {
        const inst = this.service.getInstance(this.id);
        if (inst.totalItems < inst.itemsPerPage * (inst.currentPage - 1) + 1) {
            this.setCurrent(1);
        }
        return inst.itemsPerPage * (inst.currentPage - 1) + 1;
    }
    getEndIndex() {
        const inst = this.service.getInstance(this.id);
        const end = inst.itemsPerPage * inst.currentPage;
        if (inst.totalItems < end) {
            return inst.totalItems;
        }
        return end;
    }
    checkValidId() {
        if (this.service.getInstance(this.id).id == null) {
            console.warn(`PaginationControlsDirective: the specified id "${this.id}" does not match any registered PaginationInstance`);
        }
    }
    /**
     * Updates the page links and checks that the current page is valid. Should run whenever the
     * PaginationService.change stream emits a value matching the current ID, or when any of the
     * input values changes.
     */
    updatePageLinks() {
        const inst = this.service.getInstance(this.id);
        const correctedCurrentPage = this.outOfBoundCorrection(inst);
        if (correctedCurrentPage !== inst.currentPage) {
            setTimeout(() => {
                this.pageBoundsCorrection.emit(correctedCurrentPage);
                this.pages = this.createPageArray(inst.currentPage, inst.itemsPerPage, inst.totalItems, this.maxSize);
            });
        }
        else {
            this.pages = this.createPageArray(inst.currentPage, inst.itemsPerPage, inst.totalItems, this.maxSize);
        }
    }
    /**
     * Checks that the instance.currentPage property is within bounds for the current page range.
     * If not, return a correct value for currentPage, or the current value if OK.
     */
    outOfBoundCorrection(instance) {
        const totalPages = Math.ceil(instance.totalItems / instance.itemsPerPage);
        if (totalPages < instance.currentPage && 0 < totalPages) {
            return totalPages;
        }
        else if (instance.currentPage < 1) {
            return 1;
        }
        return instance.currentPage;
    }
    /**
     * Returns an array of Page objects to use in the pagination controls.
     */
    createPageArray(currentPage, itemsPerPage, totalItems, paginationRange) {
        // paginationRange could be a string if passed from attribute, so cast to number.
        paginationRange = +paginationRange;
        const pages = [];
        const totalPages = Math.ceil(totalItems / itemsPerPage);
        const halfWay = Math.ceil(paginationRange / 2);
        const isStart = currentPage <= halfWay;
        const isEnd = totalPages - halfWay < currentPage;
        const isMiddle = !isStart && !isEnd;
        const ellipsesNeeded = paginationRange < totalPages;
        let i = 1;
        while (i <= totalPages && i <= paginationRange) {
            let label;
            const pageNumber = this.calculatePageNumber(i, currentPage, paginationRange, totalPages);
            const openingEllipsesNeeded = i === 2 && (isMiddle || isEnd);
            const closingEllipsesNeeded = i === paginationRange - 1 && (isMiddle || isStart);
            if (ellipsesNeeded && (openingEllipsesNeeded || closingEllipsesNeeded)) {
                label = '...';
            }
            else {
                label = pageNumber;
            }
            pages.push({
                label,
                value: pageNumber,
            });
            i++;
        }
        return pages;
    }
    /**
     * Given the position in the sequence of pagination links [i],
     * figure out what page number corresponds to that position.
     */
    calculatePageNumber(i, currentPage, paginationRange, totalPages) {
        const halfWay = Math.ceil(paginationRange / 2);
        if (i === paginationRange) {
            return totalPages;
        }
        else if (i === 1) {
            return i;
        }
        else if (paginationRange < totalPages) {
            if (totalPages - halfWay < currentPage) {
                return totalPages - paginationRange + i;
            }
            else if (halfWay < currentPage) {
                return currentPage - halfWay + i;
            }
            else {
                return i;
            }
        }
        else {
            return i;
        }
    }
}
PaginationDirective.decorators = [
    { type: Directive, args: [{
                selector: 'pagination-template,[pagination-template]',
                exportAs: 'paginationApi',
            },] }
];
PaginationDirective.ctorParameters = () => [
    { type: PaginationService },
    { type: ChangeDetectorRef }
];
PaginationDirective.propDecorators = {
    id: [{ type: Input }],
    maxSize: [{ type: Input }],
    pageChange: [{ type: Output }],
    pageBoundsCorrection: [{ type: Output }]
};

const LARGE_NUMBER = Number.MAX_SAFE_INTEGER;
class PaginationPipe {
    constructor(service) {
        this.service = service;
        // store the values from the last time the pipe was invoked
        this.state = {};
    }
    transform(collection, args) {
        // When an observable is passed through the AsyncPipe, it will output
        // `null` until the subscription resolves. In this case, we want to
        // use the cached data from the `state` object to prevent the NgFor
        // from flashing empty until the real values arrive.
        if (!(collection instanceof Array)) {
            const _id = args.id || this.service.defaultId();
            if (this.state[_id]) {
                return this.state[_id].slice;
            }
            else {
                return collection;
            }
        }
        const serverSideMode = args.totalItems && args.totalItems !== collection.length;
        const instance = this.createInstance(collection, args);
        const id = instance.id;
        let start, end;
        let perPage = instance.itemsPerPage;
        const emitChange = this.service.register(instance);
        if (!serverSideMode && collection instanceof Array) {
            perPage = +perPage || LARGE_NUMBER;
            start = (instance.currentPage - 1) * perPage;
            end = start + perPage;
            const isIdentical = this.stateIsIdentical(id, collection, start, end);
            if (isIdentical) {
                return this.state[id].slice;
            }
            else {
                const slice = collection.slice(start, end);
                this.saveState(id, collection, slice, start, end);
                this.service.change.emit(id);
                return slice;
            }
        }
        else {
            if (emitChange) {
                this.service.change.emit(id);
            }
            // save the state for server-side collection to avoid null
            // flash as new data loads.
            this.saveState(id, collection, collection, start, end);
            return collection;
        }
    }
    /**
     * Create an PaginationInstance object, using defaults for any optional properties not supplied.
     */
    createInstance(collection, config) {
        var _a;
        this.checkConfig(config);
        const id = config.id != null ? config.id : this.service.defaultId();
        if (config.itemsPerPage) {
            if (!((_a = this.service.getInstance(id)) === null || _a === void 0 ? void 0 : _a.itemsPerPage)) {
                this.service.setItemsPerPage(id, +config.itemsPerPage);
            }
        }
        const perPage = (config.itemsPerPage && !this.service.getInstance(id).itemsPerPage) ? config.itemsPerPage :
            this.service.getInstance(id).itemsPerPage;
        return {
            id: config.id != null ? config.id : this.service.defaultId(),
            itemsPerPage: +perPage || 5,
            currentPage: +config.currentPage || 1,
            totalItems: +config.totalItems || collection.length
        };
    }
    /**
     * Ensure the argument passed to the filter contains the required properties.
     */
    checkConfig(config) {
        const required = ['currentPage'];
        const missing = required.filter(prop => !(prop in config));
        if (0 < missing.length) {
            throw new Error(`PaginatePipe: Argument is missing the following required properties: ${missing.join(', ')}`);
        }
    }
    /**
     * To avoid returning a brand new array each time the pipe is run, we store the state of the sliced
     * array for a given id. This means that the next time the pipe is run on this collection & id, we just
     * need to check that the collection, start and end points are all identical, and if so, return the
     * last sliced array.
     */
    saveState(id, collection, slice, start, end) {
        this.state[id] = {
            collection,
            size: collection.length,
            slice,
            start,
            end
        };
    }
    /**
     * For a given id, returns true if the collection, size, start and end values are identical.
     */
    stateIsIdentical(id, collection, start, end) {
        const state = this.state[id];
        if (!state) {
            return false;
        }
        const isMetaDataIdentical = state.size === collection.length &&
            state.start === start &&
            state.end === end;
        if (!isMetaDataIdentical) {
            return false;
        }
        return state.slice.every((element, index) => element === collection[start + index]);
    }
}
PaginationPipe.decorators = [
    { type: Pipe, args: [{
                name: 'paginate',
                pure: false
            },] }
];
PaginationPipe.ctorParameters = () => [
    { type: PaginationService }
];

class NgxTablePaginationModule {
}
NgxTablePaginationModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    PaginationComponent,
                    PaginationPipe,
                    PaginationDirective
                ],
                imports: [
                    CommonModule,
                    FormsModule
                ],
                providers: [PaginationService],
                exports: [PaginationComponent,
                    PaginationPipe,
                    PaginationDirective]
            },] }
];

/*
 * Public API Surface of pagination
 */

/**
 * Generated bundle index. Do not edit.
 */

export { NgxTablePaginationModule, PaginationComponent, PaginationDirective, PaginationPipe, PaginationService };
//# sourceMappingURL=ngx-table-pagination.js.map
