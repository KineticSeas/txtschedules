import { Component, Input, Output, EventEmitter } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule, ReactiveFormsModule, FormControl } from '@angular/forms';
import { HttpClientModule } from '@angular/common/http';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "../data.service";
import * as i3 from "@angular/forms";
export class SqlUploadFormComponent {
    constructor(_http, _dataService) {
        this._http = _http;
        this._dataService = _dataService;
        this.last_id = '';
        this.path = "https://myna-docs.com/upload.php";
        this.id = '0'; // Primary key for an existing record = 0=Insert
        this.table = "dual"; // Name of the base table.
        this.embedded = "N"; // Is the form embedded in a list.
        this.card = "Y"; // Show the form in a card Y/N
        this.closable = "N"; // Is the form closable Y/N
        this.open = "Y"; // Does a closable form start open.
        this.class = ""; // Class for the form container.
        this.style = ""; // Style for the form container.
        this.title = ""; // Title of the form.
        this.bs_row = 'Y'; // Y means add a bootstrap row.
        this.bs_col = 'col-sm-12 col-lg-6 col-xl-4'; // What bootstrap columns.
        this.handler = 'default'; // what handler is used to process the form.
        this.change = new EventEmitter();
        this.saved = new EventEmitter();
        this.counter = 0;
        this.showErrorAlert = 'N';
        this.errorMessage = 'Post Failed';
        this.showSuccessAlert = 'N';
        this.file = new FormControl('');
        this.file_data = '';
        this.myObs = this._dataService.dataSubject.subscribe(d => {
            this.data = d;
            this.counter++;
            if (this.data.id != this.last_id) {
                this.last_id = this.data.id;
                this.id = this.data.id;
                this.ngAfterViewInit();
            }
            if (this.data.submit === 'Y') {
                this.postSQL();
            }
        });
    }
    ngOnInit() {
    }
    showUpload() {
        this.change.emit('DONE');
    }
    ngAfterViewInit() {
        if (this.embedded == 'Y') {
            this.id == this.data.id;
        }
        this._dataService.getForm(this.table, this.id).subscribe((data) => {
            this.data = data;
            this._dataService.pushNotification(this.data);
        });
    }
    postSQL() {
        this._dataService.postSQL(this.data).subscribe((data) => {
            if (data.error_code == "0") {
                this.showSuccessAlert = 'Y';
                this.showErrorAlert = 'N';
                this.errorMessage = 'Record Saved';
            }
            else {
                this.showSuccessAlert = 'N';
                this.showErrorAlert = 'Y';
                this.errorMessage = data.error_message;
                this.errorMessage = 'Record Saved';
            }
            this._dataService.pushNotification(data);
            setTimeout(() => {
                this.showErrorAlert = 'N';
                this.showSuccessAlert = 'N';
            }, 5000);
        });
    }
    ngDoCheck() {
    }
    ngOnChanges(changes) {
    }
    fileChange(index, event) {
        const fileList = event.target.files;
        if (fileList.length > 0) {
            let k;
            let v;
            const file = fileList[0];
            if ((file.size / 1048576) <= 8) {
                let formData = new FormData();
                formData.append('file', file, file.name);
                for ([k, v] of Object.entries(this.data)) {
                    formData.append(k, v);
                }
                this.file_data = formData;
            }
            else {
                alert('File size exceeds 8 MB. Please choose less than 8 MB');
            }
        }
    }
    uploadFile() {
        this._http.post(this.path, this.file_data)
            .subscribe(res => {
            location.reload();
        }, (err) => {
            //send error response
            alert('error occured');
        });
    }
    ngOnDestroy() {
        this.myObs.unsubscribe();
    }
}
SqlUploadFormComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.3", ngImport: i0, type: SqlUploadFormComponent, deps: [{ token: i1.HttpClient }, { token: i2.SQLDataService }], target: i0.ɵɵFactoryTarget.Component });
SqlUploadFormComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.3", type: SqlUploadFormComponent, isStandalone: true, selector: "sql-upload-form", inputs: { data: "data", path: "path", id: "id", table: "table", embedded: "embedded", card: "card", closable: "closable", open: "open", class: "class", style: "style", title: "title", bs_row: "bs_row", bs_col: "bs_col", handler: "handler" }, outputs: { change: "change", saved: "saved" }, usesOnChanges: true, ngImport: i0, template: "<div class=\"card\">\n    <div class=\"card-header\" style=\"margin-top: 0px;\">\n       <h2>{{ title }}</h2>\n    </div>\n    <div class=\"card-body\">\n        <div class=\"row\">\n            <ng-content></ng-content>\n        </div>\n    </div>\n    <div class=\"row\">\n        <div class=\"col-6 p-3\">\n            <input style=\"margin-left: 20px;\" class=\"btn-dark btn\" [formControl]=\"file\" (change)=\"fileChange(index,$event)\" type=\"file\" placeholder=\"File\">\n        </div>\n        <div class=\"col-6 p-3\">\n            <button (click)=\"showUpload()\" class=\"btn btn-light\">\n                Cancel\n            </button>\n            <button style=\"margin-left:20px;\" (click)=\"uploadFile()\" class=\"btn btn-primary\">\n                Upload\n            </button>\n        </div>\n    </div>\n</div>", styles: [""], dependencies: [{ kind: "ngmodule", type: CommonModule }, { kind: "ngmodule", type: FormsModule }, { kind: "directive", type: i3.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "ngmodule", type: HttpClientModule }, { kind: "ngmodule", type: ReactiveFormsModule }, { kind: "directive", type: i3.FormControlDirective, selector: "[formControl]", inputs: ["formControl", "disabled", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.3", ngImport: i0, type: SqlUploadFormComponent, decorators: [{
            type: Component,
            args: [{ selector: 'sql-upload-form', standalone: true, imports: [CommonModule, FormsModule, HttpClientModule, ReactiveFormsModule], template: "<div class=\"card\">\n    <div class=\"card-header\" style=\"margin-top: 0px;\">\n       <h2>{{ title }}</h2>\n    </div>\n    <div class=\"card-body\">\n        <div class=\"row\">\n            <ng-content></ng-content>\n        </div>\n    </div>\n    <div class=\"row\">\n        <div class=\"col-6 p-3\">\n            <input style=\"margin-left: 20px;\" class=\"btn-dark btn\" [formControl]=\"file\" (change)=\"fileChange(index,$event)\" type=\"file\" placeholder=\"File\">\n        </div>\n        <div class=\"col-6 p-3\">\n            <button (click)=\"showUpload()\" class=\"btn btn-light\">\n                Cancel\n            </button>\n            <button style=\"margin-left:20px;\" (click)=\"uploadFile()\" class=\"btn btn-primary\">\n                Upload\n            </button>\n        </div>\n    </div>\n</div>" }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: i2.SQLDataService }]; }, propDecorators: { data: [{
                type: Input
            }], path: [{
                type: Input
            }], id: [{
                type: Input
            }], table: [{
                type: Input
            }], embedded: [{
                type: Input
            }], card: [{
                type: Input
            }], closable: [{
                type: Input
            }], open: [{
                type: Input
            }], class: [{
                type: Input
            }], style: [{
                type: Input
            }], title: [{
                type: Input
            }], bs_row: [{
                type: Input
            }], bs_col: [{
                type: Input
            }], handler: [{
                type: Input
            }], change: [{
                type: Output
            }], saved: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,