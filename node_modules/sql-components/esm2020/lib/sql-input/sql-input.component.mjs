import { Component, Input, Output, EventEmitter } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { MatFormFieldModule } from '@angular/material/form-field';
import { MatInputModule } from '@angular/material/input';
import * as i0 from "@angular/core";
import * as i1 from "../data.service";
import * as i2 from "@angular/common";
import * as i3 from "@angular/forms";
import * as i4 from "@angular/material/form-field";
import * as i5 from "@angular/material/input";
export class SqlInputComponent {
    ngAfterViewInit() {
    }
    constructor(_dataService) {
        this._dataService = _dataService;
        this.va = '';
        this.fieldData = '';
        this.col = '';
        this.class = '';
        this.style = '';
        this.hint = '';
        this.icon = '';
        this.label = 'Label not set';
        this.placeholder = '';
        this.appearance = 'outline';
        this.bs_row = 'Y';
        this.bs_col = 'col-12';
        this.top_label = 'N';
        this.counter = 0;
        this.change = new EventEmitter();
        this.nname = '';
        this.myObs = this._dataService.dataSubject.subscribe(d => {
            this.data = d;
            this.fieldData = this.data;
            this.va = this.fieldData[this.col];
            this.counter++;
        });
    }
    ngOnInit() {
        this.nname = 'XX' + Math.floor(Math.random() * 10000);
    }
    handleChange() {
        this.fieldData['submit'] = 'N';
        this.fieldData[this.col] = this.va;
        this._dataService.pushNotification(this.fieldData);
    }
    ngOnDestroy() {
        //    this.myObs.unsubscribe();
    }
}
SqlInputComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.3", ngImport: i0, type: SqlInputComponent, deps: [{ token: i1.SQLDataService }], target: i0.ɵɵFactoryTarget.Component });
SqlInputComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.3", type: SqlInputComponent, isStandalone: true, selector: "sql-input", inputs: { col: "col", data: "data", class: "class", style: "style", hint: "hint", icon: "icon", label: "label", placeholder: "placeholder", appearance: "appearance", bs_row: "bs_row", bs_col: "bs_col", top_label: "top_label" }, outputs: { change: "change" }, ngImport: i0, template: "    <span *ngIf=\"appearance=='outline'\">\n      <!-- if new row -->\n          <div *ngIf=\"bs_row=='Y'\" class=\"row\">\n            <div [class]=\"bs_col\">\n              <p *ngIf=\"top_label=='Y'\">{{ label }}</p>\n              <mat-form-field \n                [ngClass]=\"class\" \n                [style]=\"style\" \n                (change)=\"handleChange()\"\n                appearance=\"outline\">\n                  <mat-label>{{ label }}</mat-label>\n                  <input [name]=\"nname\" [id]=\"nname\" [(ngModel)]=\"va\" autocomplete=\"false\" matInput placeholder=\"{{ placeholder }}\">\n                      <mat-icon matSuffix>{{ icon }}</mat-icon>\n                      <mat-hint>{{ hint }}</mat-hint>\n              </mat-form-field>\n            </div>\n          </div>\n      <!-- if not new row but has bootstrap column-->\n      <div *ngIf=\"bs_row!='Y'&&bs_col!=''\">\n        <div [class]=\"bs_col\">\n          <p *ngIf=\"top_label=='Y'\">{{ label }}</p>       \n          <mat-form-field \n            [ngClass]=\"class\" \n            [style]=\"style\" \n            (change)=\"handleChange()\"\n            appearance=\"outline\">\n              <mat-label>{{ label }}</mat-label>\n              <input  [name]=\"nname\" [id]=\"nname\" [(ngModel)]=\"va\" matInput autocomplete=\"false\" placeholder=\"{{ placeholder }}\">\n                  <mat-icon matSuffix>{{ icon }}</mat-icon>\n                  <mat-hint>{{ hint }}</mat-hint>\n          </mat-form-field>\n        </div>\n      </div>\n      <!-- if not new row and no bootstrap column -->\n      <span *ngIf=\"bs_row!='Y'&&bs_col==''\" style=\"margin-right:20px; \">\n        <p *ngIf=\"top_label=='Y'\">{{ label }}</p>\n          <mat-form-field \n            [ngClass]=\"class\" \n            [style]=\"style\" \n            (change)=\"handleChange()\"\n            appearance=\"outline\">\n              <mat-label>{{ label }}</mat-label>\n              <input  [name]=\"nname\" [id]=\"nname\"  [(ngModel)]=\"va\" matInput autocomplete=\"false\" placeholder=\"{{ placeholder }}\">\n                  <mat-icon matSuffix>{{ icon }}</mat-icon>\n                  <mat-hint>{{ hint }}</mat-hint>\n          </mat-form-field>\n        </span>\n    </span>\n    <!-- mat appearance is fill -->    \n    <span *ngIf=\"appearance=='fill'\">\n      <!-- if new row -->\n      <div *ngIf=\"bs_row=='Y'\" class=\"row\">\n        <div [class]=\"bs_col\">\n          <p *ngIf=\"top_label=='Y'\">{{ label }}</p>\n          <mat-form-field \n            [ngClass]=\"class\" \n            [style]=\"style\" appearance=\"fill\">\n              <mat-label>{{ label }}</mat-label>\n                <input  [name]=\"nname\" [id]=\"nname\"  [(ngModel)]=\"va\"\n                  [(ngModel)]=\"va\" \n                  (change)=\"handleChange()\" autocomplete=\"false\"\n                  matInput \n                  placeholder=\"{{ placeholder }}\">\n                    <mat-icon matSuffix>{{ icon }}</mat-icon>\n                    <mat-hint>{{ hint }}</mat-hint>\n          </mat-form-field>\n        </div>\n      </div>\n            <!-- if not new row but has bootstrap column-->\n            <div *ngIf=\"bs_row!='Y'&&bs_col!=''\">\n              <div [class]=\"bs_col\">\n                <p *ngIf=\"top_label=='Y'\">{{ label }}</p>\n                <mat-form-field \n                [ngClass]=\"class\" \n                [style]=\"style\" appearance=\"fill\">\n                  <mat-label>{{ label }}</mat-label>\n                    <input  [name]=\"nname\" [id]=\"nname\"  [(ngModel)]=\"va\"\n                      (change)=\"handleChange()\" autocomplete=\"false\"\n                      matInput \n                      placeholder=\"{{ placeholder }}\">\n                        <mat-icon matSuffix>{{ icon }}</mat-icon>\n                        <mat-hint>{{ hint }}</mat-hint>\n              </mat-form-field>\n              </div>\n            </div>\n            <span *ngIf=\"bs_row!='Y'&&bs_col==''\" style=\"margin-right:20px;\" >\n              <p *ngIf=\"top_label=='Y'\">{{ label }}</p>\n              <mat-form-field \n              [ngClass]=\"class\" \n              [style]=\"style\" appearance=\"fill\">\n                <mat-label>{{ label }}</mat-label>\n                  <input  [name]=\"nname\" [id]=\"nname\"  [(ngModel)]=\"va\"\n                    [(ngModel)]=\"va\" \n                    (change)=\"handleChange()\" autocomplete=\"false\"\n                    matInput \n                    placeholder=\"{{ placeholder }}\">\n                      <mat-icon matSuffix>{{ icon }}</mat-icon>\n                      <mat-hint>{{ hint }}</mat-hint>\n            </mat-form-field>\n          </span>\n\n        </span>", styles: [""], dependencies: [{ kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i2.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "ngmodule", type: FormsModule }, { kind: "directive", type: i3.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "ngmodule", type: MatFormFieldModule }, { kind: "component", type: i4.MatFormField, selector: "mat-form-field", inputs: ["hideRequiredMarker", "color", "floatLabel", "appearance", "subscriptSizing", "hintLabel"], exportAs: ["matFormField"] }, { kind: "directive", type: i4.MatLabel, selector: "mat-label" }, { kind: "directive", type: i4.MatHint, selector: "mat-hint", inputs: ["align", "id"] }, { kind: "directive", type: i4.MatSuffix, selector: "[matSuffix], [matIconSuffix], [matTextSuffix]", inputs: ["matTextSuffix"] }, { kind: "ngmodule", type: MatInputModule }, { kind: "directive", type: i5.MatInput, selector: "input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]", inputs: ["disabled", "id", "placeholder", "name", "required", "type", "errorStateMatcher", "aria-describedby", "value", "readonly"], exportAs: ["matInput"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.3", ngImport: i0, type: SqlInputComponent, decorators: [{
            type: Component,
            args: [{ selector: 'sql-input', standalone: true, imports: [CommonModule, FormsModule, MatFormFieldModule, MatInputModule], template: "    <span *ngIf=\"appearance=='outline'\">\n      <!-- if new row -->\n          <div *ngIf=\"bs_row=='Y'\" class=\"row\">\n            <div [class]=\"bs_col\">\n              <p *ngIf=\"top_label=='Y'\">{{ label }}</p>\n              <mat-form-field \n                [ngClass]=\"class\" \n                [style]=\"style\" \n                (change)=\"handleChange()\"\n                appearance=\"outline\">\n                  <mat-label>{{ label }}</mat-label>\n                  <input [name]=\"nname\" [id]=\"nname\" [(ngModel)]=\"va\" autocomplete=\"false\" matInput placeholder=\"{{ placeholder }}\">\n                      <mat-icon matSuffix>{{ icon }}</mat-icon>\n                      <mat-hint>{{ hint }}</mat-hint>\n              </mat-form-field>\n            </div>\n          </div>\n      <!-- if not new row but has bootstrap column-->\n      <div *ngIf=\"bs_row!='Y'&&bs_col!=''\">\n        <div [class]=\"bs_col\">\n          <p *ngIf=\"top_label=='Y'\">{{ label }}</p>       \n          <mat-form-field \n            [ngClass]=\"class\" \n            [style]=\"style\" \n            (change)=\"handleChange()\"\n            appearance=\"outline\">\n              <mat-label>{{ label }}</mat-label>\n              <input  [name]=\"nname\" [id]=\"nname\" [(ngModel)]=\"va\" matInput autocomplete=\"false\" placeholder=\"{{ placeholder }}\">\n                  <mat-icon matSuffix>{{ icon }}</mat-icon>\n                  <mat-hint>{{ hint }}</mat-hint>\n          </mat-form-field>\n        </div>\n      </div>\n      <!-- if not new row and no bootstrap column -->\n      <span *ngIf=\"bs_row!='Y'&&bs_col==''\" style=\"margin-right:20px; \">\n        <p *ngIf=\"top_label=='Y'\">{{ label }}</p>\n          <mat-form-field \n            [ngClass]=\"class\" \n            [style]=\"style\" \n            (change)=\"handleChange()\"\n            appearance=\"outline\">\n              <mat-label>{{ label }}</mat-label>\n              <input  [name]=\"nname\" [id]=\"nname\"  [(ngModel)]=\"va\" matInput autocomplete=\"false\" placeholder=\"{{ placeholder }}\">\n                  <mat-icon matSuffix>{{ icon }}</mat-icon>\n                  <mat-hint>{{ hint }}</mat-hint>\n          </mat-form-field>\n        </span>\n    </span>\n    <!-- mat appearance is fill -->    \n    <span *ngIf=\"appearance=='fill'\">\n      <!-- if new row -->\n      <div *ngIf=\"bs_row=='Y'\" class=\"row\">\n        <div [class]=\"bs_col\">\n          <p *ngIf=\"top_label=='Y'\">{{ label }}</p>\n          <mat-form-field \n            [ngClass]=\"class\" \n            [style]=\"style\" appearance=\"fill\">\n              <mat-label>{{ label }}</mat-label>\n                <input  [name]=\"nname\" [id]=\"nname\"  [(ngModel)]=\"va\"\n                  [(ngModel)]=\"va\" \n                  (change)=\"handleChange()\" autocomplete=\"false\"\n                  matInput \n                  placeholder=\"{{ placeholder }}\">\n                    <mat-icon matSuffix>{{ icon }}</mat-icon>\n                    <mat-hint>{{ hint }}</mat-hint>\n          </mat-form-field>\n        </div>\n      </div>\n            <!-- if not new row but has bootstrap column-->\n            <div *ngIf=\"bs_row!='Y'&&bs_col!=''\">\n              <div [class]=\"bs_col\">\n                <p *ngIf=\"top_label=='Y'\">{{ label }}</p>\n                <mat-form-field \n                [ngClass]=\"class\" \n                [style]=\"style\" appearance=\"fill\">\n                  <mat-label>{{ label }}</mat-label>\n                    <input  [name]=\"nname\" [id]=\"nname\"  [(ngModel)]=\"va\"\n                      (change)=\"handleChange()\" autocomplete=\"false\"\n                      matInput \n                      placeholder=\"{{ placeholder }}\">\n                        <mat-icon matSuffix>{{ icon }}</mat-icon>\n                        <mat-hint>{{ hint }}</mat-hint>\n              </mat-form-field>\n              </div>\n            </div>\n            <span *ngIf=\"bs_row!='Y'&&bs_col==''\" style=\"margin-right:20px;\" >\n              <p *ngIf=\"top_label=='Y'\">{{ label }}</p>\n              <mat-form-field \n              [ngClass]=\"class\" \n              [style]=\"style\" appearance=\"fill\">\n                <mat-label>{{ label }}</mat-label>\n                  <input  [name]=\"nname\" [id]=\"nname\"  [(ngModel)]=\"va\"\n                    [(ngModel)]=\"va\" \n                    (change)=\"handleChange()\" autocomplete=\"false\"\n                    matInput \n                    placeholder=\"{{ placeholder }}\">\n                      <mat-icon matSuffix>{{ icon }}</mat-icon>\n                      <mat-hint>{{ hint }}</mat-hint>\n            </mat-form-field>\n          </span>\n\n        </span>" }]
        }], ctorParameters: function () { return [{ type: i1.SQLDataService }]; }, propDecorators: { col: [{
                type: Input
            }], data: [{
                type: Input
            }], class: [{
                type: Input
            }], style: [{
                type: Input
            }], hint: [{
                type: Input
            }], icon: [{
                type: Input
            }], label: [{
                type: Input
            }], placeholder: [{
                type: Input
            }], appearance: [{
                type: Input
            }], bs_row: [{
                type: Input
            }], bs_col: [{
                type: Input
            }], top_label: [{
                type: Input
            }], change: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3FsLWlucHV0LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3NxbC1jb21wb25lbnRzL3NyYy9saWIvc3FsLWlucHV0L3NxbC1pbnB1dC5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9zcWwtY29tcG9uZW50cy9zcmMvbGliL3NxbC1pbnB1dC9zcWwtaW5wdXQuY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBVSxLQUFLLEVBQUUsTUFBTSxFQUFhLFlBQVksRUFBcUMsTUFBTSxlQUFlLENBQUM7QUFDN0gsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQy9DLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM3QyxPQUFPLEVBQUUsa0JBQWtCLEVBQXVCLE1BQU0sOEJBQThCLENBQUM7QUFDdkYsT0FBTyxFQUFZLGNBQWMsRUFBRSxNQUFNLHlCQUF5QixDQUFDOzs7Ozs7O0FBWW5FLE1BQU0sT0FBTyxpQkFBaUI7SUF3QjVCLGVBQWU7SUFFZixDQUFDO0lBR0QsWUFBb0IsWUFBNEI7UUFBNUIsaUJBQVksR0FBWixZQUFZLENBQWdCO1FBM0JoRCxPQUFFLEdBQU0sRUFBRSxDQUFDO1FBQ1gsY0FBUyxHQUFRLEVBQUUsQ0FBQztRQUdYLFFBQUcsR0FBVyxFQUFFLENBQUM7UUFFakIsVUFBSyxHQUFRLEVBQUUsQ0FBQztRQUNoQixVQUFLLEdBQVEsRUFBRSxDQUFDO1FBQ2hCLFNBQUksR0FBVyxFQUFFLENBQUM7UUFDbEIsU0FBSSxHQUFXLEVBQUUsQ0FBQztRQUNsQixVQUFLLEdBQVcsZUFBZSxDQUFDO1FBQ2hDLGdCQUFXLEdBQVEsRUFBRSxDQUFDO1FBQ3RCLGVBQVUsR0FBVyxTQUFTLENBQUM7UUFDL0IsV0FBTSxHQUFRLEdBQUcsQ0FBQztRQUNsQixXQUFNLEdBQVEsUUFBUSxDQUFDO1FBQ3ZCLGNBQVMsR0FBUSxHQUFHLENBQUM7UUFDOUIsWUFBTyxHQUFXLENBQUMsQ0FBQztRQUVwQixXQUFNLEdBQXNCLElBQUksWUFBWSxFQUFPLENBQUM7UUFDcEQsVUFBSyxHQUFRLEVBQUUsQ0FBQztRQVNkLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFFO1lBQ3ZELElBQUksQ0FBQyxJQUFJLEdBQUMsQ0FBQyxDQUFDO1lBQ1osSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO1lBQzNCLElBQUksQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDbkMsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQ2pCLENBQUMsQ0FBQyxDQUFBO0lBQ0osQ0FBQztJQUVELFFBQVE7UUFDTixJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxLQUFLLENBQUMsQ0FBQTtJQUN2RCxDQUFDO0lBRUQsWUFBWTtRQUNULElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLEdBQUMsR0FBRyxDQUFDO1FBQzdCLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFDLElBQUksQ0FBQyxFQUFFLENBQUM7UUFDakMsSUFBSSxDQUFDLFlBQVksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDdEQsQ0FBQztJQUVELFdBQVc7UUFDYiwrQkFBK0I7SUFDN0IsQ0FBQzs7OEdBbERVLGlCQUFpQjtrR0FBakIsaUJBQWlCLHdVQ2hCOUIsaW9KQXFHZSx5RER6RkgsWUFBWSxnT0FBRSxXQUFXLDhtQkFBRSxrQkFBa0IsbWdCQUFFLGNBQWM7MkZBSTVELGlCQUFpQjtrQkFQN0IsU0FBUzsrQkFDRSxXQUFXLGNBQ1QsSUFBSSxXQUNQLENBQUMsWUFBWSxFQUFFLFdBQVcsRUFBRSxrQkFBa0IsRUFBRSxjQUFjLENBQUM7cUdBVS9ELEdBQUc7c0JBQVgsS0FBSztnQkFDRyxJQUFJO3NCQUFaLEtBQUs7Z0JBQ0csS0FBSztzQkFBYixLQUFLO2dCQUNHLEtBQUs7c0JBQWIsS0FBSztnQkFDRyxJQUFJO3NCQUFaLEtBQUs7Z0JBQ0csSUFBSTtzQkFBWixLQUFLO2dCQUNHLEtBQUs7c0JBQWIsS0FBSztnQkFDRyxXQUFXO3NCQUFuQixLQUFLO2dCQUNHLFVBQVU7c0JBQWxCLEtBQUs7Z0JBQ0csTUFBTTtzQkFBZCxLQUFLO2dCQUNHLE1BQU07c0JBQWQsS0FBSztnQkFDRyxTQUFTO3NCQUFqQixLQUFLO2dCQUdOLE1BQU07c0JBREwsTUFBTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgT25Jbml0LCBJbnB1dCwgT3V0cHV0LCBPbkRlc3Ryb3ksIEV2ZW50RW1pdHRlciwgT25DaGFuZ2VzLCBEb0NoZWNrLCBBZnRlclZpZXdJbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgRm9ybXNNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBNYXRGb3JtRmllbGRNb2R1bGUsIE1hdEZvcm1GaWVsZENvbnRyb2wgfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC9mb3JtLWZpZWxkJztcbmltcG9ydCB7IE1hdElucHV0LCBNYXRJbnB1dE1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL2lucHV0JztcbmltcG9ydCB7IE1hdEljb25Nb2R1bGUgIH0gIGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL2ljb24nO1xuaW1wb3J0IHsgU1FMRGF0YVNlcnZpY2UgfSBmcm9tICcuLi9kYXRhLnNlcnZpY2UnO1xuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3NxbC1pbnB1dCcsXG4gIHN0YW5kYWxvbmU6IHRydWUsXG4gIGltcG9ydHM6IFtDb21tb25Nb2R1bGUsIEZvcm1zTW9kdWxlLCBNYXRGb3JtRmllbGRNb2R1bGUsIE1hdElucHV0TW9kdWxlXSxcbiAgdGVtcGxhdGVVcmw6ICcuL3NxbC1pbnB1dC5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWycuL3NxbC1pbnB1dC5jb21wb25lbnQuY3NzJ11cbn0pXG5leHBvcnQgY2xhc3MgU3FsSW5wdXRDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIEFmdGVyVmlld0luaXQsIE9uRGVzdHJveSAge1xuXG4gIHZhOiBhbnk9Jyc7XG4gIGZpZWxkRGF0YTogYW55ID0gJyc7XG4gIG15T2JzITogU3Vic2NyaXB0aW9uO1xuXG4gIEBJbnB1dCgpIGNvbDogc3RyaW5nID0gJyc7XG4gIEBJbnB1dCgpIGRhdGE6IGFueTtcbiAgQElucHV0KCkgY2xhc3M6IGFueSA9ICcnO1xuICBASW5wdXQoKSBzdHlsZTogYW55ID0gJyc7XG4gIEBJbnB1dCgpIGhpbnQ6IHN0cmluZyA9ICcnO1xuICBASW5wdXQoKSBpY29uOiBzdHJpbmcgPSAnJztcbiAgQElucHV0KCkgbGFiZWw6IHN0cmluZyA9ICdMYWJlbCBub3Qgc2V0JztcbiAgQElucHV0KCkgcGxhY2Vob2xkZXI6IGFueSA9ICcnO1xuICBASW5wdXQoKSBhcHBlYXJhbmNlOiBzdHJpbmcgPSAnb3V0bGluZSc7XG4gIEBJbnB1dCgpIGJzX3JvdzogYW55ID0gJ1knO1xuICBASW5wdXQoKSBic19jb2w6IGFueSA9ICdjb2wtMTInO1xuICBASW5wdXQoKSB0b3BfbGFiZWw6IGFueSA9ICdOJztcbiAgY291bnRlcjogbnVtYmVyID0gMDtcbiAgQE91dHB1dCgpXG4gIGNoYW5nZTogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTsgIFxuICBubmFtZTogYW55ID0gJyc7XG5cbiAgXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcbiAgXG4gIH1cblxuICBmb3JtRGF0YTogYW55O1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIF9kYXRhU2VydmljZTogU1FMRGF0YVNlcnZpY2UpIHsgXG4gICAgdGhpcy5teU9icyA9IHRoaXMuX2RhdGFTZXJ2aWNlLmRhdGFTdWJqZWN0LnN1YnNjcmliZShkID0+IHtcbiAgICAgIHRoaXMuZGF0YT1kO1xuICAgICAgdGhpcy5maWVsZERhdGEgPSB0aGlzLmRhdGE7XG4gICAgICB0aGlzLnZhID0gdGhpcy5maWVsZERhdGFbdGhpcy5jb2xdO1xuICAgICAgdGhpcy5jb3VudGVyKys7XG4gICAgfSlcbiAgfVxuXG4gIG5nT25Jbml0KCk6IHZvaWQge1xuICAgIHRoaXMubm5hbWUgPSAnWFgnICsgTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTAwMDApXG4gIH1cblxuICBoYW5kbGVDaGFuZ2UoKSB7XG4gICAgIHRoaXMuZmllbGREYXRhWydzdWJtaXQnXT0nTic7XG4gICAgIHRoaXMuZmllbGREYXRhW3RoaXMuY29sXT10aGlzLnZhO1xuICAgICB0aGlzLl9kYXRhU2VydmljZS5wdXNoTm90aWZpY2F0aW9uKHRoaXMuZmllbGREYXRhKTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCk6IHZvaWQge1xuLy8gICAgdGhpcy5teU9icy51bnN1YnNjcmliZSgpO1xuICB9XG59XG4iLCIgICAgPHNwYW4gKm5nSWY9XCJhcHBlYXJhbmNlPT0nb3V0bGluZSdcIj5cbiAgICAgIDwhLS0gaWYgbmV3IHJvdyAtLT5cbiAgICAgICAgICA8ZGl2ICpuZ0lmPVwiYnNfcm93PT0nWSdcIiBjbGFzcz1cInJvd1wiPlxuICAgICAgICAgICAgPGRpdiBbY2xhc3NdPVwiYnNfY29sXCI+XG4gICAgICAgICAgICAgIDxwICpuZ0lmPVwidG9wX2xhYmVsPT0nWSdcIj57eyBsYWJlbCB9fTwvcD5cbiAgICAgICAgICAgICAgPG1hdC1mb3JtLWZpZWxkIFxuICAgICAgICAgICAgICAgIFtuZ0NsYXNzXT1cImNsYXNzXCIgXG4gICAgICAgICAgICAgICAgW3N0eWxlXT1cInN0eWxlXCIgXG4gICAgICAgICAgICAgICAgKGNoYW5nZSk9XCJoYW5kbGVDaGFuZ2UoKVwiXG4gICAgICAgICAgICAgICAgYXBwZWFyYW5jZT1cIm91dGxpbmVcIj5cbiAgICAgICAgICAgICAgICAgIDxtYXQtbGFiZWw+e3sgbGFiZWwgfX08L21hdC1sYWJlbD5cbiAgICAgICAgICAgICAgICAgIDxpbnB1dCBbbmFtZV09XCJubmFtZVwiIFtpZF09XCJubmFtZVwiIFsobmdNb2RlbCldPVwidmFcIiBhdXRvY29tcGxldGU9XCJmYWxzZVwiIG1hdElucHV0IHBsYWNlaG9sZGVyPVwie3sgcGxhY2Vob2xkZXIgfX1cIj5cbiAgICAgICAgICAgICAgICAgICAgICA8bWF0LWljb24gbWF0U3VmZml4Pnt7IGljb24gfX08L21hdC1pY29uPlxuICAgICAgICAgICAgICAgICAgICAgIDxtYXQtaGludD57eyBoaW50IH19PC9tYXQtaGludD5cbiAgICAgICAgICAgICAgPC9tYXQtZm9ybS1maWVsZD5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgPCEtLSBpZiBub3QgbmV3IHJvdyBidXQgaGFzIGJvb3RzdHJhcCBjb2x1bW4tLT5cbiAgICAgIDxkaXYgKm5nSWY9XCJic19yb3chPSdZJyYmYnNfY29sIT0nJ1wiPlxuICAgICAgICA8ZGl2IFtjbGFzc109XCJic19jb2xcIj5cbiAgICAgICAgICA8cCAqbmdJZj1cInRvcF9sYWJlbD09J1knXCI+e3sgbGFiZWwgfX08L3A+ICAgICAgIFxuICAgICAgICAgIDxtYXQtZm9ybS1maWVsZCBcbiAgICAgICAgICAgIFtuZ0NsYXNzXT1cImNsYXNzXCIgXG4gICAgICAgICAgICBbc3R5bGVdPVwic3R5bGVcIiBcbiAgICAgICAgICAgIChjaGFuZ2UpPVwiaGFuZGxlQ2hhbmdlKClcIlxuICAgICAgICAgICAgYXBwZWFyYW5jZT1cIm91dGxpbmVcIj5cbiAgICAgICAgICAgICAgPG1hdC1sYWJlbD57eyBsYWJlbCB9fTwvbWF0LWxhYmVsPlxuICAgICAgICAgICAgICA8aW5wdXQgIFtuYW1lXT1cIm5uYW1lXCIgW2lkXT1cIm5uYW1lXCIgWyhuZ01vZGVsKV09XCJ2YVwiIG1hdElucHV0IGF1dG9jb21wbGV0ZT1cImZhbHNlXCIgcGxhY2Vob2xkZXI9XCJ7eyBwbGFjZWhvbGRlciB9fVwiPlxuICAgICAgICAgICAgICAgICAgPG1hdC1pY29uIG1hdFN1ZmZpeD57eyBpY29uIH19PC9tYXQtaWNvbj5cbiAgICAgICAgICAgICAgICAgIDxtYXQtaGludD57eyBoaW50IH19PC9tYXQtaGludD5cbiAgICAgICAgICA8L21hdC1mb3JtLWZpZWxkPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPCEtLSBpZiBub3QgbmV3IHJvdyBhbmQgbm8gYm9vdHN0cmFwIGNvbHVtbiAtLT5cbiAgICAgIDxzcGFuICpuZ0lmPVwiYnNfcm93IT0nWScmJmJzX2NvbD09JydcIiBzdHlsZT1cIm1hcmdpbi1yaWdodDoyMHB4OyBcIj5cbiAgICAgICAgPHAgKm5nSWY9XCJ0b3BfbGFiZWw9PSdZJ1wiPnt7IGxhYmVsIH19PC9wPlxuICAgICAgICAgIDxtYXQtZm9ybS1maWVsZCBcbiAgICAgICAgICAgIFtuZ0NsYXNzXT1cImNsYXNzXCIgXG4gICAgICAgICAgICBbc3R5bGVdPVwic3R5bGVcIiBcbiAgICAgICAgICAgIChjaGFuZ2UpPVwiaGFuZGxlQ2hhbmdlKClcIlxuICAgICAgICAgICAgYXBwZWFyYW5jZT1cIm91dGxpbmVcIj5cbiAgICAgICAgICAgICAgPG1hdC1sYWJlbD57eyBsYWJlbCB9fTwvbWF0LWxhYmVsPlxuICAgICAgICAgICAgICA8aW5wdXQgIFtuYW1lXT1cIm5uYW1lXCIgW2lkXT1cIm5uYW1lXCIgIFsobmdNb2RlbCldPVwidmFcIiBtYXRJbnB1dCBhdXRvY29tcGxldGU9XCJmYWxzZVwiIHBsYWNlaG9sZGVyPVwie3sgcGxhY2Vob2xkZXIgfX1cIj5cbiAgICAgICAgICAgICAgICAgIDxtYXQtaWNvbiBtYXRTdWZmaXg+e3sgaWNvbiB9fTwvbWF0LWljb24+XG4gICAgICAgICAgICAgICAgICA8bWF0LWhpbnQ+e3sgaGludCB9fTwvbWF0LWhpbnQ+XG4gICAgICAgICAgPC9tYXQtZm9ybS1maWVsZD5cbiAgICAgICAgPC9zcGFuPlxuICAgIDwvc3Bhbj5cbiAgICA8IS0tIG1hdCBhcHBlYXJhbmNlIGlzIGZpbGwgLS0+ICAgIFxuICAgIDxzcGFuICpuZ0lmPVwiYXBwZWFyYW5jZT09J2ZpbGwnXCI+XG4gICAgICA8IS0tIGlmIG5ldyByb3cgLS0+XG4gICAgICA8ZGl2ICpuZ0lmPVwiYnNfcm93PT0nWSdcIiBjbGFzcz1cInJvd1wiPlxuICAgICAgICA8ZGl2IFtjbGFzc109XCJic19jb2xcIj5cbiAgICAgICAgICA8cCAqbmdJZj1cInRvcF9sYWJlbD09J1knXCI+e3sgbGFiZWwgfX08L3A+XG4gICAgICAgICAgPG1hdC1mb3JtLWZpZWxkIFxuICAgICAgICAgICAgW25nQ2xhc3NdPVwiY2xhc3NcIiBcbiAgICAgICAgICAgIFtzdHlsZV09XCJzdHlsZVwiIGFwcGVhcmFuY2U9XCJmaWxsXCI+XG4gICAgICAgICAgICAgIDxtYXQtbGFiZWw+e3sgbGFiZWwgfX08L21hdC1sYWJlbD5cbiAgICAgICAgICAgICAgICA8aW5wdXQgIFtuYW1lXT1cIm5uYW1lXCIgW2lkXT1cIm5uYW1lXCIgIFsobmdNb2RlbCldPVwidmFcIlxuICAgICAgICAgICAgICAgICAgWyhuZ01vZGVsKV09XCJ2YVwiIFxuICAgICAgICAgICAgICAgICAgKGNoYW5nZSk9XCJoYW5kbGVDaGFuZ2UoKVwiIGF1dG9jb21wbGV0ZT1cImZhbHNlXCJcbiAgICAgICAgICAgICAgICAgIG1hdElucHV0IFxuICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJ7eyBwbGFjZWhvbGRlciB9fVwiPlxuICAgICAgICAgICAgICAgICAgICA8bWF0LWljb24gbWF0U3VmZml4Pnt7IGljb24gfX08L21hdC1pY29uPlxuICAgICAgICAgICAgICAgICAgICA8bWF0LWhpbnQ+e3sgaGludCB9fTwvbWF0LWhpbnQ+XG4gICAgICAgICAgPC9tYXQtZm9ybS1maWVsZD5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwhLS0gaWYgbm90IG5ldyByb3cgYnV0IGhhcyBib290c3RyYXAgY29sdW1uLS0+XG4gICAgICAgICAgICA8ZGl2ICpuZ0lmPVwiYnNfcm93IT0nWScmJmJzX2NvbCE9JydcIj5cbiAgICAgICAgICAgICAgPGRpdiBbY2xhc3NdPVwiYnNfY29sXCI+XG4gICAgICAgICAgICAgICAgPHAgKm5nSWY9XCJ0b3BfbGFiZWw9PSdZJ1wiPnt7IGxhYmVsIH19PC9wPlxuICAgICAgICAgICAgICAgIDxtYXQtZm9ybS1maWVsZCBcbiAgICAgICAgICAgICAgICBbbmdDbGFzc109XCJjbGFzc1wiIFxuICAgICAgICAgICAgICAgIFtzdHlsZV09XCJzdHlsZVwiIGFwcGVhcmFuY2U9XCJmaWxsXCI+XG4gICAgICAgICAgICAgICAgICA8bWF0LWxhYmVsPnt7IGxhYmVsIH19PC9tYXQtbGFiZWw+XG4gICAgICAgICAgICAgICAgICAgIDxpbnB1dCAgW25hbWVdPVwibm5hbWVcIiBbaWRdPVwibm5hbWVcIiAgWyhuZ01vZGVsKV09XCJ2YVwiXG4gICAgICAgICAgICAgICAgICAgICAgKGNoYW5nZSk9XCJoYW5kbGVDaGFuZ2UoKVwiIGF1dG9jb21wbGV0ZT1cImZhbHNlXCJcbiAgICAgICAgICAgICAgICAgICAgICBtYXRJbnB1dCBcbiAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cInt7IHBsYWNlaG9sZGVyIH19XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8bWF0LWljb24gbWF0U3VmZml4Pnt7IGljb24gfX08L21hdC1pY29uPlxuICAgICAgICAgICAgICAgICAgICAgICAgPG1hdC1oaW50Pnt7IGhpbnQgfX08L21hdC1oaW50PlxuICAgICAgICAgICAgICA8L21hdC1mb3JtLWZpZWxkPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPHNwYW4gKm5nSWY9XCJic19yb3chPSdZJyYmYnNfY29sPT0nJ1wiIHN0eWxlPVwibWFyZ2luLXJpZ2h0OjIwcHg7XCIgPlxuICAgICAgICAgICAgICA8cCAqbmdJZj1cInRvcF9sYWJlbD09J1knXCI+e3sgbGFiZWwgfX08L3A+XG4gICAgICAgICAgICAgIDxtYXQtZm9ybS1maWVsZCBcbiAgICAgICAgICAgICAgW25nQ2xhc3NdPVwiY2xhc3NcIiBcbiAgICAgICAgICAgICAgW3N0eWxlXT1cInN0eWxlXCIgYXBwZWFyYW5jZT1cImZpbGxcIj5cbiAgICAgICAgICAgICAgICA8bWF0LWxhYmVsPnt7IGxhYmVsIH19PC9tYXQtbGFiZWw+XG4gICAgICAgICAgICAgICAgICA8aW5wdXQgIFtuYW1lXT1cIm5uYW1lXCIgW2lkXT1cIm5uYW1lXCIgIFsobmdNb2RlbCldPVwidmFcIlxuICAgICAgICAgICAgICAgICAgICBbKG5nTW9kZWwpXT1cInZhXCIgXG4gICAgICAgICAgICAgICAgICAgIChjaGFuZ2UpPVwiaGFuZGxlQ2hhbmdlKClcIiBhdXRvY29tcGxldGU9XCJmYWxzZVwiXG4gICAgICAgICAgICAgICAgICAgIG1hdElucHV0IFxuICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cInt7IHBsYWNlaG9sZGVyIH19XCI+XG4gICAgICAgICAgICAgICAgICAgICAgPG1hdC1pY29uIG1hdFN1ZmZpeD57eyBpY29uIH19PC9tYXQtaWNvbj5cbiAgICAgICAgICAgICAgICAgICAgICA8bWF0LWhpbnQ+e3sgaGludCB9fTwvbWF0LWhpbnQ+XG4gICAgICAgICAgICA8L21hdC1mb3JtLWZpZWxkPlxuICAgICAgICAgIDwvc3Bhbj5cblxuICAgICAgICA8L3NwYW4+Il19