import { Component, Input, Output, EventEmitter } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { MatFormFieldModule } from '@angular/material/form-field';
import { MatInputModule } from '@angular/material/input';
import { MatCheckboxModule } from '@angular/material/checkbox';
import * as i0 from "@angular/core";
import * as i1 from "../data.service";
export class SqlCheckboxComponent {
    ngAfterViewInit() {
        if (this.bs_row == 'Y') {
            this.bs_row_value = "row";
        }
        else {
            this.bs_row_value = 'none';
        }
        if (this.bs_col != '') {
            this.bs_col_value = this.bs_col;
        }
        else {
            this.bs_col_value = 'none';
        }
    }
    constructor(_dataService) {
        this._dataService = _dataService;
        this.value = '';
        this.value2 = false;
        this.fieldData = '';
        this.col = '';
        this.class = '';
        this.style = '';
        this.hint = '';
        this.icon = '';
        this.label = 'Label not set';
        this.placeholder = '';
        this.appearance = 'outline';
        this.bs_row = 'Y';
        this.bs_col = 'col-12';
        this.top_label = 'N';
        this.labelPosition = 'before';
        this.indeterminate = false;
        this.bs_row_value = 'row';
        this.bs_col_value = 'col-12';
        this.counter = 0;
        this.change = new EventEmitter();
        this.myObs = this._dataService.dataSubject.subscribe(d => {
            this.data = d;
            this.fieldData = this.data;
            this.value = this.fieldData[this.col];
            if (this.value == 'Y') {
                this.value2 = true;
            }
            else {
                this.value2 = false;
            }
            this.counter++;
        });
    }
    ngOnInit() {
    }
    handleChange() {
        this.fieldData['submit'] = 'N';
        if (this.value2 == true) {
            this.value = 'Y';
        }
        else {
            this.value = 'N';
        }
        this.fieldData[this.col] = this.value;
        this._dataService.pushNotification(this.fieldData);
    }
    ngOnDestroy() {
        //   this.myObs.unsubscribe();
    }
}
SqlCheckboxComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.3", ngImport: i0, type: SqlCheckboxComponent, deps: [{ token: i1.SQLDataService }], target: i0.ɵɵFactoryTarget.Component });
SqlCheckboxComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.3", type: SqlCheckboxComponent, isStandalone: true, selector: "sql-checkbox", inputs: { col: "col", data: "data", class: "class", style: "style", hint: "hint", icon: "icon", label: "label", placeholder: "placeholder", appearance: "appearance", bs_row: "bs_row", bs_col: "bs_col", top_label: "top_label", labelPosition: "labelPosition", indeterminate: "indeterminate" }, outputs: { change: "change" }, ngImport: i0, template: "<p>sql-checkbox works!</p>\n", styles: [""], dependencies: [{ kind: "ngmodule", type: CommonModule }, { kind: "ngmodule", type: FormsModule }, { kind: "ngmodule", type: MatFormFieldModule }, { kind: "ngmodule", type: MatInputModule }, { kind: "ngmodule", type: MatCheckboxModule }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.3", ngImport: i0, type: SqlCheckboxComponent, decorators: [{
            type: Component,
            args: [{ selector: 'sql-checkbox', standalone: true, imports: [CommonModule, FormsModule, MatFormFieldModule, MatInputModule, MatCheckboxModule], template: "<p>sql-checkbox works!</p>\n" }]
        }], ctorParameters: function () { return [{ type: i1.SQLDataService }]; }, propDecorators: { col: [{
                type: Input
            }], data: [{
                type: Input
            }], class: [{
                type: Input
            }], style: [{
                type: Input
            }], hint: [{
                type: Input
            }], icon: [{
                type: Input
            }], label: [{
                type: Input
            }], placeholder: [{
                type: Input
            }], appearance: [{
                type: Input
            }], bs_row: [{
                type: Input
            }], bs_col: [{
                type: Input
            }], top_label: [{
                type: Input
            }], labelPosition: [{
                type: Input
            }], indeterminate: [{
                type: Input
            }], change: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3FsLWNoZWNrYm94LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3NxbC1jb21wb25lbnRzL3NyYy9saWIvc3FsLWNoZWNrYm94L3NxbC1jaGVja2JveC5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9zcWwtY29tcG9uZW50cy9zcmMvbGliL3NxbC1jaGVja2JveC9zcWwtY2hlY2tib3guY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBVSxLQUFLLEVBQUUsTUFBTSxFQUFhLFlBQVksRUFBcUMsTUFBTSxlQUFlLENBQUM7QUFDN0gsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQy9DLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM3QyxPQUFPLEVBQUUsa0JBQWtCLEVBQXVCLE1BQU0sOEJBQThCLENBQUM7QUFDdkYsT0FBTyxFQUFZLGNBQWMsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBS25FLE9BQU8sRUFBQyxpQkFBaUIsRUFBQyxNQUFNLDRCQUE0QixDQUFDOzs7QUFTN0QsTUFBTSxPQUFPLG9CQUFvQjtJQTZCL0IsZUFBZTtRQUNiLElBQUksSUFBSSxDQUFDLE1BQU0sSUFBRSxHQUFHLEVBQUU7WUFDcEIsSUFBSSxDQUFDLFlBQVksR0FBQyxLQUFLLENBQUM7U0FDekI7YUFBTTtZQUNMLElBQUksQ0FBQyxZQUFZLEdBQUMsTUFBTSxDQUFDO1NBQzFCO1FBQ0QsSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFFLEVBQUUsRUFBRTtZQUNuQixJQUFJLENBQUMsWUFBWSxHQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7U0FDL0I7YUFBTTtZQUNMLElBQUksQ0FBQyxZQUFZLEdBQUMsTUFBTSxDQUFDO1NBQzFCO0lBQ0gsQ0FBQztJQUlELFlBQW9CLFlBQTRCO1FB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QkFBZCxLQUFLO2dCQUNHLE1BQU07c0JBQWQsS0FBSztnQkFDRyxTQUFTO3NCQUFqQixLQUFLO2dCQUNHLGFBQWE7c0JBQXJCLEtBQUs7Z0JBQ0csYUFBYTtzQkFBckIsS0FBSztnQkFPTixNQUFNO3NCQURMLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCwgSW5wdXQsIE91dHB1dCwgT25EZXN0cm95LCBFdmVudEVtaXR0ZXIsIE9uQ2hhbmdlcywgRG9DaGVjaywgQWZ0ZXJWaWV3SW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IEZvcm1zTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgTWF0Rm9ybUZpZWxkTW9kdWxlLCBNYXRGb3JtRmllbGRDb250cm9sIH0gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwvZm9ybS1maWVsZCc7XG5pbXBvcnQgeyBNYXRJbnB1dCwgTWF0SW5wdXRNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC9pbnB1dCc7XG5pbXBvcnQgeyBNYXRJY29uTW9kdWxlICB9ICBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC9pY29uJztcbmltcG9ydCB7IFNRTERhdGFTZXJ2aWNlIH0gZnJvbSAnLi4vZGF0YS5zZXJ2aWNlJztcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgTWF0UHNldWRvQ2hlY2tib3ggfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC9jb3JlJztcbmltcG9ydCB7TWF0Q2hlY2tib3hNb2R1bGV9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL2NoZWNrYm94JztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnc3FsLWNoZWNrYm94JyxcbiAgc3RhbmRhbG9uZTogdHJ1ZSxcbiAgaW1wb3J0czogW0NvbW1vbk1vZHVsZSwgRm9ybXNNb2R1bGUsIE1hdEZvcm1GaWVsZE1vZHVsZSwgTWF0SW5wdXRNb2R1bGUsIE1hdENoZWNrYm94TW9kdWxlXSxcbiAgdGVtcGxhdGVVcmw6ICcuL3NxbC1jaGVja2JveC5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWycuL3NxbC1jaGVja2JveC5jb21wb25lbnQuY3NzJ11cbn0pXG5leHBvcnQgY2xhc3MgU3FsQ2hlY2tib3hDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIEFmdGVyVmlld0luaXQsIE9uRGVzdHJveSAge1xuXG4gIHZhbHVlOiBhbnk9Jyc7XG4gIHZhbHVlMjogYW55PWZhbHNlO1xuICBmaWVsZERhdGE6IGFueSA9ICcnO1xuICBteU9icyE6IFN1YnNjcmlwdGlvbjtcblxuICBASW5wdXQoKSBjb2w6IHN0cmluZyA9ICcnO1xuICBASW5wdXQoKSBkYXRhOiBhbnk7XG4gIEBJbnB1dCgpIGNsYXNzOiBhbnkgPSAnJztcbiAgQElucHV0KCkgc3R5bGU6IGFueSA9ICcnO1xuICBASW5wdXQoKSBoaW50OiBzdHJpbmcgPSAnJztcbiAgQElucHV0KCkgaWNvbjogc3RyaW5nID0gJyc7XG4gIEBJbnB1dCgpIGxhYmVsOiBzdHJpbmcgPSAnTGFiZWwgbm90IHNldCc7XG4gIEBJbnB1dCgpIHBsYWNlaG9sZGVyOiBhbnkgPSAnJztcbiAgQElucHV0KCkgYXBwZWFyYW5jZTogc3RyaW5nID0gJ291dGxpbmUnO1xuICBASW5wdXQoKSBic19yb3c6IGFueSA9ICdZJztcbiAgQElucHV0KCkgYnNfY29sOiBhbnkgPSAnY29sLTEyJztcbiAgQElucHV0KCkgdG9wX2xhYmVsOiBhbnkgPSAnTic7XG4gIEBJbnB1dCgpIGxhYmVsUG9zaXRpb246IGFueSA9ICdiZWZvcmUnO1xuICBASW5wdXQoKSBpbmRldGVybWluYXRlID0gZmFsc2U7XG5cbiAgYnNfcm93X3ZhbHVlOiBhbnkgPSAncm93JztcbiAgYnNfY29sX3ZhbHVlOiBhbnkgPSAnY29sLTEyJztcblxuICBjb3VudGVyOiBudW1iZXIgPSAwO1xuICBAT3V0cHV0KClcbiAgY2hhbmdlOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpOyAgXG4gIFxuICBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgaWYgKHRoaXMuYnNfcm93PT0nWScpIHtcbiAgICAgIHRoaXMuYnNfcm93X3ZhbHVlPVwicm93XCI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuYnNfcm93X3ZhbHVlPSdub25lJztcbiAgICB9XG4gICAgaWYgKHRoaXMuYnNfY29sIT0nJykge1xuICAgICAgdGhpcy5ic19jb2xfdmFsdWU9dGhpcy5ic19jb2w7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuYnNfY29sX3ZhbHVlPSdub25lJztcbiAgICB9XG4gIH1cblxuICBmb3JtRGF0YTogYW55O1xuICBcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBfZGF0YVNlcnZpY2U6IFNRTERhdGFTZXJ2aWNlKSB7IFxuICAgIHRoaXMubXlPYnMgPSB0aGlzLl9kYXRhU2VydmljZS5kYXRhU3ViamVjdC5zdWJzY3JpYmUoZCA9PiB7XG4gICAgICB0aGlzLmRhdGE9ZDtcbiAgICAgIHRoaXMuZmllbGREYXRhID0gdGhpcy5kYXRhO1xuICAgICAgdGhpcy52YWx1ZSA9IHRoaXMuZmllbGREYXRhW3RoaXMuY29sXTtcbiAgICAgIGlmICh0aGlzLnZhbHVlPT0nWScpIHtcbiAgICAgICAgdGhpcy52YWx1ZTI9dHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMudmFsdWUyPWZhbHNlO1xuICAgICAgfVxuICAgICAgdGhpcy5jb3VudGVyKys7XG4gICAgfSlcbiAgfVxuXG4gIG5nT25Jbml0KCk6IHZvaWQge1xuXG4gIH1cblxuICBoYW5kbGVDaGFuZ2UoKSB7XG4gICAgIHRoaXMuZmllbGREYXRhWydzdWJtaXQnXT0nTic7XG4gICAgIGlmICh0aGlzLnZhbHVlMj09dHJ1ZSkge1xuICAgICAgICB0aGlzLnZhbHVlPSdZJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMudmFsdWU9J04nO1xuICAgICB9XG4gICAgIHRoaXMuZmllbGREYXRhW3RoaXMuY29sXT10aGlzLnZhbHVlO1xuICAgICB0aGlzLl9kYXRhU2VydmljZS5wdXNoTm90aWZpY2F0aW9uKHRoaXMuZmllbGREYXRhKTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCk6IHZvaWQge1xuIC8vICAgdGhpcy5teU9icy51bnN1YnNjcmliZSgpO1xuICB9XG59XG4iLCI8cD5zcWwtY2hlY2tib3ggd29ya3MhPC9wPlxuIl19