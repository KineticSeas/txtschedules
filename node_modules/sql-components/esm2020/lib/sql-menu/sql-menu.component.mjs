import { Component, Input, Output, EventEmitter, ContentChildren } from '@angular/core';
import { CommonModule } from '@angular/common';
import * as i0 from "@angular/core";
import * as i1 from "../data.service";
import * as i2 from "@angular/common";
export class SqlMenuComponent {
    constructor(_dataService) {
        this._dataService = _dataService;
        // format: is built from ContentChildren and Input Parameters
        this.format = { title: '', search: '', class: '', style: '', columns: [], buttons: [] };
        this.list = [];
        this.row_placeholder = 'row';
        this.col_placeholder = 'col-12';
        //-- Inputs
        this.title = ''; // title of the page.
        this.active = '0';
        this.use_parameters = 'N';
        this.data = ''; // Use Data if data comes from function.
        this.card = "Y"; // Show the form in a card Y/N
        this.card_class = '';
        this.card_style = '';
        this.container_class = 'container-fluid m-2 p-2'; // Class of the outer ng-container.
        this.container_style = ''; // Style of the outer ng-container.  
        this.search = 'TOP'; // Location of the search box.
        this.bs_row = 'Y'; // Y means add a bootstrap row.
        this.bs_col = 'col-sm-12 col-lg-12 col-xl-12'; // What bootstrap columns.
        this.table_class = 'table table-striped table-condensed'; // class of the table.
        this.table_style = ''; // style of the table.
        this.edit = 'Y'; // Add custom edit button.
        this.pagination = 'Y'; // Include pagination.
        this.pagesize = 25; // rows per page for pagination.
        this.id = '0'; // id for where clause.
        this.open = "Y"; // Does a closable list start open.
        this.class = 'table table-striped table-condensed'; // Class for the table container.
        this.style = ""; // Style for the table container.
        this.handler = 'default'; // what handler is used to process the form.
        this.menuClick = new EventEmitter();
        this.counter = 0;
        this.myObs = this._dataService.dataSubject.subscribe(d => {
            this.data = d;
        });
    }
    ngOnInit() {
        this.format.search = 'Y';
    }
    processClick(m) {
        this.list.forEach((e) => {
            e.active = 'N';
        });
        m.active = 'Y';
        this.menuClick.emit(m);
    }
    ngAfterViewInit() {
        this.format.title = this.title;
        this.format.class = this.class;
        this.format.style = this.style;
        this.format.pagination = this.pagination;
        this.format.pagesize = this.pagesize;
        if (this.bs_row == 'Y') {
            this.row_placeholder = "row";
        }
        else {
            this.row_placeholder = "none";
        }
        this.col_placeholder = this.bs_col;
        this.row_list.forEach((e) => {
            let template = { title: '', class: '', id: '', style: '', active: 'N' };
            if (e.nativeElement.nodeName == 'LI') {
                template.id = e.nativeElement.id;
                template.title = e.nativeElement.innerHTML;
            }
            if (e.nativeElement.className !== undefined) {
                template.class = e.nativeElement.className;
            }
            template.style = e.nativeElement.style.cssText;
            this.list.push(template);
        });
        this.list.forEach((e) => {
            console.log('e.id: ' + e.id + ' ' + ' active: ' + this.active);
            if (e.id == this.active) {
                e.active = 'Y';
            }
            else {
                e.active = 'N';
            }
        });
    }
    ngOnDestroy() {
        //    this.myObs.unsubscribe();
        //   this.myDataObs.unsubscribe();
    }
}
SqlMenuComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.3", ngImport: i0, type: SqlMenuComponent, deps: [{ token: i1.SQLDataService }], target: i0.ɵɵFactoryTarget.Component });
SqlMenuComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.3", type: SqlMenuComponent, isStandalone: true, selector: "sql-menu", inputs: { title: "title", active: "active", use_parameters: "use_parameters", data: "data", card: "card", card_class: "card_class", card_style: "card_style", container_class: "container_class", container_style: "container_style", search: "search", bs_row: "bs_row", bs_col: "bs_col", table_class: "table_class", table_style: "table_style", edit: "edit", pagination: "pagination", pagesize: "pagesize", id: "id", open: "open", class: "class", style: "style", handler: "handler" }, outputs: { menuClick: "menuClick" }, queries: [{ propertyName: "title_list", predicate: ["title"] }, { propertyName: "row_list", predicate: ["row"] }], ngImport: i0, template: "<div class=\"list-group\">\n    <button *ngIf=\"title!=''\" class=\"list-group-item list-group-item-action list-group-item-dark\">{{ title }}</button>\n    <ng-container *ngFor=\"let m of list\">\n        <li (click)=\"processClick(m)\" *ngIf=\"m?.active!=='Y'\" \n        class=\"list-group-item d-flex justify-content-between align-items-center\">{{ m.title }}\n                <span *ngIf=\"m.badge!==''\" class=\"badge bg-primary rounded-pill\">{{ m.badge }}</span></li>\n        <li (click)=\"processClick(m)\" *ngIf=\"m?.active==='Y'\" \n        class=\"list-group-item d-flex justify-content-between align-items-center active\">{{ m.title }}\n                <span *ngIf=\"m.badge!==''\" class=\"badge bg-primary rounded-pill\">{{ m.badge }}</span></li>\n    </ng-container>\n</div>", styles: [""], dependencies: [{ kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.3", ngImport: i0, type: SqlMenuComponent, decorators: [{
            type: Component,
            args: [{ selector: 'sql-menu', standalone: true, imports: [CommonModule], template: "<div class=\"list-group\">\n    <button *ngIf=\"title!=''\" class=\"list-group-item list-group-item-action list-group-item-dark\">{{ title }}</button>\n    <ng-container *ngFor=\"let m of list\">\n        <li (click)=\"processClick(m)\" *ngIf=\"m?.active!=='Y'\" \n        class=\"list-group-item d-flex justify-content-between align-items-center\">{{ m.title }}\n                <span *ngIf=\"m.badge!==''\" class=\"badge bg-primary rounded-pill\">{{ m.badge }}</span></li>\n        <li (click)=\"processClick(m)\" *ngIf=\"m?.active==='Y'\" \n        class=\"list-group-item d-flex justify-content-between align-items-center active\">{{ m.title }}\n                <span *ngIf=\"m.badge!==''\" class=\"badge bg-primary rounded-pill\">{{ m.badge }}</span></li>\n    </ng-container>\n</div>" }]
        }], ctorParameters: function () { return [{ type: i1.SQLDataService }]; }, propDecorators: { title_list: [{
                type: ContentChildren,
                args: ['title']
            }], row_list: [{
                type: ContentChildren,
                args: ['row']
            }], title: [{
                type: Input
            }], active: [{
                type: Input
            }], use_parameters: [{
                type: Input
            }], data: [{
                type: Input
            }], card: [{
                type: Input
            }], card_class: [{
                type: Input
            }], card_style: [{
                type: Input
            }], container_class: [{
                type: Input
            }], container_style: [{
                type: Input
            }], search: [{
                type: Input
            }], bs_row: [{
                type: Input
            }], bs_col: [{
                type: Input
            }], table_class: [{
                type: Input
            }], table_style: [{
                type: Input
            }], edit: [{
                type: Input
            }], pagination: [{
                type: Input
            }], pagesize: [{
                type: Input
            }], id: [{
                type: Input
            }], open: [{
                type: Input
            }], class: [{
                type: Input
            }], style: [{
                type: Input
            }], handler: [{
                type: Input
            }], menuClick: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,