import { Component, Input } from '@angular/core';
import { CommonModule } from '@angular/common';
import * as i0 from "@angular/core";
import * as i1 from "../data.service";
export class PostInsertTriggerComponent {
    constructor(_dataService) {
        this._dataService = _dataService;
        this.name = 'pre-insert';
        this.sql = '';
        this.order = '0';
    }
    ngOnDestroy() {
        //   this.myObs.unsubscribe();
    }
    ngOnChanges(changes) {
    }
    registerService() {
        let count = 0;
        this.myObs = this._dataService.dataSubject.subscribe(d => {
            this.data = d;
            if (this.data.triggers === undefined) {
                let t = [];
                this.data.triggers = t;
            }
            count = 0;
            this.data.triggers.forEach((element) => {
                if (element.type == 'post-insert-trigger' && element.name == this.name) {
                    count++;
                }
            });
            if (count == 0) {
                let tr = { type: 'post-insert-trigger', name: this.name, sql: this.sql, order: this.order };
                this.data.triggers.push(tr);
                this._dataService.dataSubject.next(this.data);
            }
        });
    }
    ngAfterViewInit() {
        setTimeout(() => {
            this.registerService();
        }, 1000);
    }
}
PostInsertTriggerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.3", ngImport: i0, type: PostInsertTriggerComponent, deps: [{ token: i1.SQLDataService }], target: i0.ɵɵFactoryTarget.Component });
PostInsertTriggerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.3", type: PostInsertTriggerComponent, isStandalone: true, selector: "post-insert-trigger", inputs: { name: "name", sql: "sql", order: "order" }, usesOnChanges: true, ngImport: i0, template: "", styles: [""], dependencies: [{ kind: "ngmodule", type: CommonModule }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.3", ngImport: i0, type: PostInsertTriggerComponent, decorators: [{
            type: Component,
            args: [{ selector: 'post-insert-trigger', standalone: true, imports: [CommonModule], template: "" }]
        }], ctorParameters: function () { return [{ type: i1.SQLDataService }]; }, propDecorators: { name: [{
                type: Input
            }], sql: [{
                type: Input
            }], order: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9zdC1pbnNlcnQtdHJpZ2dlci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9zcWwtY29tcG9uZW50cy9zcmMvbGliL3Bvc3QtaW5zZXJ0LXRyaWdnZXIvcG9zdC1pbnNlcnQtdHJpZ2dlci5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9zcWwtY29tcG9uZW50cy9zcmMvbGliL3Bvc3QtaW5zZXJ0LXRyaWdnZXIvcG9zdC1pbnNlcnQtdHJpZ2dlci5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBc0QsTUFBTSxlQUFlLENBQUM7QUFDckcsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDOzs7QUFZL0MsTUFBTSxPQUFPLDBCQUEwQjtJQVFyQyxZQUFvQixZQUE0QjtRQUE1QixpQkFBWSxHQUFaLFlBQVksQ0FBZ0I7UUFOdkMsU0FBSSxHQUFRLFlBQVksQ0FBQztRQUN6QixRQUFHLEdBQVEsRUFBRSxDQUFDO1FBQ2QsVUFBSyxHQUFRLEdBQUcsQ0FBQztJQU0xQixDQUFDO0lBRUQsV0FBVztRQUNaLDhCQUE4QjtJQUM3QixDQUFDO0lBRUQsV0FBVyxDQUFDLE9BQXNCO0lBRWxDLENBQUM7SUFFRCxlQUFlO1FBRWIsSUFBSSxLQUFLLEdBQVMsQ0FBQyxDQUFDO1FBQ3BCLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFFO1lBQ3ZELElBQUksQ0FBQyxJQUFJLEdBQUMsQ0FBQyxDQUFDO1lBQ1osSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsS0FBRyxTQUFTLEVBQUU7Z0JBQ2xDLElBQUksQ0FBQyxHQUFRLEVBQUUsQ0FBQztnQkFDaEIsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEdBQUMsQ0FBQyxDQUFDO2FBQ3RCO1lBQ0QsS0FBSyxHQUFDLENBQUMsQ0FBQztZQUNSLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLE9BQVksRUFBRSxFQUFFO2dCQUMxQyxJQUFJLE9BQU8sQ0FBQyxJQUFJLElBQUUscUJBQXFCLElBQUUsT0FBTyxDQUFDLElBQUksSUFBRSxJQUFJLENBQUMsSUFBSSxFQUFFO29CQUM3RCxLQUFLLEVBQUUsQ0FBQztpQkFDWjtZQUNILENBQUMsQ0FBQyxDQUFDO1lBQ0YsSUFBSSxLQUFLLElBQUUsQ0FBQyxFQUFFO2dCQUNiLElBQUksRUFBRSxHQUFRLEVBQUUsSUFBSSxFQUFFLHFCQUFxQixFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSSxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsR0FBRyxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUE7Z0JBQ2hHLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztnQkFDM0IsSUFBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQzthQUNoRDtRQUNILENBQUMsQ0FBQyxDQUFBO0lBRUosQ0FBQztJQUVELGVBQWU7UUFDYixVQUFVLENBQUMsR0FBRyxFQUFFO1lBQ2QsSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDO1FBQ3pCLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUNYLENBQUM7O3VIQWhEVSwwQkFBMEI7MkdBQTFCLDBCQUEwQiwwSkNidkMsRUFBQSx5RERTWSxZQUFZOzJGQUlYLDBCQUEwQjtrQkFQdEMsU0FBUzsrQkFDRSxxQkFBcUIsY0FDbkIsSUFBSSxXQUNQLENBQUMsWUFBWSxDQUFDO3FHQU1kLElBQUk7c0JBQVosS0FBSztnQkFDRyxHQUFHO3NCQUFYLEtBQUs7Z0JBQ0csS0FBSztzQkFBYixLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgQWZ0ZXJWaWV3SW5pdCwgT25DaGFuZ2VzLCBPbkRlc3Ryb3ksIFNpbXBsZUNoYW5nZXMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBTUUxEYXRhU2VydmljZSB9IGZyb20gJy4uL2RhdGEuc2VydmljZSc7IFxuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XG5cblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAncG9zdC1pbnNlcnQtdHJpZ2dlcicsXG4gIHN0YW5kYWxvbmU6IHRydWUsXG4gIGltcG9ydHM6IFtDb21tb25Nb2R1bGVdLFxuICB0ZW1wbGF0ZVVybDogJy4vcG9zdC1pbnNlcnQtdHJpZ2dlci5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWycuL3Bvc3QtaW5zZXJ0LXRyaWdnZXIuY29tcG9uZW50LmNzcyddXG59KVxuZXhwb3J0IGNsYXNzIFBvc3RJbnNlcnRUcmlnZ2VyQ29tcG9uZW50IGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCwgT25DaGFuZ2VzLCBPbkRlc3Ryb3kge1xuXG4gIEBJbnB1dCgpIG5hbWU6IGFueSA9ICdwcmUtaW5zZXJ0JztcbiAgQElucHV0KCkgc3FsOiBhbnkgPSAnJztcbiAgQElucHV0KCkgb3JkZXI6IGFueSA9ICcwJztcbiAgbXlPYnMhOiBTdWJzY3JpcHRpb247XG4gIGRhdGE6IGFueTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIF9kYXRhU2VydmljZTogU1FMRGF0YVNlcnZpY2UpIHtcblxuICB9XG5cbiAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gLy8gICB0aGlzLm15T2JzLnVuc3Vic2NyaWJlKCk7XG4gIH1cblxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZCB7XG4gICAgXG4gIH1cblxuICByZWdpc3RlclNlcnZpY2UoKSB7XG5cbiAgICBsZXQgY291bnQ6IG51bWJlcj0wO1xuICAgIHRoaXMubXlPYnMgPSB0aGlzLl9kYXRhU2VydmljZS5kYXRhU3ViamVjdC5zdWJzY3JpYmUoZCA9PiB7XG4gICAgICB0aGlzLmRhdGE9ZDtcbiAgICAgIGlmICh0aGlzLmRhdGEudHJpZ2dlcnM9PT11bmRlZmluZWQpIHtcbiAgICAgICAgbGV0IHQ6IGFueSA9IFtdO1xuICAgICAgICB0aGlzLmRhdGEudHJpZ2dlcnM9dDtcbiAgICAgIH1cbiAgICAgIGNvdW50PTA7XG4gICAgICB0aGlzLmRhdGEudHJpZ2dlcnMuZm9yRWFjaCgoZWxlbWVudDogYW55KSA9PiB7XG4gICAgICAgIGlmIChlbGVtZW50LnR5cGU9PSdwb3N0LWluc2VydC10cmlnZ2VyJyYmZWxlbWVudC5uYW1lPT10aGlzLm5hbWUpIHtcbiAgICAgICAgICAgICBjb3VudCsrO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgICBpZiAoY291bnQ9PTApIHtcbiAgICAgICAgbGV0IHRyOiBhbnkgPSB7IHR5cGU6ICdwb3N0LWluc2VydC10cmlnZ2VyJywgbmFtZTogdGhpcy5uYW1lLCBzcWw6IHRoaXMuc3FsLCBvcmRlcjogdGhpcy5vcmRlciB9XG4gICAgICAgIHRoaXMuZGF0YS50cmlnZ2Vycy5wdXNoKHRyKTtcbiAgICAgICAgIHRoaXMuX2RhdGFTZXJ2aWNlLmRhdGFTdWJqZWN0Lm5leHQodGhpcy5kYXRhKTtcbiAgICAgIH1cbiAgICB9KVxuXG4gIH1cblxuICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZCB7XG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICB0aGlzLnJlZ2lzdGVyU2VydmljZSgpOyAgXG4gICAgfSwgMTAwMCk7XG4gIH1cbiAgXG59IiwiIl19