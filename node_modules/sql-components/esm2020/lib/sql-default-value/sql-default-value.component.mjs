import { Component, Input } from '@angular/core';
import { CommonModule } from '@angular/common';
import * as i0 from "@angular/core";
import * as i1 from "../data.service";
export class SqlDefaultValueComponent {
    constructor(_dataService) {
        this._dataService = _dataService;
        this.col = '';
        this.value = '';
        this.myObs = this._dataService.dataSubject.subscribe(d => {
            this.data = d;
        });
    }
    ngAfterViewInit() {
        console.log('sql-default-value');
        console.log(this.value);
        console.log(this.col);
        setTimeout(() => {
            this.data[this.col] = this.value;
            console.log('sql-default-value: timer');
            console.log(this.data);
            this._dataService.dataSubject.next(this.data);
        }, 1000);
    }
    ngOnDestroy() {
        this.myObs.unsubscribe();
    }
}
SqlDefaultValueComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.3", ngImport: i0, type: SqlDefaultValueComponent, deps: [{ token: i1.SQLDataService }], target: i0.ɵɵFactoryTarget.Component });
SqlDefaultValueComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.3", type: SqlDefaultValueComponent, isStandalone: true, selector: "sql-default-value", inputs: { col: "col", value: "value" }, ngImport: i0, template: "", styles: [""], dependencies: [{ kind: "ngmodule", type: CommonModule }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.3", ngImport: i0, type: SqlDefaultValueComponent, decorators: [{
            type: Component,
            args: [{ selector: 'sql-default-value', standalone: true, imports: [CommonModule], template: "" }]
        }], ctorParameters: function () { return [{ type: i1.SQLDataService }]; }, propDecorators: { col: [{
                type: Input
            }], value: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3FsLWRlZmF1bHQtdmFsdWUuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvc3FsLWNvbXBvbmVudHMvc3JjL2xpYi9zcWwtZGVmYXVsdC12YWx1ZS9zcWwtZGVmYXVsdC12YWx1ZS5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9zcWwtY29tcG9uZW50cy9zcmMvbGliL3NxbC1kZWZhdWx0LXZhbHVlL3NxbC1kZWZhdWx0LXZhbHVlLmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQVUsS0FBSyxFQUFzRSxNQUFNLGVBQWUsQ0FBQztBQUM3SCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7OztBQWdCL0MsTUFBTSxPQUFPLHdCQUF3QjtJQVNuQyxZQUFvQixZQUE0QjtRQUE1QixpQkFBWSxHQUFaLFlBQVksQ0FBZ0I7UUFQdkMsUUFBRyxHQUFRLEVBQUUsQ0FBQztRQUNkLFVBQUssR0FBUSxFQUFFLENBQUM7UUFPdkIsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUU7WUFDdkQsSUFBSSxDQUFDLElBQUksR0FBQyxDQUFDLENBQUM7UUFDZCxDQUFDLENBQUMsQ0FBQTtJQUNKLENBQUM7SUFFRCxlQUFlO1FBQ2IsT0FBTyxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFBO1FBQ2hDLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFBO1FBQ3ZCLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFBO1FBQ3JCLFVBQVUsQ0FBQyxHQUFHLEVBQUU7WUFDWixJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDO1lBQy9CLE9BQU8sQ0FBQyxHQUFHLENBQUMsMEJBQTBCLENBQUMsQ0FBQTtZQUN2QyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtZQUN0QixJQUFJLENBQUMsWUFBWSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2xELENBQUMsRUFBQyxJQUFJLENBQUMsQ0FBQztJQUNWLENBQUM7SUFFRCxXQUFXO1FBQ1QsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUMzQixDQUFDOztxSEE3QlUsd0JBQXdCO3lHQUF4Qix3QkFBd0IscUhDakJyQyxFQUFBLHlERGFZLFlBQVk7MkZBSVgsd0JBQXdCO2tCQVBwQyxTQUFTOytCQUNFLG1CQUFtQixjQUNqQixJQUFJLFdBQ1AsQ0FBQyxZQUFZLENBQUM7cUdBTWQsR0FBRztzQkFBWCxLQUFLO2dCQUNHLEtBQUs7c0JBQWIsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgT25Jbml0LCBJbnB1dCwgT3V0cHV0LCBPbkRlc3Ryb3ksIEV2ZW50RW1pdHRlciwgT25DaGFuZ2VzLCBEb0NoZWNrLCBBZnRlclZpZXdJbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgRm9ybXNNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBNYXRGb3JtRmllbGRNb2R1bGUsIE1hdEZvcm1GaWVsZENvbnRyb2wgfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC9mb3JtLWZpZWxkJztcbmltcG9ydCB7IE1hdElucHV0LCBNYXRJbnB1dE1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL2lucHV0JztcbmltcG9ydCB7IE1hdEljb25Nb2R1bGUgIH0gIGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL2ljb24nO1xuaW1wb3J0IHsgU1FMRGF0YVNlcnZpY2UgfSBmcm9tICcuLi9kYXRhLnNlcnZpY2UnO1xuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XG5cblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnc3FsLWRlZmF1bHQtdmFsdWUnLFxuICBzdGFuZGFsb25lOiB0cnVlLFxuICBpbXBvcnRzOiBbQ29tbW9uTW9kdWxlXSxcbiAgdGVtcGxhdGVVcmw6ICcuL3NxbC1kZWZhdWx0LXZhbHVlLmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4vc3FsLWRlZmF1bHQtdmFsdWUuY29tcG9uZW50LmNzcyddXG59KVxuZXhwb3J0IGNsYXNzIFNxbERlZmF1bHRWYWx1ZUNvbXBvbmVudCBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQsIE9uRGVzdHJveSB7XG5cbiAgQElucHV0KCkgY29sOiBhbnkgPSAnJztcbiAgQElucHV0KCkgdmFsdWU6IGFueSA9ICcnO1xuXG4gIG15T2JzITogU3Vic2NyaXB0aW9uO1xuICBkYXRhOiBhbnk7XG5cbiAgZm9ybURhdGE6IGFueTtcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBfZGF0YVNlcnZpY2U6IFNRTERhdGFTZXJ2aWNlKSB7IFxuICAgIHRoaXMubXlPYnMgPSB0aGlzLl9kYXRhU2VydmljZS5kYXRhU3ViamVjdC5zdWJzY3JpYmUoZCA9PiB7XG4gICAgICB0aGlzLmRhdGE9ZDtcbiAgICB9KVxuICB9XG5cbiAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQge1xuICAgIGNvbnNvbGUubG9nKCdzcWwtZGVmYXVsdC12YWx1ZScpXG4gICAgY29uc29sZS5sb2codGhpcy52YWx1ZSlcbiAgICBjb25zb2xlLmxvZyh0aGlzLmNvbClcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgdGhpcy5kYXRhW3RoaXMuY29sXT10aGlzLnZhbHVlO1xuICAgICAgICBjb25zb2xlLmxvZygnc3FsLWRlZmF1bHQtdmFsdWU6IHRpbWVyJylcbiAgICAgICAgY29uc29sZS5sb2codGhpcy5kYXRhKVxuICAgICAgICB0aGlzLl9kYXRhU2VydmljZS5kYXRhU3ViamVjdC5uZXh0KHRoaXMuZGF0YSk7XG4gICAgfSwxMDAwKTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCk6IHZvaWQge1xuICAgIHRoaXMubXlPYnMudW5zdWJzY3JpYmUoKTtcbiAgfVxuXG59XG4iLCIiXX0=