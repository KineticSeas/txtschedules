import { Injectable, Inject } from '@angular/core';
import { BehaviorSubject, of } from 'rxjs';
import * as CryptoJS from 'crypto-js';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
export class SQLDataService {
    constructor(http, webserver) {
        this.http = http;
        this.webserver = webserver;
        this.dataSubject = new BehaviorSubject({});
        this.pageSubject = new BehaviorSubject({});
        this.paramSubject = new BehaviorSubject({ page: "AAA", id: "", id2: "", id3: "", id_col: "id", id2_col: "", id3_col: "" });
        this.routerSubject = new BehaviorSubject({});
        this.containerSubject = new BehaviorSubject({ id: "", id2: "", id3: "", id_col: "id", id2_col: "", id3_col: "" });
        this.dataValue = { id: "hello", id2: "world" };
        this.TheSecret = "hide-triggers";
        this.counter = 0;
        if (webserver === '' || webserver === undefined) {
            alert("Missing Provider in module.ts. It should include: { provide: WEBSERVER, useValue: 'https://example.com/api/' }");
        }
        else {
            this.base = webserver;
        }
        this.url = this.base + 'sqlcomponents.php';
    }
    getLocalStorage() {
        //
        if (localStorage.getItem('uid') === null) {
            this.uid = "0";
        }
        else {
            this.uid = localStorage.getItem('uid');
        }
        if (localStorage.getItem('un') === null) {
            this.un = "";
        }
        else {
            this.un = localStorage.getItem('un');
        }
        if (localStorage.getItem('role') === null) {
            this.role = "";
        }
        else {
            this.role = localStorage.getItem('role');
        }
    }
    getSelect(sql, params) {
        this.getLocalStorage();
        const data = {
            "q": 'getselect',
            "sql": sql,
            "parameters": params,
            "uid": this.uid
        };
        this.t = this.http.post(this.base + "sqlcomponents.php", data);
        return this.t;
    }
    getColumns(sql, params) {
        this.getLocalStorage();
        const data = {
            "q": 'getcolumns',
            "sql": sql,
            "parameters": params,
            "uid": this.uid
        };
        this.t = this.http.post(this.base + "sqlcomponents.php", data);
        return this.t;
    }
    pingParameters(path) {
        let output = { page: '', id: '', id2: '', id3: '' };
        let j = path.split('/');
        if (j[1] !== undefined) {
            output.page = j[1];
        }
        if (j[2] !== undefined) {
            output.id = j[2];
        }
        if (j[3] !== undefined) {
            output.id2 = j[3];
        }
        if (j[4] !== undefined) {
            output.id3 = j[4];
        }
        return of(output);
    }
    getSQL(sql, id) {
        this.counter++;
        this.getLocalStorage();
        const data = {
            "counter": this.counter,
            "q": "getsql",
            "parameters": id,
            "sql": sql,
            "uid": this.uid,
        };
        if (this.counter != 2) {
            this.t = this.http.post(this.base + "sqlcomponents.php", data);
            return this.t;
        }
    }
    getMenu(sql, id) {
        this.getLocalStorage();
        const data = {
            "q": "getmenu",
            "parameters": id,
            "sql": sql,
            "uid": this.uid
        };
        this.t = this.http.post(this.base + "sqlcomponents.php", data);
        return this.t;
    }
    postSQL(formData) {
        var CryptoJSAesJson = {
            stringify: function (cipherParams) {
                var j = { ct: cipherParams.ciphertext.toString(CryptoJS.enc.Base64) };
                if (cipherParams.iv)
                    j.iv = cipherParams.iv.toString();
                if (cipherParams.salt)
                    j.s = cipherParams.salt.toString();
                return JSON.stringify(j);
            },
            parse: function (jsonStr) {
                var j = JSON.parse(jsonStr);
                var cipherParams = CryptoJS.lib.CipherParams.create({
                    ciphertext: CryptoJS.enc.Base64.parse(j.ct),
                });
                if (j.iv)
                    cipherParams.iv = CryptoJS.enc.Hex.parse(j.iv);
                if (j.s)
                    cipherParams.salt = CryptoJS.enc.Hex.parse(j.s);
                return cipherParams;
            },
        };
        this.getLocalStorage();
        console.log(formData.triggers);
        if (formData.triggers !== undefined) {
            let triggers = formData.triggers;
            let k = CryptoJS.AES.encrypt(JSON.stringify(triggers), this.TheSecret, { format: CryptoJSAesJson }).toString();
            formData.triggers = k;
        }
        const data = {
            "q": "postform",
            "data": formData,
            "uid": this.uid
        };
        this.t = this.http.post(this.base + "sqlcomponents.php", data);
        return this.t;
    }
    postDelete(formData) {
        var CryptoJSAesJson = {
            stringify: function (cipherParams) {
                var j = { ct: cipherParams.ciphertext.toString(CryptoJS.enc.Base64) };
                if (cipherParams.iv)
                    j.iv = cipherParams.iv.toString();
                if (cipherParams.salt)
                    j.s = cipherParams.salt.toString();
                return JSON.stringify(j);
            },
            parse: function (jsonStr) {
                var j = JSON.parse(jsonStr);
                var cipherParams = CryptoJS.lib.CipherParams.create({
                    ciphertext: CryptoJS.enc.Base64.parse(j.ct),
                });
                if (j.iv)
                    cipherParams.iv = CryptoJS.enc.Hex.parse(j.iv);
                if (j.s)
                    cipherParams.salt = CryptoJS.enc.Hex.parse(j.s);
                return cipherParams;
            },
        };
        this.getLocalStorage();
        console.log(formData.triggers);
        if (formData.triggers !== undefined) {
            let triggers = formData.triggers;
            let k = CryptoJS.AES.encrypt(JSON.stringify(triggers), this.TheSecret, { format: CryptoJSAesJson }).toString();
            formData.triggers = k;
        }
        const data = {
            "q": "postdelete",
            "data": formData,
            "uid": this.uid
        };
        this.t = this.http.post(this.base + "sqlcomponents.php", data);
        return this.t;
    }
    getData(path, id, id2, id3, id_col, id_col2, id_col3) {
        this.getLocalStorage();
        const data = {
            "q": path,
            "id": id,
            "id2": id2,
            "id3": id3,
            "id_col": id_col,
            "id2_col": id_col2,
            "id3_col": id_col3,
            "uid": this.uid
        };
        this.t = this.http.post(this.url, data);
        return this.t;
    }
    postForm(formData) {
        var CryptoJSAesJson = {
            stringify: function (cipherParams) {
                var j = { ct: cipherParams.ciphertext.toString(CryptoJS.enc.Base64) };
                if (cipherParams.iv)
                    j.iv = cipherParams.iv.toString();
                if (cipherParams.salt)
                    j.s = cipherParams.salt.toString();
                return JSON.stringify(j);
            },
            parse: function (jsonStr) {
                var j = JSON.parse(jsonStr);
                var cipherParams = CryptoJS.lib.CipherParams.create({
                    ciphertext: CryptoJS.enc.Base64.parse(j.ct),
                });
                if (j.iv)
                    cipherParams.iv = CryptoJS.enc.Hex.parse(j.iv);
                if (j.s)
                    cipherParams.salt = CryptoJS.enc.Hex.parse(j.s);
                return cipherParams;
            },
        };
        this.getLocalStorage();
        let k = CryptoJS.AES.encrypt(JSON.stringify(formData), this.TheSecret, { format: CryptoJSAesJson }).toString();
        const data = {
            "q": "postform",
            "data": k,
            "uid": this.uid
        };
        this.t = this.http.post(this.url, data);
        return this.t;
    }
    getUser() {
        this.getLocalStorage();
        const data = {
            "q": "vertical-menu",
            "uid": this.uid,
            "role": this.role
        };
        this.t = this.http.post("https://myna-api.com/api/u.php", data);
        return this.t;
    }
    getForm(table_name, parameters) {
        this.getLocalStorage();
        const data = {
            "q": "getform",
            "table": table_name,
            "parameters": parameters
        };
        this.t = this.http.post(this.base + "sqlcomponents.php", data);
        return this.t;
    }
    pushNotification(data) {
        this.dataSubject.next(data);
    }
    pushPage(data) {
        this.pageSubject.next(data);
    }
    getCalendar(sql, params) {
        this.getLocalStorage();
        const data = {
            "q": 'calendar',
            "sql": sql,
            "parameters": params,
            "uid": this.uid
        };
        this.t = this.http.post(this.base + "sqlcomponents.php", data);
        return this.t;
    }
}
SQLDataService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.3", ngImport: i0, type: SQLDataService, deps: [{ token: i1.HttpClient }, { token: 'WEBSERVER' }], target: i0.ɵɵFactoryTarget.Injectable });
SQLDataService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.3", ngImport: i0, type: SQLDataService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.3", ngImport: i0, type: SQLDataService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{
                    type: Inject,
                    args: ['WEBSERVER']
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,