import { Component, Input, Output, EventEmitter, ContentChildren } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { Ng2SearchPipeModule } from 'ng2-search-filter';
import { NgxTablePaginationModule } from 'ngx-table-pagination';
import * as i0 from "@angular/core";
import * as i1 from "../data.service";
import * as i2 from "@angular/common";
export class SqlDataPreview3Component {
    constructor(_dataService) {
        this._dataService = _dataService;
        this.format = { title: '', search: '', class: '', style: '', left_column: [], center_column: [], right_column: [], buttons: [] };
        this.data = '';
        this.use_parameters = 'N';
        this.function = '';
        this.sql = '';
        this.card = "Y";
        this.card_class = '';
        this.card_style = '';
        this.container_class = 'container-fluid m-2 p-2';
        this.container_style = '';
        this.closable = "N";
        this.bs_row = 'N';
        this.bs_col = '';
        this.list_class = 'table table-striped table-condensed';
        this.list_style = '';
        this.title = 'Title Not Set';
        this.id = '0';
        this.id2 = '0';
        this.id3 = '0';
        this.left = 'col-6';
        this.right = 'col-6';
        this.class = '';
        this.style = "";
        this.row_click = new EventEmitter();
        this.parameters = { page: '', id: '', id2: '', id3: '' };
        this.last_parameters = { page: 'xxx', id: 'xxx', id2: 'xxx', id3: 'xxx' };
        this.counter = 0;
        this.page = '';
    }
    ngOnInit() {
    }
    rowClick(m) {
        this.row_click.emit(m);
    }
    ngAfterViewInit() {
        if (this.use_parameters === 'Y') {
            this._dataService.paramSubject.subscribe(d => {
                this.parameters = d;
                this._dataService.getSQL(this.sql, this.parameters).subscribe((data) => {
                    this.list = data;
                    this.list.forEach(function (value) {
                        value.active = 'N';
                    });
                });
            });
        }
        if (this.use_parameters === 'N') {
            this.parameters.page = this.page;
            this.parameters.id = this.id;
            this.parameters.id2 = this.id2;
            this.parameters.id3 = this.id3;
            console.log(this.parameters);
            this._dataService.getSQL(this.sql, this.parameters).subscribe((data) => {
                if (data[0] !== undefined) {
                    this.list = data[0];
                }
            });
        }
        this.format.title = this.title;
        this.format.class = this.class;
        this.format.style = this.style;
        this.left_row_list.forEach((e) => {
            let left_column_template = { column_name: '', class: '', type: '', style: '', title: '', value: '' };
            if (e.nativeElement.nodeName == 'TH') {
                left_column_template.type = "data";
                left_column_template.value = e.nativeElement.id;
                left_column_template.title = e.nativeElement.innerHTML;
            }
            if (e.nativeElement.nodeName == 'TD') {
                left_column_template.type = "boilerplate";
                left_column_template.value = '';
                left_column_template.title = e.nativeElement.innerHTML;
            }
            if (e.nativeElement.className !== undefined) {
                left_column_template.class = e.nativeElement.className;
            }
            left_column_template.style = e.nativeElement.style.cssText;
            this.format.left_column.push(left_column_template);
        });
        this.center_row_list.forEach((e) => {
            let center_column_template = { column_name: '', class: '', type: '', style: '', title: '', value: '' };
            if (e.nativeElement.nodeName == 'TH') {
                center_column_template.type = "data";
                center_column_template.value = e.nativeElement.id;
                center_column_template.title = e.nativeElement.innerHTML;
            }
            if (e.nativeElement.nodeName == 'TD') {
                center_column_template.type = "boilerplate";
                center_column_template.value = '';
                center_column_template.title = e.nativeElement.innerHTML;
            }
            if (e.nativeElement.className !== undefined) {
                center_column_template.class = e.nativeElement.className;
            }
            center_column_template.style = e.nativeElement.style.cssText;
            this.format.center_column.push(center_column_template);
        });
        this.right_row_list.forEach((e) => {
            let right_column_template = { column_name: '', class: '', type: '', style: '', title: '', value: '' };
            if (e.nativeElement.nodeName == 'TH') {
                right_column_template.type = "data";
                right_column_template.value = e.nativeElement.id;
                right_column_template.title = e.nativeElement.innerHTML;
            }
            if (e.nativeElement.nodeName == 'TD') {
                right_column_template.type = "boilerplate";
                right_column_template.value = '';
                right_column_template.title = e.nativeElement.innerHTML;
            }
            if (e.nativeElement.className !== undefined) {
                right_column_template.class = e.nativeElement.className;
            }
            right_column_template.style = e.nativeElement.style.cssText;
            this.format.right_column.push(right_column_template);
        });
        if (this.last_parameters.page != this.parameters.page ||
            this.last_parameters.id != this.parameters.id ||
            this.last_parameters.id2 != this.parameters.id2 ||
            this.last_parameters.id3 != this.parameters.id3) {
            this.last_parameters.page = this.parameters.page;
            this.last_parameters.id = this.parameters.id;
            this.last_parameters.id2 = this.parameters.id2;
            this.last_parameters.id3 = this.parameters.id3;
            console.log("Getting SQL");
            console.log(this.sql);
            console.log(this.parameters);
            this.myDataObs = this._dataService.getSQL(this.sql, this.parameters).subscribe((data) => {
                if (data[0] !== undefined) {
                    this.list = data[0];
                    console.log(this.list);
                }
            });
        }
    }
    tableRefresh() {
        this.myDataObs.unsubscribe();
        this.myDataObs = this._dataService.getSQL(this.sql, this.parameters).subscribe((data) => {
            if (data[0] !== undefined) {
                this.list = data[0];
            }
        });
    }
    ngOnDestroy() {
        this.myObs.unsubscribe();
        this.myDataObs.unsubscribe();
    }
}
SqlDataPreview3Component.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.3", ngImport: i0, type: SqlDataPreview3Component, deps: [{ token: i1.SQLDataService }], target: i0.ɵɵFactoryTarget.Component });
SqlDataPreview3Component.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.3", type: SqlDataPreview3Component, isStandalone: true, selector: "lib-sql-data-preview3", inputs: { use_parameters: "use_parameters", function: "function", sql: "sql", card: "card", card_class: "card_class", card_style: "card_style", container_class: "container_class", container_style: "container_style", closable: "closable", bs_row: "bs_row", bs_col: "bs_col", list_class: "list_class", list_style: "list_style", title: "title", id: "id", id2: "id2", id3: "id3", left: "left", right: "right", class: "class", style: "style" }, outputs: { row_click: "row_click" }, queries: [{ propertyName: "left_row_list", predicate: ["left"] }, { propertyName: "center_row_list", predicate: ["right"] }, { propertyName: "right_row_list", predicate: ["right"] }], ngImport: i0, template: "<!-- NOT A CARD FORMAT-->\n<div *ngIf=\"card!='Y'\" [class]=\"container_class\" [style]=\"container_style\">\n    <div class=\"card\">\n                <ul class=\"list-group list-group-flush\">\n                    <li class=\"list-group-item\" *ngIf=\"format.title!=''\" style=\"background-color: lightgray;\">{{ title }}</li>\n                    <li class=\"list-group-item\" *ngIf=\"format.title!=''\">\n                        <div class=\"row\">\n                            <div class=\"col-4\">\n                                <ul class=\"list-group list-group-flush\">\n                                    <ng-container *ngFor=\"let m of format.center_column\">\n                                        <li class=\"list-group-item\" *ngIf=\"m.type=='data'\">\n                                            <div class=\"row\">\n                                                <div [class]=\"left\">\n                                                <b>{{ m.title }}</b>\n                                                </div>\n                                                <div [class]=\"right\" [innerHTML]=\"list[m.value]\">\n                                                </div>\n                                            </div>\n                                        </li>  \n                                        <li class=\"list-group-item\" *ngIf=\"m.type!='data'\">\n                                            <div class=\"row\">\n                                                <div class=\"col-12\">\n                                                <b>{{ m.title }}</b>\n                                                </div>\n                                            </div>\n                                        </li>    \n                                    </ng-container>     \n                                </ul>\n                            </div>\n                            <div class=\"col-4\">\n                                <ul class=\"list-group list-group-flush\">\n                                    <ng-container *ngFor=\"let m of format.center_column\">\n                                        <li class=\"list-group-item\" *ngIf=\"m.type=='data'\">\n                                            <div class=\"row\">\n                                                <div [class]=\"left\">\n                                                <b>{{ m.title }}</b>\n                                                </div>\n                                                <div [class]=\"right\" [innerHTML]=\"list[m.value]\">\n                                                </div>\n                                            </div>\n                                        </li>  \n                                        <li class=\"list-group-item\" *ngIf=\"m.type!='data'\">\n                                            <div class=\"row\">\n                                                <div class=\"col-12\">\n                                                <b>{{ m.title }}</b>\n                                                </div>\n                                            </div>\n                                        </li>    \n                                    </ng-container>     \n                                </ul>\n                            </div>                            \n                            <div class=\"col-4\">\n                                <ul class=\"list-group list-group-flush\">\n                                    <ng-container *ngFor=\"let m of format.right_column\">\n                                        <li class=\"list-group-item\" *ngIf=\"m.type=='data'\">\n                                            <div class=\"row\">\n                                                <div [class]=\"left\">\n                                                <b>{{ m.title }}</b>\n                                                </div>\n                                                <div [class]=\"right\" [innerHTML]=\"list[m.value]\">\n                                                </div>\n                                            </div>\n                                        </li>  \n                                        <li class=\"list-group-item\" *ngIf=\"m.type!='data'\">\n                                            <div class=\"row\">\n                                                <div class=\"col-12\">\n                                                <b>{{ m.title }}</b>\n                                                </div>\n                                            </div>\n                                        </li>    \n                                    </ng-container>     \n                                </ul>\n                            </div>                            \n                        </div>\n                    </li>\n                </ul>\n    </div>              \n</div>\n<div *ngIf=\"card=='Y'\" [class]=\"container_class\" [style]=\"container_style\">\n<div class=\"card\">\n    <div class=\"card-header\">\n      {{ title }}\n    </div>\n    <div class=\"card-body\">\n        <div class=\"row\">\n            <div class=\"col-6\">\n                <ul class=\"list-group list-group-flush\">\n                    <ng-container *ngFor=\"let m of format.left_column\">\n                        <li class=\"list-group-item\" *ngIf=\"m.type=='data'\" class=\"p-2\">\n                            <div class=\"row\">\n                                <div [class]=\"left\">\n                                <b>{{ m.title }}</b>\n                                </div>\n                                <div [class]=\"right\" [innerHTML]=\"list[m.value]\">\n                                </div>\n                            </div>\n                        </li>  \n                        <li class=\"list-group-item\" *ngIf=\"m.type!='data'\" class=\"p-2\">\n                            <div class=\"row\">\n                                <div class=\"col-12\">\n                                <b>{{ m.title }}</b>\n                                </div>\n                            </div>\n                        </li>    \n                    </ng-container>     \n                </ul>\n            </div>\n            <div class=\"col-6\">\n                <ul class=\"list-group list-group-flush\">\n                    <ng-container *ngFor=\"let m of format.right_column\">\n                        <li class=\"list-group-item\" *ngIf=\"m.type=='data'\" class=\"p-2\">\n                            <div class=\"row\">\n                                <div [class]=\"left\">\n                                <b>{{ m.title }}</b>\n                                </div>\n                                <div [class]=\"right\" [innerHTML]=\"list[m.value]\">\n                                </div>\n                            </div>\n                        </li>  \n                        <li class=\"list-group-item\" *ngIf=\"m.type!='data'\" class=\"p-2\">\n                            <div class=\"row\">\n                                <div class=\"col-12\">\n                                <b>{{ m.title }}</b>\n                                </div>\n                            </div>\n                        </li>    \n                    </ng-container>     \n                </ul>\n            </div>            \n        </div>\n    </div>\n  </div>\n</div>", styles: [""], dependencies: [{ kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "ngmodule", type: FormsModule }, { kind: "ngmodule", type: NgxTablePaginationModule }, { kind: "ngmodule", type: Ng2SearchPipeModule }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.3", ngImport: i0, type: SqlDataPreview3Component, decorators: [{
            type: Component,
            args: [{ selector: 'lib-sql-data-preview3', standalone: true, imports: [CommonModule,
                        FormsModule,
                        NgxTablePaginationModule,
                        Ng2SearchPipeModule], template: "<!-- NOT A CARD FORMAT-->\n<div *ngIf=\"card!='Y'\" [class]=\"container_class\" [style]=\"container_style\">\n    <div class=\"card\">\n                <ul class=\"list-group list-group-flush\">\n                    <li class=\"list-group-item\" *ngIf=\"format.title!=''\" style=\"background-color: lightgray;\">{{ title }}</li>\n                    <li class=\"list-group-item\" *ngIf=\"format.title!=''\">\n                        <div class=\"row\">\n                            <div class=\"col-4\">\n                                <ul class=\"list-group list-group-flush\">\n                                    <ng-container *ngFor=\"let m of format.center_column\">\n                                        <li class=\"list-group-item\" *ngIf=\"m.type=='data'\">\n                                            <div class=\"row\">\n                                                <div [class]=\"left\">\n                                                <b>{{ m.title }}</b>\n                                                </div>\n                                                <div [class]=\"right\" [innerHTML]=\"list[m.value]\">\n                                                </div>\n                                            </div>\n                                        </li>  \n                                        <li class=\"list-group-item\" *ngIf=\"m.type!='data'\">\n                                            <div class=\"row\">\n                                                <div class=\"col-12\">\n                                                <b>{{ m.title }}</b>\n                                                </div>\n                                            </div>\n                                        </li>    \n                                    </ng-container>     \n                                </ul>\n                            </div>\n                            <div class=\"col-4\">\n                                <ul class=\"list-group list-group-flush\">\n                                    <ng-container *ngFor=\"let m of format.center_column\">\n                                        <li class=\"list-group-item\" *ngIf=\"m.type=='data'\">\n                                            <div class=\"row\">\n                                                <div [class]=\"left\">\n                                                <b>{{ m.title }}</b>\n                                                </div>\n                                                <div [class]=\"right\" [innerHTML]=\"list[m.value]\">\n                                                </div>\n                                            </div>\n                                        </li>  \n                                        <li class=\"list-group-item\" *ngIf=\"m.type!='data'\">\n                                            <div class=\"row\">\n                                                <div class=\"col-12\">\n                                                <b>{{ m.title }}</b>\n                                                </div>\n                                            </div>\n                                        </li>    \n                                    </ng-container>     \n                                </ul>\n                            </div>                            \n                            <div class=\"col-4\">\n                                <ul class=\"list-group list-group-flush\">\n                                    <ng-container *ngFor=\"let m of format.right_column\">\n                                        <li class=\"list-group-item\" *ngIf=\"m.type=='data'\">\n                                            <div class=\"row\">\n                                                <div [class]=\"left\">\n                                                <b>{{ m.title }}</b>\n                                                </div>\n                                                <div [class]=\"right\" [innerHTML]=\"list[m.value]\">\n                                                </div>\n                                            </div>\n                                        </li>  \n                                        <li class=\"list-group-item\" *ngIf=\"m.type!='data'\">\n                                            <div class=\"row\">\n                                                <div class=\"col-12\">\n                                                <b>{{ m.title }}</b>\n                                                </div>\n                                            </div>\n                                        </li>    \n                                    </ng-container>     \n                                </ul>\n                            </div>                            \n                        </div>\n                    </li>\n                </ul>\n    </div>              \n</div>\n<div *ngIf=\"card=='Y'\" [class]=\"container_class\" [style]=\"container_style\">\n<div class=\"card\">\n    <div class=\"card-header\">\n      {{ title }}\n    </div>\n    <div class=\"card-body\">\n        <div class=\"row\">\n            <div class=\"col-6\">\n                <ul class=\"list-group list-group-flush\">\n                    <ng-container *ngFor=\"let m of format.left_column\">\n                        <li class=\"list-group-item\" *ngIf=\"m.type=='data'\" class=\"p-2\">\n                            <div class=\"row\">\n                                <div [class]=\"left\">\n                                <b>{{ m.title }}</b>\n                                </div>\n                                <div [class]=\"right\" [innerHTML]=\"list[m.value]\">\n                                </div>\n                            </div>\n                        </li>  \n                        <li class=\"list-group-item\" *ngIf=\"m.type!='data'\" class=\"p-2\">\n                            <div class=\"row\">\n                                <div class=\"col-12\">\n                                <b>{{ m.title }}</b>\n                                </div>\n                            </div>\n                        </li>    \n                    </ng-container>     \n                </ul>\n            </div>\n            <div class=\"col-6\">\n                <ul class=\"list-group list-group-flush\">\n                    <ng-container *ngFor=\"let m of format.right_column\">\n                        <li class=\"list-group-item\" *ngIf=\"m.type=='data'\" class=\"p-2\">\n                            <div class=\"row\">\n                                <div [class]=\"left\">\n                                <b>{{ m.title }}</b>\n                                </div>\n                                <div [class]=\"right\" [innerHTML]=\"list[m.value]\">\n                                </div>\n                            </div>\n                        </li>  \n                        <li class=\"list-group-item\" *ngIf=\"m.type!='data'\" class=\"p-2\">\n                            <div class=\"row\">\n                                <div class=\"col-12\">\n                                <b>{{ m.title }}</b>\n                                </div>\n                            </div>\n                        </li>    \n                    </ng-container>     \n                </ul>\n            </div>            \n        </div>\n    </div>\n  </div>\n</div>" }]
        }], ctorParameters: function () { return [{ type: i1.SQLDataService }]; }, propDecorators: { left_row_list: [{
                type: ContentChildren,
                args: ['left']
            }], center_row_list: [{
                type: ContentChildren,
                args: ['right']
            }], right_row_list: [{
                type: ContentChildren,
                args: ['right']
            }], use_parameters: [{
                type: Input
            }], function: [{
                type: Input
            }], sql: [{
                type: Input
            }], card: [{
                type: Input
            }], card_class: [{
                type: Input
            }], card_style: [{
                type: Input
            }], container_class: [{
                type: Input
            }], container_style: [{
                type: Input
            }], closable: [{
                type: Input
            }], bs_row: [{
                type: Input
            }], bs_col: [{
                type: Input
            }], list_class: [{
                type: Input
            }], list_style: [{
                type: Input
            }], title: [{
                type: Input
            }], id: [{
                type: Input
            }], id2: [{
                type: Input
            }], id3: [{
                type: Input
            }], left: [{
                type: Input
            }], right: [{
                type: Input
            }], class: [{
                type: Input
            }], style: [{
                type: Input
            }], row_click: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3FsLWRhdGEtcHJldmlldzMuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvc3FsLWNvbXBvbmVudHMvc3JjL2xpYi9zcWwtZGF0YS1wcmV2aWV3My9zcWwtZGF0YS1wcmV2aWV3My5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9zcWwtY29tcG9uZW50cy9zcmMvbGliL3NxbC1kYXRhLXByZXZpZXczL3NxbC1kYXRhLXByZXZpZXczLmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQVUsS0FBSyxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQ3JELGVBQWUsRUFBNkIsTUFBTSxlQUFlLENBQUM7QUFDcEUsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRy9DLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM3QyxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUN4RCxPQUFPLEVBQUUsd0JBQXdCLEVBQXVCLE1BQU0sc0JBQXNCLENBQUM7Ozs7QUFhckYsTUFBTSxPQUFPLHdCQUF3QjtJQStDbkMsWUFBb0IsWUFBNEI7UUFBNUIsaUJBQVksR0FBWixZQUFZLENBQWdCO1FBdENoRCxXQUFNLEdBQVEsRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFLE1BQU0sRUFBRSxFQUFFLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFLFdBQVcsRUFBRSxFQUFFLEVBQUUsYUFBYSxFQUFFLEVBQUUsRUFBRSxZQUFZLEVBQUUsRUFBRSxFQUFFLE9BQU8sRUFBRSxFQUFFLEVBQUUsQ0FBQztRQUdqSSxTQUFJLEdBQVEsRUFBRSxDQUFDO1FBQ04sbUJBQWMsR0FBUSxHQUFHLENBQUM7UUFDMUIsYUFBUSxHQUFRLEVBQUUsQ0FBQztR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QUF3Qjt3QkFDeEIsbUJBQW1CLENBQUM7cUdBTVcsYUFBYTtzQkFBN0MsZUFBZTt1QkFBQyxNQUFNO2dCQUNXLGVBQWU7c0JBQWhELGVBQWU7dUJBQUMsT0FBTztnQkFDVSxjQUFjO3NCQUEvQyxlQUFlO3VCQUFDLE9BQU87Z0JBU2YsY0FBYztzQkFBdEIsS0FBSztnQkFDRyxRQUFRO3NCQUFoQixLQUFLO2dCQUNHLEdBQUc7c0JBQVgsS0FBSztnQkFDRyxJQUFJO3NCQUFaLEtBQUs7Z0JBQ0csVUFBVTtzQkFBbEIsS0FBSztnQkFDRyxVQUFVO3NCQUFsQixLQUFLO2dCQUNHLGVBQWU7c0JBQXZCLEtBQUs7Z0JBQ0csZUFBZTtzQkFBdkIsS0FBSztnQkFFRyxRQUFRO3NCQUFoQixLQUFLO2dCQUNHLE1BQU07c0JBQWQsS0FBSztnQkFDRyxNQUFNO3NCQUFkLEtBQUs7Z0JBRUcsVUFBVTtzQkFBbEIsS0FBSztnQkFDRyxVQUFVO3NCQUFsQixLQUFLO2dCQUNHLEtBQUs7c0JBQWIsS0FBSztnQkFFRyxFQUFFO3NCQUFWLEtBQUs7Z0JBQ0csR0FBRztzQkFBWCxLQUFLO2dCQUNHLEdBQUc7c0JBQVgsS0FBSztnQkFDRyxJQUFJO3NCQUFaLEtBQUs7Z0JBQ0csS0FBSztzQkFBYixLQUFLO2dCQUVHLEtBQUs7c0JBQWIsS0FBSztnQkFDRyxLQUFLO3NCQUFiLEtBQUs7Z0JBRUksU0FBUztzQkFBbEIsTUFBTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgT25Jbml0LCBJbnB1dCwgT3V0cHV0LCBFdmVudEVtaXR0ZXIsIE9uRGVzdHJveSxcbiAgQ29udGVudENoaWxkcmVuLCBFbGVtZW50UmVmLCBBZnRlclZpZXdJbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgU1FMRGF0YVNlcnZpY2UgfSBmcm9tICcuLi9kYXRhLnNlcnZpY2UnO1xuaW1wb3J0IHsgRGF0YSB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQgeyBGb3Jtc01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IE5nMlNlYXJjaFBpcGVNb2R1bGUgfSBmcm9tICduZzItc2VhcmNoLWZpbHRlcic7XG5pbXBvcnQgeyBOZ3hUYWJsZVBhZ2luYXRpb25Nb2R1bGUsIFBhZ2luYXRpb25Db21wb25lbnQgfSBmcm9tICduZ3gtdGFibGUtcGFnaW5hdGlvbic7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnbGliLXNxbC1kYXRhLXByZXZpZXczJyxcbiAgc3RhbmRhbG9uZTogdHJ1ZSxcbiAgaW1wb3J0czogW0NvbW1vbk1vZHVsZSwgXG4gICAgRm9ybXNNb2R1bGUsXG4gICAgTmd4VGFibGVQYWdpbmF0aW9uTW9kdWxlLCBcbiAgICBOZzJTZWFyY2hQaXBlTW9kdWxlXSxcbiAgdGVtcGxhdGVVcmw6ICcuL3NxbC1kYXRhLXByZXZpZXczLmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4vc3FsLWRhdGEtcHJldmlldzMuY29tcG9uZW50LmNzcyddXG59KVxuZXhwb3J0IGNsYXNzIFNxbERhdGFQcmV2aWV3M0NvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgQWZ0ZXJWaWV3SW5pdCwgT25EZXN0cm95ICB7XG5cbiAgQENvbnRlbnRDaGlsZHJlbignbGVmdCcpIHByaXZhdGUgbGVmdF9yb3dfbGlzdCE6IEVsZW1lbnRSZWZbXTtcbiAgQENvbnRlbnRDaGlsZHJlbigncmlnaHQnKSBwcml2YXRlIGNlbnRlcl9yb3dfbGlzdCE6IEVsZW1lbnRSZWZbXTsgIFxuICBAQ29udGVudENoaWxkcmVuKCdyaWdodCcpIHByaXZhdGUgcmlnaHRfcm93X2xpc3QhOiBFbGVtZW50UmVmW107XG5cbiAgbXlPYnMhOiBTdWJzY3JpcHRpb247XG4gIG15RGF0YU9icyE6IFN1YnNjcmlwdGlvbjtcbiAgXG4gIGZvcm1hdDogYW55ID0geyB0aXRsZTogJycsIHNlYXJjaDogJycsIGNsYXNzOiAnJywgc3R5bGU6ICcnLCBsZWZ0X2NvbHVtbjogW10sIGNlbnRlcl9jb2x1bW46IFtdLCByaWdodF9jb2x1bW46IFtdLCBidXR0b25zOiBbXSB9O1xuICBsaXN0OiBhbnk7ICAgICAgICAgIC8vIGhvbGRzIHRoZSBsaXN0IHJldHVybmVkIGJ5IHRoZSBxdWVyeSAoMiBjb2x1bW5zIFtuYW1lLCB0aXRsZV0pLlxuICBcbiAgZGF0YTogYW55ID0gJyc7XG4gIEBJbnB1dCgpIHVzZV9wYXJhbWV0ZXJzOiBhbnkgPSAnTic7XG4gIEBJbnB1dCgpIGZ1bmN0aW9uOiBhbnkgPSAnJzsgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgQElucHV0KCkgc3FsOiBhbnkgPSAnJzsgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICBASW5wdXQoKSBjYXJkOiBhbnkgPSBcIllcIjsgICAgICBcbiAgQElucHV0KCkgY2FyZF9jbGFzczogYW55ID0gJyc7XG4gIEBJbnB1dCgpIGNhcmRfc3R5bGU6IGFueSA9ICcnO1xuICBASW5wdXQoKSBjb250YWluZXJfY2xhc3M6IGFueSA9ICdjb250YWluZXItZmx1aWQgbS0yIHAtMic7ICBcbiAgQElucHV0KCkgY29udGFpbmVyX3N0eWxlOiBhbnkgPSAnJzsgICBcbiAgXG4gIEBJbnB1dCgpIGNsb3NhYmxlOiBhbnkgPSBcIk5cIjsgICAgXG4gIEBJbnB1dCgpIGJzX3JvdzogYW55ID0gJ04nOyAgICAgICAgICAgICAgICAgICAgICAgIFxuICBASW5wdXQoKSBic19jb2w6IGFueSA9ICcnOyAgIFxuICBcbiAgQElucHV0KCkgbGlzdF9jbGFzczogYW55ID0gJ3RhYmxlIHRhYmxlLXN0cmlwZWQgdGFibGUtY29uZGVuc2VkJzsgICBcbiAgQElucHV0KCkgbGlzdF9zdHlsZTogYW55ID0gJyc7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICBASW5wdXQoKSB0aXRsZTogYW55ID0gJ1RpdGxlIE5vdCBTZXQnOyAgICAgICAgICAgICAgIFxuICBcbiAgQElucHV0KCkgaWQ6IGFueSA9ICcwJzsgICAgICAgIFxuICBASW5wdXQoKSBpZDI6IGFueSA9ICcwJzsgICAgXG4gIEBJbnB1dCgpIGlkMzogYW55ID0gJzAnOyAgICAgIFxuICBASW5wdXQoKSBsZWZ0OiBhbnkgPSAnY29sLTYnO1xuICBASW5wdXQoKSByaWdodDogYW55ID0gJ2NvbC02JztcbiAgICBcbiAgQElucHV0KCkgY2xhc3M6IGFueSA9ICcnOyAgXG4gIEBJbnB1dCgpIHN0eWxlOiBhbnkgPSBcIlwiOyAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIFxuICBAT3V0cHV0KCkgcm93X2NsaWNrOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuICBcbiAgcGFyYW1ldGVyczogYW55ID0geyBwYWdlOiAnJywgaWQ6ICcnLCBpZDI6ICcnLCBpZDM6ICcnfTtcbiAgbGFzdF9wYXJhbWV0ZXJzOiBhbnkgPSB7IHBhZ2U6ICd4eHgnLCBpZDogJ3h4eCcsIGlkMjogJ3h4eCcsIGlkMzogJ3h4eCcgfVxuICBcbiAgY291bnRlcjogbnVtYmVyID0gMDtcbiAgcGFnZTogYW55ID0gJyc7XG4gIFxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIF9kYXRhU2VydmljZTogU1FMRGF0YVNlcnZpY2UpIHsgXG4gIFxuICB9XG4gIFxuICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgXG4gIH1cbiAgXG4gIHJvd0NsaWNrKG06IGFueSkge1xuICAgIHRoaXMucm93X2NsaWNrLmVtaXQobSk7XG4gIH1cbiAgXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkIHtcbiAgXG4gICAgaWYgKHRoaXMudXNlX3BhcmFtZXRlcnM9PT0nWScpIHtcbiAgICAgIHRoaXMuX2RhdGFTZXJ2aWNlLnBhcmFtU3ViamVjdC5zdWJzY3JpYmUoZCA9PiB7XG4gICAgICAgIHRoaXMucGFyYW1ldGVycz1kO1xuICAgICAgICB0aGlzLl9kYXRhU2VydmljZS5nZXRTUUwodGhpcy5zcWwsIHRoaXMucGFyYW1ldGVycykuc3Vic2NyaWJlKChkYXRhOmFueSk9PntcbiAgICAgICAgICB0aGlzLmxpc3Q9ZGF0YTtcbiAgICAgICAgICB0aGlzLmxpc3QuZm9yRWFjaChmdW5jdGlvbiAodmFsdWU6IGFueSkge1xuICAgICAgICAgICAgdmFsdWUuYWN0aXZlPSdOJztcbiAgICAgICAgICB9KTtcbiAgICAgICAgIH0pO1xuICAgICAgfSlcbiAgICB9IFxuICAgIGlmICh0aGlzLnVzZV9wYXJhbWV0ZXJzPT09J04nKSB7XG4gICAgICAgIHRoaXMucGFyYW1ldGVycy5wYWdlPXRoaXMucGFnZTtcbiAgICAgICAgdGhpcy5wYXJhbWV0ZXJzLmlkPXRoaXMuaWQ7XG4gICAgICAgIHRoaXMucGFyYW1ldGVycy5pZDI9dGhpcy5pZDI7XG4gICAgICAgIHRoaXMucGFyYW1ldGVycy5pZDM9dGhpcy5pZDM7XG4gICAgICAgIGNvbnNvbGUubG9nKHRoaXMucGFyYW1ldGVycyk7XG4gICAgICAgIHRoaXMuX2RhdGFTZXJ2aWNlLmdldFNRTCh0aGlzLnNxbCwgdGhpcy5wYXJhbWV0ZXJzKS5zdWJzY3JpYmUoKGRhdGE6YW55KT0+e1xuICAgICAgICAgIGlmIChkYXRhWzBdIT09dW5kZWZpbmVkKSB7IHRoaXMubGlzdD1kYXRhWzBdOyB9XG4gICAgICAgICB9KTtcbiAgICB9XG4gIFxuICB0aGlzLmZvcm1hdC50aXRsZT10aGlzLnRpdGxlO1xuICB0aGlzLmZvcm1hdC5jbGFzcz10aGlzLmNsYXNzO1xuICB0aGlzLmZvcm1hdC5zdHlsZT10aGlzLnN0eWxlO1xuICBcbiAgdGhpcy5sZWZ0X3Jvd19saXN0LmZvckVhY2goKGU6IEVsZW1lbnRSZWYpID0+IHtcbiAgICBcbiAgICAgICBsZXQgbGVmdF9jb2x1bW5fdGVtcGxhdGU6IGFueSA9IHsgY29sdW1uX25hbWU6ICcnLCAgY2xhc3M6ICcnLCAgdHlwZTogJycsICBzdHlsZTogJycsICB0aXRsZTogJycsICB2YWx1ZTogJycgfTtcbiAgICAgICBcbiAgICAgICBpZiAoZS5uYXRpdmVFbGVtZW50Lm5vZGVOYW1lPT0nVEgnKSB7XG4gICAgICAgICBsZWZ0X2NvbHVtbl90ZW1wbGF0ZS50eXBlPVwiZGF0YVwiO1xuICAgICAgICAgbGVmdF9jb2x1bW5fdGVtcGxhdGUudmFsdWU9ZS5uYXRpdmVFbGVtZW50LmlkO1xuICAgICAgICAgbGVmdF9jb2x1bW5fdGVtcGxhdGUudGl0bGU9ZS5uYXRpdmVFbGVtZW50LmlubmVySFRNTDtcbiAgICAgICB9ICAgICAgXG4gICAgICAgXG4gICAgICAgaWYgKGUubmF0aXZlRWxlbWVudC5ub2RlTmFtZT09J1REJykgeyAgICAgIFxuICAgICAgICAgbGVmdF9jb2x1bW5fdGVtcGxhdGUudHlwZT1cImJvaWxlcnBsYXRlXCI7XG4gICAgICAgICBsZWZ0X2NvbHVtbl90ZW1wbGF0ZS52YWx1ZT0nJztcbiAgICAgICAgIGxlZnRfY29sdW1uX3RlbXBsYXRlLnRpdGxlPWUubmF0aXZlRWxlbWVudC5pbm5lckhUTUw7XG4gICAgICAgfSAgIFxuICBcbiAgICAgICBpZiAoZS5uYXRpdmVFbGVtZW50LmNsYXNzTmFtZSE9PXVuZGVmaW5lZCkgeyBsZWZ0X2NvbHVtbl90ZW1wbGF0ZS5jbGFzcz1lLm5hdGl2ZUVsZW1lbnQuY2xhc3NOYW1lOyB9XG4gICAgICAgbGVmdF9jb2x1bW5fdGVtcGxhdGUuc3R5bGU9ZS5uYXRpdmVFbGVtZW50LnN0eWxlLmNzc1RleHQ7XG4gICAgICAgdGhpcy5mb3JtYXQubGVmdF9jb2x1bW4ucHVzaChsZWZ0X2NvbHVtbl90ZW1wbGF0ZSk7XG4gIH0pO1xuXG4gIHRoaXMuY2VudGVyX3Jvd19saXN0LmZvckVhY2goKGU6IEVsZW1lbnRSZWYpID0+IHtcbiAgICBcbiAgICBsZXQgY2VudGVyX2NvbHVtbl90ZW1wbGF0ZTogYW55ID0geyBjb2x1bW5fbmFtZTogJycsICBjbGFzczogJycsICB0eXBlOiAnJywgIHN0eWxlOiAnJywgIHRpdGxlOiAnJywgIHZhbHVlOiAnJyB9O1xuICAgIFxuICAgIGlmIChlLm5hdGl2ZUVsZW1lbnQubm9kZU5hbWU9PSdUSCcpIHtcbiAgICAgIGNlbnRlcl9jb2x1bW5fdGVtcGxhdGUudHlwZT1cImRhdGFcIjtcbiAgICAgIGNlbnRlcl9jb2x1bW5fdGVtcGxhdGUudmFsdWU9ZS5uYXRpdmVFbGVtZW50LmlkO1xuICAgICAgY2VudGVyX2NvbHVtbl90ZW1wbGF0ZS50aXRsZT1lLm5hdGl2ZUVsZW1lbnQuaW5uZXJIVE1MO1xuICAgIH0gICAgICBcbiAgICBcbiAgICBpZiAoZS5uYXRpdmVFbGVtZW50Lm5vZGVOYW1lPT0nVEQnKSB7ICAgICAgXG4gICAgICBjZW50ZXJfY29sdW1uX3RlbXBsYXRlLnR5cGU9XCJib2lsZXJwbGF0ZVwiO1xuICAgICAgY2VudGVyX2NvbHVtbl90ZW1wbGF0ZS52YWx1ZT0nJztcbiAgICAgIGNlbnRlcl9jb2x1bW5fdGVtcGxhdGUudGl0bGU9ZS5uYXRpdmVFbGVtZW50LmlubmVySFRNTDtcbiAgICB9ICAgXG5cbiAgICBpZiAoZS5uYXRpdmVFbGVtZW50LmNsYXNzTmFtZSE9PXVuZGVmaW5lZCkgeyBjZW50ZXJfY29sdW1uX3RlbXBsYXRlLmNsYXNzPWUubmF0aXZlRWxlbWVudC5jbGFzc05hbWU7IH1cbiAgICBjZW50ZXJfY29sdW1uX3RlbXBsYXRlLnN0eWxlPWUubmF0aXZlRWxlbWVudC5zdHlsZS5jc3NUZXh0O1xuICAgIHRoaXMuZm9ybWF0LmNlbnRlcl9jb2x1bW4ucHVzaChjZW50ZXJfY29sdW1uX3RlbXBsYXRlKTtcbiAgfSk7XG5cbiAgdGhpcy5yaWdodF9yb3dfbGlzdC5mb3JFYWNoKChlOiBFbGVtZW50UmVmKSA9PiB7XG4gICAgXG4gICAgbGV0IHJpZ2h0X2NvbHVtbl90ZW1wbGF0ZTogYW55ID0geyBjb2x1bW5fbmFtZTogJycsICBjbGFzczogJycsICB0eXBlOiAnJywgIHN0eWxlOiAnJywgIHRpdGxlOiAnJywgIHZhbHVlOiAnJyB9O1xuICAgIFxuICAgIGlmIChlLm5hdGl2ZUVsZW1lbnQubm9kZU5hbWU9PSdUSCcpIHtcbiAgICAgIHJpZ2h0X2NvbHVtbl90ZW1wbGF0ZS50eXBlPVwiZGF0YVwiO1xuICAgICAgcmlnaHRfY29sdW1uX3RlbXBsYXRlLnZhbHVlPWUubmF0aXZlRWxlbWVudC5pZDtcbiAgICAgIHJpZ2h0X2NvbHVtbl90ZW1wbGF0ZS50aXRsZT1lLm5hdGl2ZUVsZW1lbnQuaW5uZXJIVE1MO1xuICAgIH0gICAgICBcbiAgICBcbiAgICBpZiAoZS5uYXRpdmVFbGVtZW50Lm5vZGVOYW1lPT0nVEQnKSB7ICAgICAgXG4gICAgICByaWdodF9jb2x1bW5fdGVtcGxhdGUudHlwZT1cImJvaWxlcnBsYXRlXCI7XG4gICAgICByaWdodF9jb2x1bW5fdGVtcGxhdGUudmFsdWU9Jyc7XG4gICAgICByaWdodF9jb2x1bW5fdGVtcGxhdGUudGl0bGU9ZS5uYXRpdmVFbGVtZW50LmlubmVySFRNTDtcbiAgICB9ICAgXG5cbiAgICBpZiAoZS5uYXRpdmVFbGVtZW50LmNsYXNzTmFtZSE9PXVuZGVmaW5lZCkgeyByaWdodF9jb2x1bW5fdGVtcGxhdGUuY2xhc3M9ZS5uYXRpdmVFbGVtZW50LmNsYXNzTmFtZTsgfVxuICAgIHJpZ2h0X2NvbHVtbl90ZW1wbGF0ZS5zdHlsZT1lLm5hdGl2ZUVsZW1lbnQuc3R5bGUuY3NzVGV4dDtcbiAgICB0aGlzLmZvcm1hdC5yaWdodF9jb2x1bW4ucHVzaChyaWdodF9jb2x1bW5fdGVtcGxhdGUpO1xuICB9KTtcblxuICBcbiAgXG4gIGlmICh0aGlzLmxhc3RfcGFyYW1ldGVycy5wYWdlIT10aGlzLnBhcmFtZXRlcnMucGFnZXx8XG4gICAgICB0aGlzLmxhc3RfcGFyYW1ldGVycy5pZCE9dGhpcy5wYXJhbWV0ZXJzLmlkfHxcbiAgICAgIHRoaXMubGFzdF9wYXJhbWV0ZXJzLmlkMiE9dGhpcy5wYXJhbWV0ZXJzLmlkMnx8XG4gICAgICB0aGlzLmxhc3RfcGFyYW1ldGVycy5pZDMhPXRoaXMucGFyYW1ldGVycy5pZDMpIHtcbiAgICAgICAgICAgIHRoaXMubGFzdF9wYXJhbWV0ZXJzLnBhZ2U9dGhpcy5wYXJhbWV0ZXJzLnBhZ2U7XG4gICAgICAgICAgICB0aGlzLmxhc3RfcGFyYW1ldGVycy5pZD10aGlzLnBhcmFtZXRlcnMuaWQ7XG4gICAgICAgICAgICB0aGlzLmxhc3RfcGFyYW1ldGVycy5pZDI9dGhpcy5wYXJhbWV0ZXJzLmlkMjtcbiAgICAgICAgICAgIHRoaXMubGFzdF9wYXJhbWV0ZXJzLmlkMz10aGlzLnBhcmFtZXRlcnMuaWQzO1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJHZXR0aW5nIFNRTFwiKVxuICAgICAgICAgICAgY29uc29sZS5sb2codGhpcy5zcWwpO1xuICAgICAgICAgICAgY29uc29sZS5sb2codGhpcy5wYXJhbWV0ZXJzKTtcbiAgICAgICAgICAgIHRoaXMubXlEYXRhT2JzID0gdGhpcy5fZGF0YVNlcnZpY2UuZ2V0U1FMKHRoaXMuc3FsLCB0aGlzLnBhcmFtZXRlcnMpLnN1YnNjcmliZSgoZGF0YTphbnkpPT57XG4gICAgICAgICAgICAgIGlmIChkYXRhWzBdIT09dW5kZWZpbmVkKSB7IFxuICAgICAgICAgICAgICAgIHRoaXMubGlzdD1kYXRhWzBdOyBcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyh0aGlzLmxpc3QpXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgfVxuICB9XG4gIFxuICB0YWJsZVJlZnJlc2goKSB7XG4gICAgdGhpcy5teURhdGFPYnMudW5zdWJzY3JpYmUoKTtcbiAgICB0aGlzLm15RGF0YU9icyA9IHRoaXMuX2RhdGFTZXJ2aWNlLmdldFNRTCh0aGlzLnNxbCwgdGhpcy5wYXJhbWV0ZXJzKS5zdWJzY3JpYmUoKGRhdGE6YW55KT0+e1xuICAgICAgICBpZiAoZGF0YVswXSE9PXVuZGVmaW5lZCkgeyB0aGlzLmxpc3Q9ZGF0YVswXTsgfVxuICAgICB9KTtcbiAgfVxuICBcbiAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgdGhpcy5teU9icy51bnN1YnNjcmliZSgpO1xuICAgIHRoaXMubXlEYXRhT2JzLnVuc3Vic2NyaWJlKCk7XG4gIH1cbiAgfSIsIjwhLS0gTk9UIEEgQ0FSRCBGT1JNQVQtLT5cbjxkaXYgKm5nSWY9XCJjYXJkIT0nWSdcIiBbY2xhc3NdPVwiY29udGFpbmVyX2NsYXNzXCIgW3N0eWxlXT1cImNvbnRhaW5lcl9zdHlsZVwiPlxuICAgIDxkaXYgY2xhc3M9XCJjYXJkXCI+XG4gICAgICAgICAgICAgICAgPHVsIGNsYXNzPVwibGlzdC1ncm91cCBsaXN0LWdyb3VwLWZsdXNoXCI+XG4gICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz1cImxpc3QtZ3JvdXAtaXRlbVwiICpuZ0lmPVwiZm9ybWF0LnRpdGxlIT0nJ1wiIHN0eWxlPVwiYmFja2dyb3VuZC1jb2xvcjogbGlnaHRncmF5O1wiPnt7IHRpdGxlIH19PC9saT5cbiAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPVwibGlzdC1ncm91cC1pdGVtXCIgKm5nSWY9XCJmb3JtYXQudGl0bGUhPScnXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwicm93XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNvbC00XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz1cImxpc3QtZ3JvdXAgbGlzdC1ncm91cC1mbHVzaFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG5nLWNvbnRhaW5lciAqbmdGb3I9XCJsZXQgbSBvZiBmb3JtYXQuY2VudGVyX2NvbHVtblwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz1cImxpc3QtZ3JvdXAtaXRlbVwiICpuZ0lmPVwibS50eXBlPT0nZGF0YSdcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInJvd1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBbY2xhc3NdPVwibGVmdFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGI+e3sgbS50aXRsZSB9fTwvYj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBbY2xhc3NdPVwicmlnaHRcIiBbaW5uZXJIVE1MXT1cImxpc3RbbS52YWx1ZV1cIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPiAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPVwibGlzdC1ncm91cC1pdGVtXCIgKm5nSWY9XCJtLnR5cGUhPSdkYXRhJ1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwicm93XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLTEyXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Yj57eyBtLnRpdGxlIH19PC9iPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+ICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9uZy1jb250YWluZXI+ICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLTRcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPVwibGlzdC1ncm91cCBsaXN0LWdyb3VwLWZsdXNoXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bmctY29udGFpbmVyICpuZ0Zvcj1cImxldCBtIG9mIGZvcm1hdC5jZW50ZXJfY29sdW1uXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPVwibGlzdC1ncm91cC1pdGVtXCIgKm5nSWY9XCJtLnR5cGU9PSdkYXRhJ1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwicm93XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IFtjbGFzc109XCJsZWZ0XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Yj57eyBtLnRpdGxlIH19PC9iPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IFtjbGFzc109XCJyaWdodFwiIFtpbm5lckhUTUxdPVwibGlzdFttLnZhbHVlXVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+ICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9XCJsaXN0LWdyb3VwLWl0ZW1cIiAqbmdJZj1cIm0udHlwZSE9J2RhdGEnXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJyb3dcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtMTJcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiPnt7IG0udGl0bGUgfX08L2I+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L25nLWNvbnRhaW5lcj4gICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLTRcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPVwibGlzdC1ncm91cCBsaXN0LWdyb3VwLWZsdXNoXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bmctY29udGFpbmVyICpuZ0Zvcj1cImxldCBtIG9mIGZvcm1hdC5yaWdodF9jb2x1bW5cIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9XCJsaXN0LWdyb3VwLWl0ZW1cIiAqbmdJZj1cIm0udHlwZT09J2RhdGEnXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJyb3dcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgW2NsYXNzXT1cImxlZnRcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiPnt7IG0udGl0bGUgfX08L2I+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgW2NsYXNzXT1cInJpZ2h0XCIgW2lubmVySFRNTF09XCJsaXN0W20udmFsdWVdXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4gIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz1cImxpc3QtZ3JvdXAtaXRlbVwiICpuZ0lmPVwibS50eXBlIT0nZGF0YSdcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInJvd1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNvbC0xMlwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGI+e3sgbS50aXRsZSB9fTwvYj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbmctY29udGFpbmVyPiAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgICAgPC91bD5cbiAgICA8L2Rpdj4gICAgICAgICAgICAgIFxuPC9kaXY+XG48ZGl2ICpuZ0lmPVwiY2FyZD09J1knXCIgW2NsYXNzXT1cImNvbnRhaW5lcl9jbGFzc1wiIFtzdHlsZV09XCJjb250YWluZXJfc3R5bGVcIj5cbjxkaXYgY2xhc3M9XCJjYXJkXCI+XG4gICAgPGRpdiBjbGFzcz1cImNhcmQtaGVhZGVyXCI+XG4gICAgICB7eyB0aXRsZSB9fVxuICAgIDwvZGl2PlxuICAgIDxkaXYgY2xhc3M9XCJjYXJkLWJvZHlcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cInJvd1wiPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNvbC02XCI+XG4gICAgICAgICAgICAgICAgPHVsIGNsYXNzPVwibGlzdC1ncm91cCBsaXN0LWdyb3VwLWZsdXNoXCI+XG4gICAgICAgICAgICAgICAgICAgIDxuZy1jb250YWluZXIgKm5nRm9yPVwibGV0IG0gb2YgZm9ybWF0LmxlZnRfY29sdW1uXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9XCJsaXN0LWdyb3VwLWl0ZW1cIiAqbmdJZj1cIm0udHlwZT09J2RhdGEnXCIgY2xhc3M9XCJwLTJcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwicm93XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgW2NsYXNzXT1cImxlZnRcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGI+e3sgbS50aXRsZSB9fTwvYj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgW2NsYXNzXT1cInJpZ2h0XCIgW2lubmVySFRNTF09XCJsaXN0W20udmFsdWVdXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4gIFxuICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPVwibGlzdC1ncm91cC1pdGVtXCIgKm5nSWY9XCJtLnR5cGUhPSdkYXRhJ1wiIGNsYXNzPVwicC0yXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInJvd1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLTEyXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiPnt7IG0udGl0bGUgfX08L2I+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4gICAgXG4gICAgICAgICAgICAgICAgICAgIDwvbmctY29udGFpbmVyPiAgICAgXG4gICAgICAgICAgICAgICAgPC91bD5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNvbC02XCI+XG4gICAgICAgICAgICAgICAgPHVsIGNsYXNzPVwibGlzdC1ncm91cCBsaXN0LWdyb3VwLWZsdXNoXCI+XG4gICAgICAgICAgICAgICAgICAgIDxuZy1jb250YWluZXIgKm5nRm9yPVwibGV0IG0gb2YgZm9ybWF0LnJpZ2h0X2NvbHVtblwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPVwibGlzdC1ncm91cC1pdGVtXCIgKm5nSWY9XCJtLnR5cGU9PSdkYXRhJ1wiIGNsYXNzPVwicC0yXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInJvd1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IFtjbGFzc109XCJsZWZ0XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiPnt7IG0udGl0bGUgfX08L2I+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IFtjbGFzc109XCJyaWdodFwiIFtpbm5lckhUTUxdPVwibGlzdFttLnZhbHVlXVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+ICBcbiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz1cImxpc3QtZ3JvdXAtaXRlbVwiICpuZ0lmPVwibS50eXBlIT0nZGF0YSdcIiBjbGFzcz1cInAtMlwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJyb3dcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNvbC0xMlwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Yj57eyBtLnRpdGxlIH19PC9iPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+ICAgIFxuICAgICAgICAgICAgICAgICAgICA8L25nLWNvbnRhaW5lcj4gICAgIFxuICAgICAgICAgICAgICAgIDwvdWw+XG4gICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICBcbiAgICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuPC9kaXY+Il19