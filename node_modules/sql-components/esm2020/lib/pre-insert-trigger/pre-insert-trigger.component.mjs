import { Component, Input } from '@angular/core';
import { CommonModule } from '@angular/common';
import * as i0 from "@angular/core";
import * as i1 from "../data.service";
export class PreInsertTriggerComponent {
    constructor(_dataService) {
        this._dataService = _dataService;
        this.name = 'pre-insert';
        this.sql = '';
        this.order = '0';
    }
    ngOnDestroy() {
        this.myObs.unsubscribe();
    }
    ngOnChanges(changes) {
    }
    registerService() {
        let count = 0;
        this.myObs = this._dataService.dataSubject.subscribe(d => {
            this.data = d;
            if (this.data.triggers === undefined) {
                let t = [];
                this.data.triggers = t;
            }
            count = 0;
            this.data.triggers.forEach((element) => {
                if (element.type == 'pre-insert-trigger' && element.name == this.name) {
                    count++;
                }
            });
            if (count == 0) {
                let tr = { type: 'pre-insert-trigger', name: this.name, sql: this.sql, order: this.order };
                this.data.triggers.push(tr);
                this._dataService.dataSubject.next(this.data);
            }
        });
    }
    ngAfterViewInit() {
        setTimeout(() => {
            this.registerService();
        }, 1000);
    }
}
PreInsertTriggerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.3", ngImport: i0, type: PreInsertTriggerComponent, deps: [{ token: i1.SQLDataService }], target: i0.ɵɵFactoryTarget.Component });
PreInsertTriggerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.3", type: PreInsertTriggerComponent, isStandalone: true, selector: "pre-insert-trigger", inputs: { name: "name", sql: "sql", order: "order" }, usesOnChanges: true, ngImport: i0, template: "", styles: [""], dependencies: [{ kind: "ngmodule", type: CommonModule }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.3", ngImport: i0, type: PreInsertTriggerComponent, decorators: [{
            type: Component,
            args: [{ selector: 'pre-insert-trigger', standalone: true, imports: [CommonModule], template: "" }]
        }], ctorParameters: function () { return [{ type: i1.SQLDataService }]; }, propDecorators: { name: [{
                type: Input
            }], sql: [{
                type: Input
            }], order: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJlLWluc2VydC10cmlnZ2VyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3NxbC1jb21wb25lbnRzL3NyYy9saWIvcHJlLWluc2VydC10cmlnZ2VyL3ByZS1pbnNlcnQtdHJpZ2dlci5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9zcWwtY29tcG9uZW50cy9zcmMvbGliL3ByZS1pbnNlcnQtdHJpZ2dlci9wcmUtaW5zZXJ0LXRyaWdnZXIuY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQXNELE1BQU0sZUFBZSxDQUFDO0FBQ3JHLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQzs7O0FBVy9DLE1BQU0sT0FBTyx5QkFBeUI7SUFRcEMsWUFBb0IsWUFBNEI7UUFBNUIsaUJBQVksR0FBWixZQUFZLENBQWdCO1FBTnZDLFNBQUksR0FBUSxZQUFZLENBQUM7UUFDekIsUUFBRyxHQUFRLEVBQUUsQ0FBQztRQUNkLFVBQUssR0FBUSxHQUFHLENBQUM7SUFNMUIsQ0FBQztJQUVELFdBQVc7UUFDVCxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQzNCLENBQUM7SUFFRCxXQUFXLENBQUMsT0FBc0I7SUFFbEMsQ0FBQztJQUVELGVBQWU7UUFFYixJQUFJLEtBQUssR0FBUyxDQUFDLENBQUM7UUFDcEIsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUU7WUFDdkQsSUFBSSxDQUFDLElBQUksR0FBQyxDQUFDLENBQUM7WUFDWixJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxLQUFHLFNBQVMsRUFBRTtnQkFDbEMsSUFBSSxDQUFDLEdBQVEsRUFBRSxDQUFDO2dCQUNoQixJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsR0FBQyxDQUFDLENBQUM7YUFDdEI7WUFDRCxLQUFLLEdBQUMsQ0FBQyxDQUFDO1lBQ1IsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsT0FBWSxFQUFFLEVBQUU7Z0JBQzFDLElBQUksT0FBTyxDQUFDLElBQUksSUFBRSxvQkFBb0IsSUFBRSxPQUFPLENBQUMsSUFBSSxJQUFFLElBQUksQ0FBQyxJQUFJLEVBQUU7b0JBQzVELEtBQUssRUFBRSxDQUFDO2lCQUNaO1lBQ0gsQ0FBQyxDQUFDLENBQUM7WUFDRixJQUFJLEtBQUssSUFBRSxDQUFDLEVBQUU7Z0JBQ2IsSUFBSSxFQUFFLEdBQVEsRUFBRSxJQUFJLEVBQUUsb0JBQW9CLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxHQUFHLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQTtnQkFDL0YsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO2dCQUMzQixJQUFJLENBQUMsWUFBWSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO2FBQ2hEO1FBQ0gsQ0FBQyxDQUFDLENBQUE7SUFFSixDQUFDO0lBRUQsZUFBZTtRQUNiLFVBQVUsQ0FBQyxHQUFHLEVBQUU7WUFDZCxJQUFJLENBQUMsZUFBZSxFQUFFLENBQUM7UUFDekIsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ1gsQ0FBQzs7c0hBaERVLHlCQUF5QjswR0FBekIseUJBQXlCLHlKQ1p0QyxFQUFBLHlERFFZLFlBQVk7MkZBSVgseUJBQXlCO2tCQVByQyxTQUFTOytCQUNFLG9CQUFvQixjQUNsQixJQUFJLFdBQ1AsQ0FBQyxZQUFZLENBQUM7cUdBTWQsSUFBSTtzQkFBWixLQUFLO2dCQUNHLEdBQUc7c0JBQVgsS0FBSztnQkFDRyxLQUFLO3NCQUFiLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIElucHV0LCBBZnRlclZpZXdJbml0LCBPbkNoYW5nZXMsIE9uRGVzdHJveSwgU2ltcGxlQ2hhbmdlcyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IFNRTERhdGFTZXJ2aWNlIH0gZnJvbSAnLi4vZGF0YS5zZXJ2aWNlJzsgXG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAncHJlLWluc2VydC10cmlnZ2VyJyxcbiAgc3RhbmRhbG9uZTogdHJ1ZSxcbiAgaW1wb3J0czogW0NvbW1vbk1vZHVsZV0sXG4gIHRlbXBsYXRlVXJsOiAnLi9wcmUtaW5zZXJ0LXRyaWdnZXIuY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZVVybHM6IFsnLi9wcmUtaW5zZXJ0LXRyaWdnZXIuY29tcG9uZW50LmNzcyddXG59KVxuZXhwb3J0IGNsYXNzIFByZUluc2VydFRyaWdnZXJDb21wb25lbnQgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0LCBPbkNoYW5nZXMsIE9uRGVzdHJveSB7XG5cbiAgQElucHV0KCkgbmFtZTogYW55ID0gJ3ByZS1pbnNlcnQnO1xuICBASW5wdXQoKSBzcWw6IGFueSA9ICcnO1xuICBASW5wdXQoKSBvcmRlcjogYW55ID0gJzAnO1xuICBteU9icyE6IFN1YnNjcmlwdGlvbjtcbiAgZGF0YTogYW55O1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgX2RhdGFTZXJ2aWNlOiBTUUxEYXRhU2VydmljZSkge1xuXG4gIH1cblxuICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcbiAgICB0aGlzLm15T2JzLnVuc3Vic2NyaWJlKCk7XG4gIH1cblxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZCB7XG4gICAgXG4gIH1cblxuICByZWdpc3RlclNlcnZpY2UoKSB7XG5cbiAgICBsZXQgY291bnQ6IG51bWJlcj0wO1xuICAgIHRoaXMubXlPYnMgPSB0aGlzLl9kYXRhU2VydmljZS5kYXRhU3ViamVjdC5zdWJzY3JpYmUoZCA9PiB7XG4gICAgICB0aGlzLmRhdGE9ZDtcbiAgICAgIGlmICh0aGlzLmRhdGEudHJpZ2dlcnM9PT11bmRlZmluZWQpIHtcbiAgICAgICAgbGV0IHQ6IGFueSA9IFtdO1xuICAgICAgICB0aGlzLmRhdGEudHJpZ2dlcnM9dDtcbiAgICAgIH1cbiAgICAgIGNvdW50PTA7XG4gICAgICB0aGlzLmRhdGEudHJpZ2dlcnMuZm9yRWFjaCgoZWxlbWVudDogYW55KSA9PiB7XG4gICAgICAgIGlmIChlbGVtZW50LnR5cGU9PSdwcmUtaW5zZXJ0LXRyaWdnZXInJiZlbGVtZW50Lm5hbWU9PXRoaXMubmFtZSkge1xuICAgICAgICAgICAgIGNvdW50Kys7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgIGlmIChjb3VudD09MCkge1xuICAgICAgICBsZXQgdHI6IGFueSA9IHsgdHlwZTogJ3ByZS1pbnNlcnQtdHJpZ2dlcicsIG5hbWU6IHRoaXMubmFtZSwgc3FsOiB0aGlzLnNxbCwgb3JkZXI6IHRoaXMub3JkZXIgfVxuICAgICAgICB0aGlzLmRhdGEudHJpZ2dlcnMucHVzaCh0cik7XG4gICAgICAgICB0aGlzLl9kYXRhU2VydmljZS5kYXRhU3ViamVjdC5uZXh0KHRoaXMuZGF0YSk7XG4gICAgICB9XG4gICAgfSlcblxuICB9XG5cbiAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQge1xuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgdGhpcy5yZWdpc3RlclNlcnZpY2UoKTsgIFxuICAgIH0sIDEwMDApO1xuICB9XG4gIFxufSIsIiJdfQ==