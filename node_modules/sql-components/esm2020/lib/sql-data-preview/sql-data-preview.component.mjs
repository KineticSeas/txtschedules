import { Component, Input, Output, EventEmitter, ContentChildren } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { Ng2SearchPipeModule } from 'ng2-search-filter';
import { NgxTablePaginationModule } from 'ngx-table-pagination';
import * as i0 from "@angular/core";
import * as i1 from "../data.service";
import * as i2 from "@angular/common";
export class SqlDataPreviewComponent {
    constructor(_dataService) {
        this._dataService = _dataService;
        this.format = { title: '', search: '', class: '', style: '', columns: [], buttons: [] };
        this.data = '';
        this.use_parameters = 'N';
        this.function = '';
        this.sql = '';
        this.card = "Y";
        this.card_class = '';
        this.card_style = '';
        this.container_class = 'container-fluid m-2 p-2';
        this.container_style = '';
        this.closable = "N";
        this.bs_row = 'N';
        this.bs_col = '';
        this.list_class = 'table table-striped table-condensed';
        this.list_style = '';
        this.title = 'Title Not Set';
        this.id = '0';
        this.id2 = '0';
        this.id3 = '0';
        this.left = 'col-6';
        this.right = 'col-6';
        this.class = '';
        this.style = "";
        this.row_click = new EventEmitter();
        this.parameters = { page: '', id: '', id2: '', id3: '' };
        this.last_parameters = { page: 'xxx', id: 'xxx', id2: 'xxx', id3: 'xxx' };
        this.adding = 'N';
        this.counter = 0;
        this.page = '';
    }
    ngOnInit() {
    }
    rowClick(m) {
        this.row_click.emit(m);
    }
    ngAfterViewInit() {
        if (this.use_parameters === 'Y') {
            this._dataService.paramSubject.subscribe(d => {
                this.parameters = d;
                this._dataService.getSQL(this.sql, this.parameters).subscribe((data) => {
                    this.list = data;
                    this.list.forEach(function (value) {
                        value.active = 'N';
                    });
                });
            });
        }
        if (this.use_parameters === 'N') {
            this.parameters.page = this.page;
            this.parameters.id = this.id;
            this.parameters.id2 = this.id2;
            this.parameters.id3 = this.id3;
            console.log(this.parameters);
            this._dataService.getSQL(this.sql, this.parameters).subscribe((data) => {
                if (data[0] !== undefined) {
                    this.list = data[0];
                }
            });
        }
        this.format.title = this.title;
        this.format.class = this.class;
        this.format.style = this.style;
        this.row_list.forEach((e) => {
            let column_template = { column_name: '', class: '', type: '', style: '', title: '', value: '' };
            if (e.nativeElement.nodeName == 'TH') {
                column_template.type = "data";
                column_template.value = e.nativeElement.id;
                column_template.title = e.nativeElement.innerHTML;
            }
            if (e.nativeElement.nodeName == 'TD') {
                column_template.type = "boilerplate";
                column_template.value = '';
                column_template.title = e.nativeElement.innerHTML;
            }
            if (e.nativeElement.className !== undefined) {
                column_template.class = e.nativeElement.className;
            }
            column_template.style = e.nativeElement.style.cssText;
            this.format.columns.push(column_template);
        });
        if (this.last_parameters.page != this.parameters.page ||
            this.last_parameters.id != this.parameters.id ||
            this.last_parameters.id2 != this.parameters.id2 ||
            this.last_parameters.id3 != this.parameters.id3) {
            this.last_parameters.page = this.parameters.page;
            this.last_parameters.id = this.parameters.id;
            this.last_parameters.id2 = this.parameters.id2;
            this.last_parameters.id3 = this.parameters.id3;
            console.log("Getting SQL");
            console.log(this.sql);
            console.log(this.parameters);
            this.myDataObs = this._dataService.getSQL(this.sql, this.parameters).subscribe((data) => {
                if (data[0] !== undefined) {
                    this.list = data[0];
                    console.log(this.list);
                }
            });
        }
    }
    tableRefresh() {
        this.myDataObs.unsubscribe();
        this.myDataObs = this._dataService.getSQL(this.sql, this.parameters).subscribe((data) => {
            if (data[0] !== undefined) {
                this.list = data[0];
            }
        });
    }
    ngOnDestroy() {
        //  this.myObs.unsubscribe();
        //  this.myDataObs.unsubscribe();
    }
}
SqlDataPreviewComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.3", ngImport: i0, type: SqlDataPreviewComponent, deps: [{ token: i1.SQLDataService }], target: i0.ɵɵFactoryTarget.Component });
SqlDataPreviewComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.3", type: SqlDataPreviewComponent, isStandalone: true, selector: "sql-data-preview", inputs: { use_parameters: "use_parameters", function: "function", sql: "sql", card: "card", card_class: "card_class", card_style: "card_style", container_class: "container_class", container_style: "container_style", closable: "closable", bs_row: "bs_row", bs_col: "bs_col", list_class: "list_class", list_style: "list_style", title: "title", id: "id", id2: "id2", id3: "id3", left: "left", right: "right", class: "class", style: "style" }, outputs: { row_click: "row_click" }, queries: [{ propertyName: "row_list", predicate: ["row"] }], ngImport: i0, template: "<!-- NOT A CARD FORMAT-->\n<div *ngIf=\"card!='Y'\" [class]=\"container_class\" [style]=\"container_style\">\n        <div class=\"card\">\n                    <ul class=\"list-group list-group-flush\">\n                        <li class=\"list-group-item\" *ngIf=\"format.title!=''\" style=\"background-color: lightgray;\">{{ title }}</li>\n                        <ng-container *ngFor=\"let m of format.columns\">\n                            <li class=\"list-group-item\" *ngIf=\"m.type=='data'\">\n                                <div class=\"row\">\n                                    <div [class]=\"left\">\n                                    <b>{{ m.title }}</b>\n                                    </div>\n                                    <div [class]=\"right\" [innerHTML]=\"list[m.value]\">\n                                    </div>\n                                </div>\n                            </li>  \n                            <li class=\"list-group-item\" *ngIf=\"m.type!='data'\">\n                                <div class=\"row\">\n                                    <div class=\"col-12\">\n                                    <b>{{ m.title }}</b>\n                                    </div>\n                                </div>\n                            </li>    \n                        </ng-container>     \n                    </ul>\n        </div>              \n</div>\n<div *ngIf=\"card=='Y'\" [class]=\"container_class\" [style]=\"container_style\">\n    <div class=\"card\">\n        <div class=\"card-header\">\n          {{ title }}\n        </div>\n        <div *ngIf=\"adding=='Y'\" class=\"card-body\">\n\n        </div>\n        <div class=\"card-body\">\n            <ul class=\"list-group list-group-flush\">\n                <ng-container *ngFor=\"let m of format.columns\">\n                    <li class=\"list-group-item\" *ngIf=\"m.type=='data'\" class=\"p-2\">\n                        <div class=\"row\">\n                            <div [class]=\"left\">\n                            <b>{{ m.title }}</b>\n                            </div>\n                            <div [class]=\"right\" [innerHTML]=\"list[m.value]\">\n                            </div>\n                        </div>\n                    </li>  \n                    <li class=\"list-group-item\" *ngIf=\"m.type!='data'\" class=\"p-2\">\n                        <div class=\"row\">\n                            <div class=\"col-12\">\n                            <b>{{ m.title }}</b>\n                            </div>\n                        </div>\n                    </li>    \n                </ng-container>     \n            </ul>\n        </div>\n      </div>\n</div>", styles: [""], dependencies: [{ kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "ngmodule", type: FormsModule }, { kind: "ngmodule", type: NgxTablePaginationModule }, { kind: "ngmodule", type: Ng2SearchPipeModule }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.3", ngImport: i0, type: SqlDataPreviewComponent, decorators: [{
            type: Component,
            args: [{ selector: 'sql-data-preview', standalone: true, imports: [CommonModule,
                        FormsModule,
                        NgxTablePaginationModule,
                        Ng2SearchPipeModule], template: "<!-- NOT A CARD FORMAT-->\n<div *ngIf=\"card!='Y'\" [class]=\"container_class\" [style]=\"container_style\">\n        <div class=\"card\">\n                    <ul class=\"list-group list-group-flush\">\n                        <li class=\"list-group-item\" *ngIf=\"format.title!=''\" style=\"background-color: lightgray;\">{{ title }}</li>\n                        <ng-container *ngFor=\"let m of format.columns\">\n                            <li class=\"list-group-item\" *ngIf=\"m.type=='data'\">\n                                <div class=\"row\">\n                                    <div [class]=\"left\">\n                                    <b>{{ m.title }}</b>\n                                    </div>\n                                    <div [class]=\"right\" [innerHTML]=\"list[m.value]\">\n                                    </div>\n                                </div>\n                            </li>  \n                            <li class=\"list-group-item\" *ngIf=\"m.type!='data'\">\n                                <div class=\"row\">\n                                    <div class=\"col-12\">\n                                    <b>{{ m.title }}</b>\n                                    </div>\n                                </div>\n                            </li>    \n                        </ng-container>     \n                    </ul>\n        </div>              \n</div>\n<div *ngIf=\"card=='Y'\" [class]=\"container_class\" [style]=\"container_style\">\n    <div class=\"card\">\n        <div class=\"card-header\">\n          {{ title }}\n        </div>\n        <div *ngIf=\"adding=='Y'\" class=\"card-body\">\n\n        </div>\n        <div class=\"card-body\">\n            <ul class=\"list-group list-group-flush\">\n                <ng-container *ngFor=\"let m of format.columns\">\n                    <li class=\"list-group-item\" *ngIf=\"m.type=='data'\" class=\"p-2\">\n                        <div class=\"row\">\n                            <div [class]=\"left\">\n                            <b>{{ m.title }}</b>\n                            </div>\n                            <div [class]=\"right\" [innerHTML]=\"list[m.value]\">\n                            </div>\n                        </div>\n                    </li>  \n                    <li class=\"list-group-item\" *ngIf=\"m.type!='data'\" class=\"p-2\">\n                        <div class=\"row\">\n                            <div class=\"col-12\">\n                            <b>{{ m.title }}</b>\n                            </div>\n                        </div>\n                    </li>    \n                </ng-container>     \n            </ul>\n        </div>\n      </div>\n</div>" }]
        }], ctorParameters: function () { return [{ type: i1.SQLDataService }]; }, propDecorators: { row_list: [{
                type: ContentChildren,
                args: ['row']
            }], use_parameters: [{
                type: Input
            }], function: [{
                type: Input
            }], sql: [{
                type: Input
            }], card: [{
                type: Input
            }], card_class: [{
                type: Input
            }], card_style: [{
                type: Input
            }], container_class: [{
                type: Input
            }], container_style: [{
                type: Input
            }], closable: [{
                type: Input
            }], bs_row: [{
                type: Input
            }], bs_col: [{
                type: Input
            }], list_class: [{
                type: Input
            }], list_style: [{
                type: Input
            }], title: [{
                type: Input
            }], id: [{
                type: Input
            }], id2: [{
                type: Input
            }], id3: [{
                type: Input
            }], left: [{
                type: Input
            }], right: [{
                type: Input
            }], class: [{
                type: Input
            }], style: [{
                type: Input
            }], row_click: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,