import { Component, Input, Output, EventEmitter } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { MatFormFieldModule } from '@angular/material/form-field';
import { MatInputModule } from '@angular/material/input';
import { MatOptionModule } from '@angular/material/core';
import { MatSelectModule } from '@angular/material/select';
import * as i0 from "@angular/core";
import * as i1 from "../data.service";
import * as i2 from "@angular/common";
import * as i3 from "@angular/forms";
import * as i4 from "@angular/material/form-field";
import * as i5 from "@angular/material/input";
import * as i6 from "@angular/material/core";
import * as i7 from "@angular/material/select";
export class SqlDataSelectComponent {
    constructor(_dataService) {
        this._dataService = _dataService;
        this.value = '';
        this.fieldData = '';
        this.appearance = 'outline';
        this.native = 'Y';
        this.sql = '';
        this.handler = '';
        this.col = '';
        this.id = '';
        this.id2 = '';
        this.id3 = '';
        this.class = '';
        this.style = '';
        this.hint = '';
        this.icon = '';
        this.label = 'Label not set';
        this.placeholder = '';
        this.bs_row = 'Y';
        this.bs_col = 'col-12';
        this.top_label = 'N';
        this.counter = 0;
        this.change = new EventEmitter();
        this.parameters = { page: '', id: '', id2: '', id3: '' };
        this.myObs = this._dataService.dataSubject.subscribe(d => {
            this.data = d;
            this.fieldData = this.data;
            this.value = this.fieldData[this.col];
            this.counter++;
        });
    }
    ngAfterViewInit() {
        this.parameters.id = this.id;
        this.parameters.id2 = this.id2;
        this.parameters.id3 = this.id3;
        this.myDataObs = this._dataService.getSelect(this.sql, this.parameters).subscribe((data) => {
            this.selectData = data;
        });
    }
    ngOnInit() {
    }
    handleChange() {
        this.fieldData['submit'] = 'N';
        this.fieldData[this.col] = this.value;
        this._dataService.pushNotification(this.fieldData);
    }
    ngOnDestroy() {
        this.myObs.unsubscribe();
        this.myDataObs.unsubscribe();
    }
}
SqlDataSelectComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.3", ngImport: i0, type: SqlDataSelectComponent, deps: [{ token: i1.SQLDataService }], target: i0.ɵɵFactoryTarget.Component });
SqlDataSelectComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.3", type: SqlDataSelectComponent, isStandalone: true, selector: "sql-data-select", inputs: { appearance: "appearance", native: "native", sql: "sql", handler: "handler", col: "col", data: "data", id: "id", id2: "id2", id3: "id3", class: "class", style: "style", hint: "hint", icon: "icon", label: "label", placeholder: "placeholder", bs_row: "bs_row", bs_col: "bs_col", top_label: "top_label" }, outputs: { change: "change" }, ngImport: i0, template: "<ng-container *ngIf=\"appearance=='fill'\">\n    <ng-container *ngIf=\"native=='Y'\">\n        <!-- New Row -->\n        <div *ngIf=\"bs_row=='Y'\" class=\"row\">\n            <div [class]=\"bs_col\">\n                <p *ngIf=\"top_label=='Y'\">{{ label }}</p>\n                <mat-form-field appearance=\"fill\" [style]=\"style\" [class]=\"class\">\n                    <mat-label>{{ label }}</mat-label>\n                    <select [(ngModel)]=\"value\" (change)=\"handleChange()\" matNativeControl [style]=\"style\" [class]=\"class\">\n                      <option *ngFor=\"let m of selectData\" [value]=\"m.id\">{{ m.option }}</option>\n                    </select>\n                  </mat-form-field>\n            </div>\n        </div>\n        <!-- No New Row but column -->\n        <span *ngIf=\"bs_row!='Y'&&bs_col!=''\">\n            <div [class]=\"bs_col\">\n                <p *ngIf=\"top_label=='Y'\">{{ label }}</p>\n                <mat-form-field appearance=\"fill\" [style]=\"style\" [class]=\"class\">\n                    <mat-label>{{ label }}</mat-label>\n                    <select [(ngModel)]=\"value\"  matNativeControl (change)=\"handleChange()\" [style]=\"style\" [class]=\"class\">\n                      <option *ngFor=\"let m of selectData\" [value]=\"m.id\">{{ m.option }}</option>\n                    </select>\n                  </mat-form-field>\n            </div>\n          </span>\n        <!-- No New Row and no column -->\n        <span *ngIf=\"bs_row!='Y'&&bs_col==''\">\n            <p *ngIf=\"top_label=='Y'\">{{ label }}</p>\n            <mat-form-field appearance=\"fill\" [style]=\"style\" [class]=\"class\">\n                <mat-label>{{ label }}</mat-label>\n                <select  [(ngModel)]=\"value\" matNativeControl (change)=\"handleChange()\" [style]=\"style\" [class]=\"class\">\n                  <option *ngFor=\"let m of selectData\" [value]=\"m.id\">{{ m.option }}</option>\n                </select>\n              </mat-form-field>\n            </span>\n          </ng-container>\n    <span *ngIf=\"native=='N'\">\n        <!-- New Row -->\n        <div *ngIf=\"bs_row=='Y'\" class=\"row\">\n            <div [class]=\"bs_col\">\n                <p *ngIf=\"top_label=='Y'\">{{ label }}</p>\n                <mat-form-field appearance=\"fill\" [style]=\"style\" [class]=\"class\">\n                    <mat-label>{{ label }}</mat-label>\n                    <mat-select  [(ngModel)]=\"value\" (selectionChange)=\"handleChange()\" [style]=\"style\" [class]=\"class\">\n                      <mat-option *ngFor=\"let m of selectData\" [value]=\"m.id\">\n                        {{ m.option }}\n                      </mat-option>\n                    </mat-select>\n                  </mat-form-field>\n            </div>\n        </div>\n        <!-- No New Row but column -->\n        <span *ngIf=\"bs_row!='Y'&&bs_col!=''\">\n            <div [class]=\"bs_col\">\n                <p *ngIf=\"top_label=='Y'\">{{ label }}</p>\n                <mat-form-field appearance=\"fill\"  [style]=\"style\" [class]=\"class\">\n                    <mat-label>{{ label }}</mat-label>\n                    <mat-select  [(ngModel)]=\"value\" (selectionChange)=\"handleChange()\" [style]=\"style\" [class]=\"class\">\n                      <mat-option *ngFor=\"let m of selectData\" [value]=\"m.id\">\n                        {{ m.option }}\n                      </mat-option>\n                    </mat-select>\n                  </mat-form-field>\n            </div>\n          </span>\n        <!-- No New Row and no column -->\n        <span *ngIf=\"bs_row!='Y'&&bs_col==''\">\n            <p *ngIf=\"top_label=='Y'\">{{ label }}</p>\n            <mat-form-field appearance=\"fill\"  [style]=\"style\" [class]=\"class\">\n                <mat-label>{{ label }}</mat-label>\n                <mat-select  [(ngModel)]=\"value\" (selectionChange)=\"handleChange()\" [style]=\"style\" [class]=\"class\">\n                  <mat-option *ngFor=\"let m of selectData\" [value]=\"m.id\"  [style]=\"style\" [class]=\"class\">\n                    {{ m.option }}\n                  </mat-option>\n                </mat-select>\n              </mat-form-field>\n            </span>\n          </span>\n</ng-container>\n<!-- OUTLINE Style -->\n<ng-container *ngIf=\"appearance=='outline'\">\n<ng-container *ngIf=\"native=='Y'\">\n    <!-- New Row -->\n    <div *ngIf=\"bs_row=='Y'\" class=\"row\">\n        <div [class]=\"bs_col\">\n            <p *ngIf=\"top_label=='Y'\">{{ label }}</p>\n            <mat-form-field appearance=\"outline\" [style]=\"style\" [class]=\"class\">\n                <mat-label>{{ label }}</mat-label>\n                <select  [(ngModel)]=\"value\" matNativeControl  (change)=\"handleChange()\" [style]=\"style\" [class]=\"class\">\n                  <option *ngFor=\"let m of selectData\" [value]=\"m.id\">{{ m.option }}</option>\n                </select>\n              </mat-form-field>\n        </div>\n    </div>\n    <!-- No New Row but column -->\n    <span *ngIf=\"bs_row!='Y'&&bs_col!=''\">\n        <div [class]=\"bs_col\">\n            <p *ngIf=\"top_label=='Y'\">{{ label }}</p>\n            <mat-form-field appearance=\"outline\" [style]=\"style\" [class]=\"class\">\n                <mat-label>{{ label }}</mat-label>\n                <select  [(ngModel)]=\"value\" matNativeControl  (change)=\"handleChange()\" [style]=\"style\" [class]=\"class\">\n                  <option *ngFor=\"let m of selectData\" [value]=\"m.id\">{{ m.option }}</option>\n                </select>\n              </mat-form-field>\n        </div>\n    </span>\n    <!-- No New Row and no column -->\n    <ng-container *ngIf=\"bs_row!='Y'&&bs_col==''\">\n        <p *ngIf=\"top_label=='Y'\">{{ label }}</p>\n        <mat-form-field appearance=\"outline\" [style]=\"style\" [class]=\"class\">\n            <mat-label>{{ label }}</mat-label>\n            <select  [(ngModel)]=\"value\" matNativeControl  (change)=\"handleChange()\" [style]=\"style\" [class]=\"class\">\n              <option *ngFor=\"let m of selectData\" [value]=\"m.id\">{{ m.option }}</option>\n            </select>\n          </mat-form-field>\n        </ng-container>\n      </ng-container>\n<ng-container *ngIf=\"native=='N'\">\n    <!-- New Row -->\n    <div *ngIf=\"bs_row=='Y'\" class=\"row\">\n        <div [class]=\"bs_col\">\n            <p *ngIf=\"top_label=='Y'\">{{ label }}</p>\n            <mat-form-field appearance=\"fill\"  [style]=\"style\" [class]=\"class\">\n                <mat-label>{{ label }}</mat-label>\n                <mat-select  [(ngModel)]=\"value\"  (selectionChange)=\"handleChange()\" [style]=\"style\" [class]=\"class\">\n                  <mat-option *ngFor=\"let m of selectData\" [value]=\"m.id\">\n                    {{ m.option }}\n                  </mat-option>\n                </mat-select>\n              </mat-form-field>\n        </div>\n    </div>\n    <!-- No New Row but column -->\n    <ng-container *ngIf=\"bs_row!='Y'&&bs_col!=''\">\n        <div [class]=\"bs_col\">\n            <p *ngIf=\"top_label=='Y'\">{{ label }}</p>\n            <mat-form-field appearance=\"outline\"  [style]=\"style\" [class]=\"class\">\n                <mat-label>{{ label }}</mat-label>\n                <mat-select  [(ngModel)]=\"value\"  (selectionChange)=\"handleChange()\" [style]=\"style\" [class]=\"class\">\n                  <mat-option *ngFor=\"let m of selectData\" [value]=\"m.id\">\n                    {{ m.option }}\n                  </mat-option>\n                </mat-select>\n              </mat-form-field>\n        </div>\n      </ng-container>\n    <!-- No New Row and no column -->\n    <ng-container *ngIf=\"bs_row!='Y'&&bs_col==''\">\n        <p *ngIf=\"top_label=='Y'\">{{ label }}</p>\n        <mat-form-field appearance=\"outline\"  [style]=\"style\" [class]=\"class\">\n            <mat-label>{{ label }}</mat-label>\n            <mat-select  [(ngModel)]=\"value\"  (selectionChange)=\"handleChange()\" [style]=\"style\" [class]=\"class\">\n              <mat-option *ngFor=\"let m of selectData\" [value]=\"m.id\">\n                {{ m.option }}\n              </mat-option>\n            </mat-select>\n          </mat-form-field>\n        </ng-container>\n      </ng-container>\n    </ng-container>\n", styles: [""], dependencies: [{ kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "ngmodule", type: FormsModule }, { kind: "directive", type: i3.NgSelectOption, selector: "option", inputs: ["ngValue", "value"] }, { kind: "directive", type: i3.ɵNgSelectMultipleOption, selector: "option", inputs: ["ngValue", "value"] }, { kind: "directive", type: i3.SelectControlValueAccessor, selector: "select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]", inputs: ["compareWith"] }, { kind: "directive", type: i3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "ngmodule", type: MatFormFieldModule }, { kind: "component", type: i4.MatFormField, selector: "mat-form-field", inputs: ["hideRequiredMarker", "color", "floatLabel", "appearance", "subscriptSizing", "hintLabel"], exportAs: ["matFormField"] }, { kind: "directive", type: i4.MatLabel, selector: "mat-label" }, { kind: "ngmodule", type: MatInputModule }, { kind: "directive", type: i5.MatInput, selector: "input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]", inputs: ["disabled", "id", "placeholder", "name", "required", "type", "errorStateMatcher", "aria-describedby", "value", "readonly"], exportAs: ["matInput"] }, { kind: "ngmodule", type: MatOptionModule }, { kind: "component", type: i6.MatOption, selector: "mat-option", exportAs: ["matOption"] }, { kind: "ngmodule", type: MatSelectModule }, { kind: "component", type: i7.MatSelect, selector: "mat-select", inputs: ["disabled", "disableRipple", "tabIndex", "hideSingleSelectionIndicator"], exportAs: ["matSelect"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.3", ngImport: i0, type: SqlDataSelectComponent, decorators: [{
            type: Component,
            args: [{ selector: 'sql-data-select', standalone: true, imports: [CommonModule, FormsModule, MatFormFieldModule,
                        MatInputModule, MatOptionModule, MatSelectModule], template: "<ng-container *ngIf=\"appearance=='fill'\">\n    <ng-container *ngIf=\"native=='Y'\">\n        <!-- New Row -->\n        <div *ngIf=\"bs_row=='Y'\" class=\"row\">\n            <div [class]=\"bs_col\">\n                <p *ngIf=\"top_label=='Y'\">{{ label }}</p>\n                <mat-form-field appearance=\"fill\" [style]=\"style\" [class]=\"class\">\n                    <mat-label>{{ label }}</mat-label>\n                    <select [(ngModel)]=\"value\" (change)=\"handleChange()\" matNativeControl [style]=\"style\" [class]=\"class\">\n                      <option *ngFor=\"let m of selectData\" [value]=\"m.id\">{{ m.option }}</option>\n                    </select>\n                  </mat-form-field>\n            </div>\n        </div>\n        <!-- No New Row but column -->\n        <span *ngIf=\"bs_row!='Y'&&bs_col!=''\">\n            <div [class]=\"bs_col\">\n                <p *ngIf=\"top_label=='Y'\">{{ label }}</p>\n                <mat-form-field appearance=\"fill\" [style]=\"style\" [class]=\"class\">\n                    <mat-label>{{ label }}</mat-label>\n                    <select [(ngModel)]=\"value\"  matNativeControl (change)=\"handleChange()\" [style]=\"style\" [class]=\"class\">\n                      <option *ngFor=\"let m of selectData\" [value]=\"m.id\">{{ m.option }}</option>\n                    </select>\n                  </mat-form-field>\n            </div>\n          </span>\n        <!-- No New Row and no column -->\n        <span *ngIf=\"bs_row!='Y'&&bs_col==''\">\n            <p *ngIf=\"top_label=='Y'\">{{ label }}</p>\n            <mat-form-field appearance=\"fill\" [style]=\"style\" [class]=\"class\">\n                <mat-label>{{ label }}</mat-label>\n                <select  [(ngModel)]=\"value\" matNativeControl (change)=\"handleChange()\" [style]=\"style\" [class]=\"class\">\n                  <option *ngFor=\"let m of selectData\" [value]=\"m.id\">{{ m.option }}</option>\n                </select>\n              </mat-form-field>\n            </span>\n          </ng-container>\n    <span *ngIf=\"native=='N'\">\n        <!-- New Row -->\n        <div *ngIf=\"bs_row=='Y'\" class=\"row\">\n            <div [class]=\"bs_col\">\n                <p *ngIf=\"top_label=='Y'\">{{ label }}</p>\n                <mat-form-field appearance=\"fill\" [style]=\"style\" [class]=\"class\">\n                    <mat-label>{{ label }}</mat-label>\n                    <mat-select  [(ngModel)]=\"value\" (selectionChange)=\"handleChange()\" [style]=\"style\" [class]=\"class\">\n                      <mat-option *ngFor=\"let m of selectData\" [value]=\"m.id\">\n                        {{ m.option }}\n                      </mat-option>\n                    </mat-select>\n                  </mat-form-field>\n            </div>\n        </div>\n        <!-- No New Row but column -->\n        <span *ngIf=\"bs_row!='Y'&&bs_col!=''\">\n            <div [class]=\"bs_col\">\n                <p *ngIf=\"top_label=='Y'\">{{ label }}</p>\n                <mat-form-field appearance=\"fill\"  [style]=\"style\" [class]=\"class\">\n                    <mat-label>{{ label }}</mat-label>\n                    <mat-select  [(ngModel)]=\"value\" (selectionChange)=\"handleChange()\" [style]=\"style\" [class]=\"class\">\n                      <mat-option *ngFor=\"let m of selectData\" [value]=\"m.id\">\n                        {{ m.option }}\n                      </mat-option>\n                    </mat-select>\n                  </mat-form-field>\n            </div>\n          </span>\n        <!-- No New Row and no column -->\n        <span *ngIf=\"bs_row!='Y'&&bs_col==''\">\n            <p *ngIf=\"top_label=='Y'\">{{ label }}</p>\n            <mat-form-field appearance=\"fill\"  [style]=\"style\" [class]=\"class\">\n                <mat-label>{{ label }}</mat-label>\n                <mat-select  [(ngModel)]=\"value\" (selectionChange)=\"handleChange()\" [style]=\"style\" [class]=\"class\">\n                  <mat-option *ngFor=\"let m of selectData\" [value]=\"m.id\"  [style]=\"style\" [class]=\"class\">\n                    {{ m.option }}\n                  </mat-option>\n                </mat-select>\n              </mat-form-field>\n            </span>\n          </span>\n</ng-container>\n<!-- OUTLINE Style -->\n<ng-container *ngIf=\"appearance=='outline'\">\n<ng-container *ngIf=\"native=='Y'\">\n    <!-- New Row -->\n    <div *ngIf=\"bs_row=='Y'\" class=\"row\">\n        <div [class]=\"bs_col\">\n            <p *ngIf=\"top_label=='Y'\">{{ label }}</p>\n            <mat-form-field appearance=\"outline\" [style]=\"style\" [class]=\"class\">\n                <mat-label>{{ label }}</mat-label>\n                <select  [(ngModel)]=\"value\" matNativeControl  (change)=\"handleChange()\" [style]=\"style\" [class]=\"class\">\n                  <option *ngFor=\"let m of selectData\" [value]=\"m.id\">{{ m.option }}</option>\n                </select>\n              </mat-form-field>\n        </div>\n    </div>\n    <!-- No New Row but column -->\n    <span *ngIf=\"bs_row!='Y'&&bs_col!=''\">\n        <div [class]=\"bs_col\">\n            <p *ngIf=\"top_label=='Y'\">{{ label }}</p>\n            <mat-form-field appearance=\"outline\" [style]=\"style\" [class]=\"class\">\n                <mat-label>{{ label }}</mat-label>\n                <select  [(ngModel)]=\"value\" matNativeControl  (change)=\"handleChange()\" [style]=\"style\" [class]=\"class\">\n                  <option *ngFor=\"let m of selectData\" [value]=\"m.id\">{{ m.option }}</option>\n                </select>\n              </mat-form-field>\n        </div>\n    </span>\n    <!-- No New Row and no column -->\n    <ng-container *ngIf=\"bs_row!='Y'&&bs_col==''\">\n        <p *ngIf=\"top_label=='Y'\">{{ label }}</p>\n        <mat-form-field appearance=\"outline\" [style]=\"style\" [class]=\"class\">\n            <mat-label>{{ label }}</mat-label>\n            <select  [(ngModel)]=\"value\" matNativeControl  (change)=\"handleChange()\" [style]=\"style\" [class]=\"class\">\n              <option *ngFor=\"let m of selectData\" [value]=\"m.id\">{{ m.option }}</option>\n            </select>\n          </mat-form-field>\n        </ng-container>\n      </ng-container>\n<ng-container *ngIf=\"native=='N'\">\n    <!-- New Row -->\n    <div *ngIf=\"bs_row=='Y'\" class=\"row\">\n        <div [class]=\"bs_col\">\n            <p *ngIf=\"top_label=='Y'\">{{ label }}</p>\n            <mat-form-field appearance=\"fill\"  [style]=\"style\" [class]=\"class\">\n                <mat-label>{{ label }}</mat-label>\n                <mat-select  [(ngModel)]=\"value\"  (selectionChange)=\"handleChange()\" [style]=\"style\" [class]=\"class\">\n                  <mat-option *ngFor=\"let m of selectData\" [value]=\"m.id\">\n                    {{ m.option }}\n                  </mat-option>\n                </mat-select>\n              </mat-form-field>\n        </div>\n    </div>\n    <!-- No New Row but column -->\n    <ng-container *ngIf=\"bs_row!='Y'&&bs_col!=''\">\n        <div [class]=\"bs_col\">\n            <p *ngIf=\"top_label=='Y'\">{{ label }}</p>\n            <mat-form-field appearance=\"outline\"  [style]=\"style\" [class]=\"class\">\n                <mat-label>{{ label }}</mat-label>\n                <mat-select  [(ngModel)]=\"value\"  (selectionChange)=\"handleChange()\" [style]=\"style\" [class]=\"class\">\n                  <mat-option *ngFor=\"let m of selectData\" [value]=\"m.id\">\n                    {{ m.option }}\n                  </mat-option>\n                </mat-select>\n              </mat-form-field>\n        </div>\n      </ng-container>\n    <!-- No New Row and no column -->\n    <ng-container *ngIf=\"bs_row!='Y'&&bs_col==''\">\n        <p *ngIf=\"top_label=='Y'\">{{ label }}</p>\n        <mat-form-field appearance=\"outline\"  [style]=\"style\" [class]=\"class\">\n            <mat-label>{{ label }}</mat-label>\n            <mat-select  [(ngModel)]=\"value\"  (selectionChange)=\"handleChange()\" [style]=\"style\" [class]=\"class\">\n              <mat-option *ngFor=\"let m of selectData\" [value]=\"m.id\">\n                {{ m.option }}\n              </mat-option>\n            </mat-select>\n          </mat-form-field>\n        </ng-container>\n      </ng-container>\n    </ng-container>\n" }]
        }], ctorParameters: function () { return [{ type: i1.SQLDataService }]; }, propDecorators: { appearance: [{
                type: Input
            }], native: [{
                type: Input
            }], sql: [{
                type: Input
            }], handler: [{
                type: Input
            }], col: [{
                type: Input
            }], data: [{
                type: Input
            }], id: [{
                type: Input
            }], id2: [{
                type: Input
            }], id3: [{
                type: Input
            }], class: [{
                type: Input
            }], style: [{
                type: Input
            }], hint: [{
                type: Input
            }], icon: [{
                type: Input
            }], label: [{
                type: Input
            }], placeholder: [{
                type: Input
            }], bs_row: [{
                type: Input
            }], bs_col: [{
                type: Input
            }], top_label: [{
                type: Input
            }], change: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,