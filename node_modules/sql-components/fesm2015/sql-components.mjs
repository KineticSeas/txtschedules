import * as i0 from '@angular/core';
import { Injectable, Component, Inject, EventEmitter, Input, Output, ContentChildren, NgModule } from '@angular/core';
import * as i2 from '@angular/common';
import { CommonModule, DatePipe } from '@angular/common';
import * as i6$2 from '@angular/material/core';
import { MatCommonModule, MAT_DATE_FORMATS, DateAdapter, MAT_DATE_LOCALE, MatNativeDateModule, MatOptionModule } from '@angular/material/core';
import { BehaviorSubject, of, catchError } from 'rxjs';
import * as CryptoJS from 'crypto-js';
import * as i1 from '@angular/common/http';
import { HttpClientModule } from '@angular/common/http';
import * as i3 from '@angular/forms';
import { FormsModule, FormControl, ReactiveFormsModule } from '@angular/forms';
import * as i5 from 'ng2-search-filter';
import { Ng2SearchPipeModule } from 'ng2-search-filter';
import * as i4 from 'ngx-table-pagination';
import { NgxTablePaginationModule } from 'ngx-table-pagination';
import * as i4$1 from '@angular/material/form-field';
import { MatFormFieldModule } from '@angular/material/form-field';
import * as i5$1 from '@angular/material/input';
import { MatInputModule } from '@angular/material/input';
import { MatCheckboxModule } from '@angular/material/checkbox';
import * as i3$1 from '@fullcalendar/angular';
import { FullCalendarModule } from '@fullcalendar/angular';
import dayGridPlugin from '@fullcalendar/daygrid';
import InteractionPlugin from '@fullcalendar/interaction';
import * as i2$1 from '@angular/router';
import { RouterModule } from '@angular/router';
import * as i6 from '@angular/material/datepicker';
import { MatDatepickerModule } from '@angular/material/datepicker';
import { MomentDateAdapter, MomentDateModule } from '@angular/material-moment-adapter';
import * as i5$2 from '@angular/material/select';
import { MatSelectModule } from '@angular/material/select';
import * as i6$1 from '@angular/cdk/text-field';
import * as i4$2 from '@angular/material/radio';
import { MatRadioModule } from '@angular/material/radio';
import * as i2$2 from '@angular/material/dialog';
import { MatDialogModule } from '@angular/material/dialog';
import { MatButtonModule } from '@angular/material/button';
import * as i4$3 from 'ngx-editor';
import { toHTML, Editor, NgxEditorModule } from 'ngx-editor';

class SqlComponentsService {
    constructor() { }
}
SqlComponentsService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.3", ngImport: i0, type: SqlComponentsService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
SqlComponentsService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.3", ngImport: i0, type: SqlComponentsService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.3", ngImport: i0, type: SqlComponentsService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return []; } });

class SqlComponentsComponent {
}
SqlComponentsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.3", ngImport: i0, type: SqlComponentsComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
SqlComponentsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.3", type: SqlComponentsComponent, selector: "lib-sql-components", ngImport: i0, template: `
    <p>
      sql-components works!
    </p>
  `, isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.3", ngImport: i0, type: SqlComponentsComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lib-sql-components', template: `
    <p>
      sql-components works!
    </p>
  ` }]
        }] });

class SQLDataService {
    constructor(http, webserver) {
        this.http = http;
        this.webserver = webserver;
        this.dataSubject = new BehaviorSubject({});
        this.pageSubject = new BehaviorSubject({});
        this.paramSubject = new BehaviorSubject({ page: "AAA", id: "", id2: "", id3: "", id_col: "id", id2_col: "", id3_col: "" });
        this.routerSubject = new BehaviorSubject({});
        this.containerSubject = new BehaviorSubject({ id: "", id2: "", id3: "", id_col: "id", id2_col: "", id3_col: "" });
        this.dataValue = { id: "hello", id2: "world" };
        this.TheSecret = "hide-triggers";
        this.counter = 0;
        if (webserver === '' || webserver === undefined) {
            alert("Missing Provider in module.ts. It should include: { provide: WEBSERVER, useValue: 'https://example.com/api/' }");
        }
        else {
            this.base = webserver;
        }
        this.url = this.base + 'sqlcomponents.php';
    }
    getLocalStorage() {
        //
        if (localStorage.getItem('uid') === null) {
            this.uid = "0";
        }
        else {
            this.uid = localStorage.getItem('uid');
        }
        if (localStorage.getItem('un') === null) {
            this.un = "";
        }
        else {
            this.un = localStorage.getItem('un');
        }
        if (localStorage.getItem('role') === null) {
            this.role = "";
        }
        else {
            this.role = localStorage.getItem('role');
        }
    }
    getSelect(sql, params) {
        this.getLocalStorage();
        const data = {
            "q": 'getselect',
            "sql": sql,
            "parameters": params,
            "uid": this.uid
        };
        this.t = this.http.post(this.base + "sqlcomponents.php", data);
        return this.t;
    }
    getColumns(sql, params) {
        this.getLocalStorage();
        const data = {
            "q": 'getcolumns',
            "sql": sql,
            "parameters": params,
            "uid": this.uid
        };
        this.t = this.http.post(this.base + "sqlcomponents.php", data);
        return this.t;
    }
    pingParameters(path) {
        let output = { page: '', id: '', id2: '', id3: '' };
        let j = path.split('/');
        if (j[1] !== undefined) {
            output.page = j[1];
        }
        if (j[2] !== undefined) {
            output.id = j[2];
        }
        if (j[3] !== undefined) {
            output.id2 = j[3];
        }
        if (j[4] !== undefined) {
            output.id3 = j[4];
        }
        return of(output);
    }
    getSQL(sql, id) {
        this.counter++;
        this.getLocalStorage();
        const data = {
            "counter": this.counter,
            "q": "getsql",
            "parameters": id,
            "sql": sql,
            "uid": this.uid,
        };
        if (this.counter != 2) {
            this.t = this.http.post(this.base + "sqlcomponents.php", data);
            return this.t;
        }
    }
    getMenu(sql, id) {
        this.getLocalStorage();
        const data = {
            "q": "getmenu",
            "parameters": id,
            "sql": sql,
            "uid": this.uid
        };
        this.t = this.http.post(this.base + "sqlcomponents.php", data);
        return this.t;
    }
    postSQL(formData) {
        var CryptoJSAesJson = {
            stringify: function (cipherParams) {
                var j = { ct: cipherParams.ciphertext.toString(CryptoJS.enc.Base64) };
                if (cipherParams.iv)
                    j.iv = cipherParams.iv.toString();
                if (cipherParams.salt)
                    j.s = cipherParams.salt.toString();
                return JSON.stringify(j);
            },
            parse: function (jsonStr) {
                var j = JSON.parse(jsonStr);
                var cipherParams = CryptoJS.lib.CipherParams.create({
                    ciphertext: CryptoJS.enc.Base64.parse(j.ct),
                });
                if (j.iv)
                    cipherParams.iv = CryptoJS.enc.Hex.parse(j.iv);
                if (j.s)
                    cipherParams.salt = CryptoJS.enc.Hex.parse(j.s);
                return cipherParams;
            },
        };
        this.getLocalStorage();
        console.log(formData.triggers);
        if (formData.triggers !== undefined) {
            let triggers = formData.triggers;
            let k = CryptoJS.AES.encrypt(JSON.stringify(triggers), this.TheSecret, { format: CryptoJSAesJson }).toString();
            formData.triggers = k;
        }
        const data = {
            "q": "postform",
            "data": formData,
            "uid": this.uid
        };
        this.t = this.http.post(this.base + "sqlcomponents.php", data);
        return this.t;
    }
    postDelete(formData) {
        var CryptoJSAesJson = {
            stringify: function (cipherParams) {
                var j = { ct: cipherParams.ciphertext.toString(CryptoJS.enc.Base64) };
                if (cipherParams.iv)
                    j.iv = cipherParams.iv.toString();
                if (cipherParams.salt)
                    j.s = cipherParams.salt.toString();
                return JSON.stringify(j);
            },
            parse: function (jsonStr) {
                var j = JSON.parse(jsonStr);
                var cipherParams = CryptoJS.lib.CipherParams.create({
                    ciphertext: CryptoJS.enc.Base64.parse(j.ct),
                });
                if (j.iv)
                    cipherParams.iv = CryptoJS.enc.Hex.parse(j.iv);
                if (j.s)
                    cipherParams.salt = CryptoJS.enc.Hex.parse(j.s);
                return cipherParams;
            },
        };
        this.getLocalStorage();
        console.log(formData.triggers);
        if (formData.triggers !== undefined) {
            let triggers = formData.triggers;
            let k = CryptoJS.AES.encrypt(JSON.stringify(triggers), this.TheSecret, { format: CryptoJSAesJson }).toString();
            formData.triggers = k;
        }
        const data = {
            "q": "postdelete",
            "data": formData,
            "uid": this.uid
        };
        this.t = this.http.post(this.base + "sqlcomponents.php", data);
        return this.t;
    }
    getData(path, id, id2, id3, id_col, id_col2, id_col3) {
        this.getLocalStorage();
        const data = {
            "q": path,
            "id": id,
            "id2": id2,
            "id3": id3,
            "id_col": id_col,
            "id2_col": id_col2,
            "id3_col": id_col3,
            "uid": this.uid
        };
        this.t = this.http.post(this.url, data);
        return this.t;
    }
    postForm(formData) {
        var CryptoJSAesJson = {
            stringify: function (cipherParams) {
                var j = { ct: cipherParams.ciphertext.toString(CryptoJS.enc.Base64) };
                if (cipherParams.iv)
                    j.iv = cipherParams.iv.toString();
                if (cipherParams.salt)
                    j.s = cipherParams.salt.toString();
                return JSON.stringify(j);
            },
            parse: function (jsonStr) {
                var j = JSON.parse(jsonStr);
                var cipherParams = CryptoJS.lib.CipherParams.create({
                    ciphertext: CryptoJS.enc.Base64.parse(j.ct),
                });
                if (j.iv)
                    cipherParams.iv = CryptoJS.enc.Hex.parse(j.iv);
                if (j.s)
                    cipherParams.salt = CryptoJS.enc.Hex.parse(j.s);
                return cipherParams;
            },
        };
        this.getLocalStorage();
        let k = CryptoJS.AES.encrypt(JSON.stringify(formData), this.TheSecret, { format: CryptoJSAesJson }).toString();
        const data = {
            "q": "postform",
            "data": k,
            "uid": this.uid
        };
        this.t = this.http.post(this.url, data);
        return this.t;
    }
    getUser() {
        this.getLocalStorage();
        const data = {
            "q": "vertical-menu",
            "uid": this.uid,
            "role": this.role
        };
        this.t = this.http.post("https://myna-api.com/api/u.php", data);
        return this.t;
    }
    getForm(table_name, parameters) {
        this.getLocalStorage();
        const data = {
            "q": "getform",
            "table": table_name,
            "parameters": parameters
        };
        this.t = this.http.post(this.base + "sqlcomponents.php", data);
        return this.t;
    }
    pushNotification(data) {
        this.dataSubject.next(data);
    }
    pushPage(data) {
        this.pageSubject.next(data);
    }
    getCalendar(sql, params) {
        this.getLocalStorage();
        const data = {
            "q": 'calendar',
            "sql": sql,
            "parameters": params,
            "uid": this.uid
        };
        this.t = this.http.post(this.base + "sqlcomponents.php", data);
        return this.t;
    }
}
SQLDataService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.3", ngImport: i0, type: SQLDataService, deps: [{ token: i1.HttpClient }, { token: 'WEBSERVER' }], target: i0.ɵɵFactoryTarget.Injectable });
SQLDataService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.3", ngImport: i0, type: SQLDataService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.3", ngImport: i0, type: SQLDataService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () {
        return [{ type: i1.HttpClient }, { type: undefined, decorators: [{
                        type: Inject,
                        args: ['WEBSERVER']
                    }] }];
    } });

class SqlFormComponent {
    constructor(_dataService) {
        // part of an edit table or container.
        this._dataService = _dataService;
        this.last_id = '';
        this.containerParameters = { id: '', id2: '', id3: '' };
        this.id = '0';
        this.id2 = '0';
        this.id3 = '0';
        this.id2_col = '';
        this.id3_col = '';
        this.default_col = '';
        this.default_col2 = '';
        this.default_col3 = '';
        this.default_value = '';
        this.default_value2 = '';
        this.default_value3 = '';
        this.table = "dual";
        this.embedded = "Y";
        this.card = "Y";
        this.closable = "N";
        this.open = "Y";
        this.class = "";
        this.style = "";
        this.title = "";
        this.bs_row = 'N';
        this.bs_col = '';
        this.handler = 'default';
        this.reload = 'N';
        this.parameters = { page: '', id: '', id2: '', id3: '' };
        this.change = new EventEmitter();
        this.saved = new EventEmitter();
        this.counter = 0;
        this.showErrorAlert = 'N';
        this.errorMessage = 'Post Failed';
        this.showSuccessAlert = 'N';
        if (this.embedded == 'Y') {
            console.log('form constructor');
            this.myContainerObs = this._dataService.containerSubject.subscribe(d => {
                console.log('container parameters');
                console.log(d);
                this.containerParameters = d;
                if (this.containerParameters.id != this.last_id) {
                    this.last_id = this.containerParameters.id;
                    this.id = this.containerParameters.id;
                    if (this.containerParameters.id2 !== undefined) {
                        this.id2 = this.containerParameters.id2;
                    }
                    if (this.containerParameters.id3 !== undefined) {
                        this.id3 = this.containerParameters.id3;
                    }
                    if (this.containerParameters.default_col !== undefined) {
                        this.default_col = this.containerParameters.default_col;
                    }
                    if (this.containerParameters.default_col2 !== undefined) {
                        this.default_col = this.containerParameters.default_col2;
                    }
                    if (this.containerParameters.default_col3 !== undefined) {
                        this.default_col = this.containerParameters.default_col3;
                    }
                    this.getFormData();
                }
            });
        }
        else {
        }
        this.myDataObs = this._dataService.dataSubject.subscribe(d => {
            console.log('data subject');
            this.data = d;
            if (this.data.id != this.last_id) {
                this.last_id = this.data.id;
                this.id = this.data.id;
            }
            if (this.data.submit === 'Y') {
                this.postSQL();
            }
            if (this.data.submit === 'D') {
                this.postDelete();
            }
        });
    }
    ngOnInit() {
    }
    getFormData() {
        this.parameters.id = this.id;
        this.parameters.id2 = this.id2;
        this.parameters.id3 = this.id3;
        this.parameters.default_col = this.default_col;
        this.parameters.default_col2 = this.default_col2;
        this.parameters.default_col3 = this.default_col3;
        if (this.table != 'dual') {
            this._dataService.getForm(this.table, this.parameters).subscribe((data) => {
                this.data = data;
                //          if (this.default_col!='') { this.data[this.default_col]=this.default_value }
                //          if (this.default_col2!='') { this.data[this.default_col2]=this.default_value2 }        
                //          if (this.default_col3!='') { this.data[this.default_col3]=this.default_value3 }
                this._dataService.pushNotification(this.data);
            });
        }
    }
    ngAfterViewInit() {
        console.log('AVI geting form');
        if (this.embedded !== 'Y') {
            this.getFormData();
        }
    }
    postSQL() {
        this._dataService.postSQL(this.data).subscribe((data) => {
            if (data.error_code == "0") {
                this.showSuccessAlert = 'Y';
                this.showErrorAlert = 'N';
                this.errorMessage = 'Record Saved';
            }
            else {
                this.showSuccessAlert = 'N';
                this.showErrorAlert = 'Y';
                this.errorMessage = data.error_message;
                this.errorMessage = 'Record Saved';
            }
            if (this.reload == 'N') {
                setTimeout(() => {
                    this.showErrorAlert = 'N';
                    this.showSuccessAlert = 'N';
                    this.data.refresh = 'Y';
                    this.data.submit = 'N';
                    this._dataService.pushNotification(data);
                }, 1000);
            }
            else {
                setTimeout(() => {
                    this.showErrorAlert = 'N';
                    this.showSuccessAlert = 'N';
                    this.data.refresh = 'Y';
                    this.data.submit = 'N';
                    this._dataService.pushNotification(data);
                    location.reload();
                }, 500);
            }
        });
    }
    postDelete() {
        this._dataService.postDelete(this.data).subscribe((data) => {
            if (data.error_code == "0") {
                this.showSuccessAlert = 'Y';
                this.showErrorAlert = 'N';
                this.errorMessage = 'Record Saved';
            }
            else {
                this.showSuccessAlert = 'N';
                this.showErrorAlert = 'Y';
                this.errorMessage = data.error_message;
                this.errorMessage = 'Record Saved';
            }
            setTimeout(() => {
                this.showErrorAlert = 'N';
                this.showSuccessAlert = 'N';
                this.data.refresh = 'Y';
                this.data.submit = 'N';
                this._dataService.pushNotification(data);
            }, 1000);
        });
    }
    ngDoCheck() {
    }
    ngOnChanges(changes) {
    }
    ngOnDestroy() {
        //    this.myContainerObs.unsubscribe();
        //    this.myDataObs.unsubscribe();
    }
}
SqlFormComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.3", ngImport: i0, type: SqlFormComponent, deps: [{ token: SQLDataService }], target: i0.ɵɵFactoryTarget.Component });
SqlFormComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.3", type: SqlFormComponent, isStandalone: true, selector: "sql-form", inputs: { data: "data", id: "id", id2: "id2", id3: "id3", id2_col: "id2_col", id3_col: "id3_col", default_col: "default_col", default_col2: "default_col2", default_col3: "default_col3", default_value: "default_value", default_value2: "default_value2", default_value3: "default_value3", table: "table", embedded: "embedded", card: "card", closable: "closable", open: "open", class: "class", style: "style", title: "title", bs_row: "bs_row", bs_col: "bs_col", handler: "handler", reload: "reload" }, outputs: { change: "change", saved: "saved" }, usesOnChanges: true, ngImport: i0, template: "<div *ngIf=\"card=='N'\">\n    <div *ngIf=\"bs_row=='Y'\" class=\"row\">\n        <div [class]=\"bs_col\">\n            <ng-container *ngTemplateOutlet=\"contentTmpl\"></ng-container>\n        </div>\n    </div>\n    <div *ngIf=\"bs_row!='Y'&&bs_col!=''\">\n        <div [class]=\"bs_col\">\n            <ng-container *ngTemplateOutlet=\"contentTmpl\"></ng-container>\n        </div>\n    </div>\n    <div *ngIf=\"bs_row!='Y'&&bs_col==''\">\n            <ng-container *ngTemplateOutlet=\"contentTmpl\"></ng-container>\n    </div>\n</div>\n\n<div *ngIf=\"card=='Y'\">\n    <div *ngIf=\"bs_row=='Y'\" class=\"row\">\n        <div [class]=\"bs_col\">\n            <div class=\"card\">\n                <div class=\"card-header\" style=\"margin-top: 0px;\">\n                    <h2>{{ title }}</h2>\n                </div>\n                <div class=\"card-body\">\n                    <ng-container *ngTemplateOutlet=\"contentTmpl\"></ng-container>\n                </div>\n            </div>\n        </div>\n    </div>\n    <div *ngIf=\"bs_row!='Y'&&bs_col!=''\">\n        <div [class]=\"bs_col\">\n            <div class=\"card\">\n                <div class=\"card-header p-2\">\n                    <h2>{{ title }}</h2>\n                </div>\n                <div class=\"card-body\">\n                    <ng-container *ngTemplateOutlet=\"contentTmpl\"></ng-container>\n                </div>\n            </div>\n        </div>\n    </div>    \n    <div *ngIf=\"bs_row!='Y'&&bs_col==''\">\n            <div class=\"card\">\n                <div class=\"card-header\">\n                    <h2 p-2>{{ title }}</h2>\n                </div>\n                <div class=\"card-body\">\n                    <ng-container *ngTemplateOutlet=\"contentTmpl\"></ng-container>\n                </div>\n            </div>\n    </div>    \n</div>\n\n<ng-template #contentTmpl>\n    <div *ngIf=\"showSuccessAlert=='Y'\" class=\"alert alert-success\" role=\"alert\">\n        {{ this.errorMessage }}\n      </div>\n      <div *ngIf=\"showErrorAlert=='Y'\" class=\"alert alert-danger\" role=\"alert\">\n        {{ this.errorMessage }}\n      </div>\n    <ng-content></ng-content>\n    <div *ngIf=\"showSuccessAlert=='Y'\" class=\"alert alert-success\" role=\"alert\">\n        {{ this.errorMessage }}\n      </div>\n      <div *ngIf=\"showErrorAlert=='Y'\" class=\"alert alert-danger\" role=\"alert\">\n        {{ this.errorMessage }}\n      </div>\n</ng-template>", styles: [""], dependencies: [{ kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i2.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "ngmodule", type: MatCommonModule }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.3", ngImport: i0, type: SqlFormComponent, decorators: [{
            type: Component,
            args: [{ selector: 'sql-form', standalone: true, imports: [CommonModule, MatCommonModule], template: "<div *ngIf=\"card=='N'\">\n    <div *ngIf=\"bs_row=='Y'\" class=\"row\">\n        <div [class]=\"bs_col\">\n            <ng-container *ngTemplateOutlet=\"contentTmpl\"></ng-container>\n        </div>\n    </div>\n    <div *ngIf=\"bs_row!='Y'&&bs_col!=''\">\n        <div [class]=\"bs_col\">\n            <ng-container *ngTemplateOutlet=\"contentTmpl\"></ng-container>\n        </div>\n    </div>\n    <div *ngIf=\"bs_row!='Y'&&bs_col==''\">\n            <ng-container *ngTemplateOutlet=\"contentTmpl\"></ng-container>\n    </div>\n</div>\n\n<div *ngIf=\"card=='Y'\">\n    <div *ngIf=\"bs_row=='Y'\" class=\"row\">\n        <div [class]=\"bs_col\">\n            <div class=\"card\">\n                <div class=\"card-header\" style=\"margin-top: 0px;\">\n                    <h2>{{ title }}</h2>\n                </div>\n                <div class=\"card-body\">\n                    <ng-container *ngTemplateOutlet=\"contentTmpl\"></ng-container>\n                </div>\n            </div>\n        </div>\n    </div>\n    <div *ngIf=\"bs_row!='Y'&&bs_col!=''\">\n        <div [class]=\"bs_col\">\n            <div class=\"card\">\n                <div class=\"card-header p-2\">\n                    <h2>{{ title }}</h2>\n                </div>\n                <div class=\"card-body\">\n                    <ng-container *ngTemplateOutlet=\"contentTmpl\"></ng-container>\n                </div>\n            </div>\n        </div>\n    </div>    \n    <div *ngIf=\"bs_row!='Y'&&bs_col==''\">\n            <div class=\"card\">\n                <div class=\"card-header\">\n                    <h2 p-2>{{ title }}</h2>\n                </div>\n                <div class=\"card-body\">\n                    <ng-container *ngTemplateOutlet=\"contentTmpl\"></ng-container>\n                </div>\n            </div>\n    </div>    \n</div>\n\n<ng-template #contentTmpl>\n    <div *ngIf=\"showSuccessAlert=='Y'\" class=\"alert alert-success\" role=\"alert\">\n        {{ this.errorMessage }}\n      </div>\n      <div *ngIf=\"showErrorAlert=='Y'\" class=\"alert alert-danger\" role=\"alert\">\n        {{ this.errorMessage }}\n      </div>\n    <ng-content></ng-content>\n    <div *ngIf=\"showSuccessAlert=='Y'\" class=\"alert alert-success\" role=\"alert\">\n        {{ this.errorMessage }}\n      </div>\n      <div *ngIf=\"showErrorAlert=='Y'\" class=\"alert alert-danger\" role=\"alert\">\n        {{ this.errorMessage }}\n      </div>\n</ng-template>" }]
        }], ctorParameters: function () { return [{ type: SQLDataService }]; }, propDecorators: { data: [{
                type: Input
            }], id: [{
                type: Input
            }], id2: [{
                type: Input
            }], id3: [{
                type: Input
            }], id2_col: [{
                type: Input
            }], id3_col: [{
                type: Input
            }], default_col: [{
                type: Input
            }], default_col2: [{
                type: Input
            }], default_col3: [{
                type: Input
            }], default_value: [{
                type: Input
            }], default_value2: [{
                type: Input
            }], default_value3: [{
                type: Input
            }], table: [{
                type: Input
            }], embedded: [{
                type: Input
            }], card: [{
                type: Input
            }], closable: [{
                type: Input
            }], open: [{
                type: Input
            }], class: [{
                type: Input
            }], style: [{
                type: Input
            }], title: [{
                type: Input
            }], bs_row: [{
                type: Input
            }], bs_col: [{
                type: Input
            }], handler: [{
                type: Input
            }], reload: [{
                type: Input
            }], change: [{
                type: Output
            }], saved: [{
                type: Output
            }] } });

class SqlAddTableComponent {
    constructor(_dataService) {
        this._dataService = _dataService;
        // format: is built from ContentChildren and Input Parameters
        this.format = { title: '', search: '', class: '', style: '', columns: [], buttons: [] };
        this.adding = 'N';
        this.row_placeholder = 'row';
        this.col_placeholder = 'col-12';
        //-- Inputs
        this.use_parameters = 'N';
        this.data = ''; // Use Data if data comes from function.
        this.sql = ''; // SQL that gets data.
        this.card = "Y"; // Show the form in a card Y/N
        this.card_class = '';
        this.card_style = '';
        this.container_class = 'container-fluid m-2 p-2'; // Class of the outer ng-container.
        this.container_style = ''; // Style of the outer ng-container.  
        this.closable = "N"; // Is the form closable Y/N
        this.search = 'TOP'; // Location of the search box.
        this.bs_row = 'Y'; // Y means add a bootstrap row.
        this.bs_col = 'col-sm-12 col-lg-12 col-xl-12'; // What bootstrap columns.
        this.table_class = 'table table-striped table-condensed'; // class of the table.
        this.table_style = ''; // style of the table.
        this.edit = 'Y'; // Add custom edit button.
        this.title = 'Title Not Set'; // title of the page.
        this.pagination = 'Y'; // Include pagination.
        this.pagesize = 25; // rows per page for pagination.
        this.id = '0'; // id for where clause.
        this.id2 = '0'; // id for where clause.
        this.id3 = '0'; // id for where clause.
        this.open = "Y"; // Does a closable list start open.
        this.class = 'table table-striped table-condensed'; // Class for the table container.
        this.style = ""; // Style for the table container.
        this.handler = 'default'; // what handler is used to process the form.
        this.button_click = new EventEmitter();
        this.row_click = new EventEmitter();
        this.top_button_click = new EventEmitter();
        this.parameters = { page: '', id: '', id2: '', id3: '' };
        this.last_parameters = { page: 'xxx', id: 'xxx', id2: 'xxx', id3: 'xxx' };
        this.page = '';
        this.counter = 0;
        this.myObs = this._dataService.dataSubject.subscribe(d => {
            this.data = d;
            if (d.error_code === 0) {
                this.adding = 'N';
                this.tableRefresh();
            }
        });
    }
    ngOnInit() {
        this.format.search = 'Y';
    }
    topButtonClick(m) {
        this.top_button_click.emit(m);
    }
    rowClick(m) {
        this.row_click.emit(m);
    }
    editClick(m) {
        console.log('clicked m');
        let p = { id: '', id2: '', id3: '' };
        if (m.id !== undefined) {
            p.id = m.id;
        }
        ;
        if (m.id2 !== undefined) {
            p.id2 = m.id2;
        }
        ;
        if (m.id3 !== undefined) {
            p.id3 = m.id3;
        }
        ;
        if (m.edit === 'Y') {
            m.edit = 'N';
        }
        else {
            this.list.forEach((value) => {
                value.edit = 'N';
            });
            this.adding = 'N';
            this._dataService.containerSubject.next(p);
            m.edit = 'Y';
        }
    }
    addClick() {
        let p = { id: '', id2: '', id3: '' };
        if (this.adding === 'Y') {
            this.adding = 'N';
        }
        else {
            this.list.forEach((value) => {
                value.edit = 'N';
            });
            this._dataService.containerSubject.next(p);
            this.adding = 'Y';
        }
    }
    buttonClick(m) {
        this.button_click.emit(m);
    }
    ngAfterViewInit() {
        if (this.use_parameters === 'Y') {
            this.myParameterObs = this._dataService.paramSubject.subscribe(d => {
                this.parameters = d;
                this.myDataObs = this._dataService.getSQL(this.sql, this.parameters).subscribe((data) => {
                    this.list = data;
                    this.list.forEach(function (value) {
                        value.active = 'N';
                    });
                });
            });
        }
        if (this.use_parameters === 'N') {
            this.parameters.page = this.page;
            this.parameters.id = this.id;
            this.parameters.id2 = this.id2;
            this.parameters.id3 = this.id3;
            this.myDataObs = this._dataService.getSQL(this.sql, this.parameters).subscribe((data) => {
                this.list = data;
                this.list.forEach(function (value) {
                    value.active = 'N';
                });
            });
        }
        this.format.title = this.title;
        this.format.class = this.class;
        this.format.style = this.style;
        this.format.pagination = this.pagination;
        this.format.pagesize = this.pagesize;
        if (this.bs_row == 'Y') {
            this.row_placeholder = "row";
        }
        else {
            this.row_placeholder = "none";
        }
        this.col_placeholder = this.bs_col;
        this.column_list.forEach((e) => {
            let column_template = { column_name: '', class: '', type: '', style: '', title: '', value: '' };
            //-- TH is data column
            if (e.nativeElement.nodeName == 'TH') {
                column_template.type = "data";
                column_template.value = e.nativeElement.id;
                column_template.title = e.nativeElement.innerHTML;
            }
            //-- BUTTON is button column
            if (e.nativeElement.nodeName == 'BUTTON') {
                column_template.type = "button";
                column_template.value = '';
                column_template.title = e.nativeElement.innerHTML;
            }
            //-- TD is text column
            if (e.nativeElement.nodeName == 'TD') {
                column_template.type = "text";
                column_template.title = '';
                column_template.value = e.nativeElement.innerHTML;
            }
            if (e.nativeElement.className !== undefined) {
                column_template.class = e.nativeElement.className;
            }
            column_template.style = e.nativeElement.style.cssText;
            this.format.columns.push(column_template);
        });
        if (this._dataService !== undefined && this.parameters !== undefined && this.sql !== undefined) {
            if (this.last_parameters.page != this.parameters.page ||
                this.last_parameters.id != this.parameters.id ||
                this.last_parameters.id2 != this.parameters.id2 ||
                this.last_parameters.id3 != this.parameters.id3) {
                this.last_parameters.page = this.parameters.page;
                this.last_parameters.id = this.parameters.id;
                this.last_parameters.id2 = this.parameters.id2;
                this.last_parameters.id3 = this.parameters.id3;
                try {
                    this.myDataObs = this._dataService.getSQL(this.sql, this.parameters).subscribe((data) => {
                        if (data !== undefined) {
                            this.list = data;
                        }
                    });
                }
                catch (_a) {
                }
            }
        }
    }
    tableRefresh() {
        this.last_parameters.page = this.parameters.page;
        this.last_parameters.id = this.parameters.id;
        this.last_parameters.id2 = this.parameters.id2;
        this.last_parameters.id3 = this.parameters.id3;
        this.adding = 'N';
        this.myDataObs = this._dataService.getSQL(this.sql, this.parameters).subscribe((data) => {
            this.list = data;
        });
    }
    ngOnDestroy() {
        //     this.myObs.unsubscribe();
        //     this.myDataObs.unsubscribe();
        //     this.myParameterObs.unsubscribe();
    }
}
SqlAddTableComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.3", ngImport: i0, type: SqlAddTableComponent, deps: [{ token: SQLDataService }], target: i0.ɵɵFactoryTarget.Component });
SqlAddTableComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.3", type: SqlAddTableComponent, isStandalone: true, selector: "sql-add-table", inputs: { use_parameters: "use_parameters", data: "data", sql: "sql", card: "card", card_class: "card_class", card_style: "card_style", container_class: "container_class", container_style: "container_style", closable: "closable", search: "search", bs_row: "bs_row", bs_col: "bs_col", table_class: "table_class", table_style: "table_style", edit: "edit", title: "title", pagination: "pagination", pagesize: "pagesize", id: "id", id2: "id2", id3: "id3", open: "open", class: "class", style: "style", handler: "handler" }, outputs: { button_click: "button_click", row_click: "row_click", top_button_click: "top_button_click" }, queries: [{ propertyName: "title_list", predicate: ["title"] }, { propertyName: "column_list", predicate: ["column"] }], ngImport: i0, template: "<div class=\"card\" [class]=\"class\" [style]=\"style\">\n    <div class=\"card-header\"  style=\"margin-top: 0px;\">\n        <div class=\"row\" style=\"width:100%;\">\n            <div class=\"col-md-9\">\n                <h2>{{ title }}</h2>\n            </div>\n            <div class=\"col-md-3\" style=\"text-align: right;\">\n                <button (click)=\"addClick()\" class=\"btn btn-primary\"><i class=\"bi bi-plus-square\"></i></button>\n            </div>\n        </div>\n    </div>\n    <div class=\"card-body\">\n        <div *ngIf=\"adding=='Y'\" class=\"row\">\n            <div class=\"col-12\">\n                <ng-container *ngTemplateOutlet=\"contentTmpl\"></ng-container>\n            </div>\n            <div class=\"col-12\" style=\"text-align: right;\">\n                <button (click)=\"addClick()\" class=\"btn btn-secondary\">Close</button>\n            </div>\n        </div>\n        <div *ngIf=\"format.search=='TOP'\" class=\"row m-1 p-3\">\n            <div class=\"col-6\">\n                Search: <input style=\"max-width:320px;\" class=\"form-control\" type=\"text\" id=\"term\" name=\"term\" [(ngModel)]=\"term\"> \n            </div>\n        </div>\n        <div *ngIf=\"format.buttons.length>0||format.search=='Y'\" class=\"row m-1 p-3\">\n            <div *ngIf=\"format.search=='Y'\" class=\"col-lg-6\">\n                Search: <input style=\"max-width:320px;\" class=\"form-control\" type=\"text\" id=\"term\" name=\"term\" [(ngModel)]=\"term\"> \n            </div>\n            <div class=\"col-md-2\" *ngFor=\"let m of format.buttons\">\n                <button (click)=\"topButtonClick(m.value);\" [class]=\"m.class\" [style]=\"m.style\" [innerHTML]=\"m.title\"></button>\n            </div>\n        </div>\n        <table [class]=\"table_class\" [style]=\"table_style\">\n            <thead>\n                <ng-container *ngFor=\"let m of format.columns\">\n                    <th *ngIf=\"m.type!='button'\" [style]=\"m.style\" class=\"p-2\">{{ m.title }}</th>\n                    <th *ngIf=\"m.type=='button'\" [style]=\"m.style\" class=\"p-2\"></th>\n                </ng-container>   \n                <td *ngIf=\"edit=='Y'\">\n                </td>\n            </thead>\n        <tbody>\n        <ng-container *ngFor=\"let m of list | filter: term | paginate: { currentPage: p , itemsPerPage: format.pagesize }\">\n            <tr class=\"p-2\">\n                <ng-container *ngFor=\"let n of format.columns\">\n                <td (click)=\"rowClick(m)\" [style]=\"m.style\"  *ngIf=\"n['type']=='data'\" [innerHTML]=\"m[n['value']]\" [class]=\"n['class']\"></td>\n                    <td (click)=\"rowClick(m)\" [style]=\"m.style\"  *ngIf=\"n['type']=='text'\" [innerHTML]=\"n['value']\" [class]=\"n['class']\"></td>\n                                        <td *ngIf=\"n['type']=='button'\">\n                                            <button (click)=\"buttonClick(m)\" [style]=\"m.style\" [class]=\"n.class\" [innerHTML]=\"n.title\"></button>\n                                        </td>\n                                    </ng-container>\n                                    <td *ngIf=\"edit=='Y'\" style=\"width:40px;\">\n                                        <button class=\"btn btn-light\" (click)=\"editClick(m);\">\n                                            <i class=\"bi bi-pencil-square\"></i>\n                                        </button>\n                                    </td>\n                                </tr> \n                                <tr *ngIf=\"m?.edit=='Y'\">\n                                    <td [colSpan]=\"format.columns.length\">\n                                        <ng-container *ngTemplateOutlet=\"contentTmpl\"></ng-container>\n                                    </td>\n                                </tr>\n                            </ng-container>\n                        </tbody> \n                    </table>\n                    <div *ngIf=\"format.pagination=='Y'\">\n                            <paging-controls (pageChange)=\"p = $event\" [isItemsPerPage]=\"false\"  \n                            class=\"my-pagination\"></paging-controls> \n                    </div>\n                </div> \n            </div> \n<ng-template #contentTmpl>\n    <ng-content select=\"[form]\"></ng-content>\n</ng-template>\n", styles: [""], dependencies: [{ kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i2.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "ngmodule", type: FormsModule }, { kind: "directive", type: i3.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "ngmodule", type: NgxTablePaginationModule }, { kind: "component", type: i4.PaginationComponent, selector: "paging-controls", inputs: ["maxSize", "previousLabel", "nextLabel", "screenReaderPaginationLabel", "screenReaderPageLabel", "screenReaderCurrentLabel", "directionLinks", "autoHide", "responsive", "id", "isItemsPerPage"], outputs: ["pageChange", "pageBoundsCorrection"] }, { kind: "pipe", type: i4.PaginationPipe, name: "paginate" }, { kind: "ngmodule", type: Ng2SearchPipeModule }, { kind: "pipe", type: i5.Ng2SearchPipe, name: "filter" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.3", ngImport: i0, type: SqlAddTableComponent, decorators: [{
            type: Component,
            args: [{ selector: 'sql-add-table', standalone: true, imports: [CommonModule,
                        FormsModule,
                        NgxTablePaginationModule,
                        Ng2SearchPipeModule], template: "<div class=\"card\" [class]=\"class\" [style]=\"style\">\n    <div class=\"card-header\"  style=\"margin-top: 0px;\">\n        <div class=\"row\" style=\"width:100%;\">\n            <div class=\"col-md-9\">\n                <h2>{{ title }}</h2>\n            </div>\n            <div class=\"col-md-3\" style=\"text-align: right;\">\n                <button (click)=\"addClick()\" class=\"btn btn-primary\"><i class=\"bi bi-plus-square\"></i></button>\n            </div>\n        </div>\n    </div>\n    <div class=\"card-body\">\n        <div *ngIf=\"adding=='Y'\" class=\"row\">\n            <div class=\"col-12\">\n                <ng-container *ngTemplateOutlet=\"contentTmpl\"></ng-container>\n            </div>\n            <div class=\"col-12\" style=\"text-align: right;\">\n                <button (click)=\"addClick()\" class=\"btn btn-secondary\">Close</button>\n            </div>\n        </div>\n        <div *ngIf=\"format.search=='TOP'\" class=\"row m-1 p-3\">\n            <div class=\"col-6\">\n                Search: <input style=\"max-width:320px;\" class=\"form-control\" type=\"text\" id=\"term\" name=\"term\" [(ngModel)]=\"term\"> \n            </div>\n        </div>\n        <div *ngIf=\"format.buttons.length>0||format.search=='Y'\" class=\"row m-1 p-3\">\n            <div *ngIf=\"format.search=='Y'\" class=\"col-lg-6\">\n                Search: <input style=\"max-width:320px;\" class=\"form-control\" type=\"text\" id=\"term\" name=\"term\" [(ngModel)]=\"term\"> \n            </div>\n            <div class=\"col-md-2\" *ngFor=\"let m of format.buttons\">\n                <button (click)=\"topButtonClick(m.value);\" [class]=\"m.class\" [style]=\"m.style\" [innerHTML]=\"m.title\"></button>\n            </div>\n        </div>\n        <table [class]=\"table_class\" [style]=\"table_style\">\n            <thead>\n                <ng-container *ngFor=\"let m of format.columns\">\n                    <th *ngIf=\"m.type!='button'\" [style]=\"m.style\" class=\"p-2\">{{ m.title }}</th>\n                    <th *ngIf=\"m.type=='button'\" [style]=\"m.style\" class=\"p-2\"></th>\n                </ng-container>   \n                <td *ngIf=\"edit=='Y'\">\n                </td>\n            </thead>\n        <tbody>\n        <ng-container *ngFor=\"let m of list | filter: term | paginate: { currentPage: p , itemsPerPage: format.pagesize }\">\n            <tr class=\"p-2\">\n                <ng-container *ngFor=\"let n of format.columns\">\n                <td (click)=\"rowClick(m)\" [style]=\"m.style\"  *ngIf=\"n['type']=='data'\" [innerHTML]=\"m[n['value']]\" [class]=\"n['class']\"></td>\n                    <td (click)=\"rowClick(m)\" [style]=\"m.style\"  *ngIf=\"n['type']=='text'\" [innerHTML]=\"n['value']\" [class]=\"n['class']\"></td>\n                                        <td *ngIf=\"n['type']=='button'\">\n                                            <button (click)=\"buttonClick(m)\" [style]=\"m.style\" [class]=\"n.class\" [innerHTML]=\"n.title\"></button>\n                                        </td>\n                                    </ng-container>\n                                    <td *ngIf=\"edit=='Y'\" style=\"width:40px;\">\n                                        <button class=\"btn btn-light\" (click)=\"editClick(m);\">\n                                            <i class=\"bi bi-pencil-square\"></i>\n                                        </button>\n                                    </td>\n                                </tr> \n                                <tr *ngIf=\"m?.edit=='Y'\">\n                                    <td [colSpan]=\"format.columns.length\">\n                                        <ng-container *ngTemplateOutlet=\"contentTmpl\"></ng-container>\n                                    </td>\n                                </tr>\n                            </ng-container>\n                        </tbody> \n                    </table>\n                    <div *ngIf=\"format.pagination=='Y'\">\n                            <paging-controls (pageChange)=\"p = $event\" [isItemsPerPage]=\"false\"  \n                            class=\"my-pagination\"></paging-controls> \n                    </div>\n                </div> \n            </div> \n<ng-template #contentTmpl>\n    <ng-content select=\"[form]\"></ng-content>\n</ng-template>\n" }]
        }], ctorParameters: function () { return [{ type: SQLDataService }]; }, propDecorators: { title_list: [{
                type: ContentChildren,
                args: ['title']
            }], column_list: [{
                type: ContentChildren,
                args: ['column']
            }], use_parameters: [{
                type: Input
            }], data: [{
                type: Input
            }], sql: [{
                type: Input
            }], card: [{
                type: Input
            }], card_class: [{
                type: Input
            }], card_style: [{
                type: Input
            }], container_class: [{
                type: Input
            }], container_style: [{
                type: Input
            }], closable: [{
                type: Input
            }], search: [{
                type: Input
            }], bs_row: [{
                type: Input
            }], bs_col: [{
                type: Input
            }], table_class: [{
                type: Input
            }], table_style: [{
                type: Input
            }], edit: [{
                type: Input
            }], title: [{
                type: Input
            }], pagination: [{
                type: Input
            }], pagesize: [{
                type: Input
            }], id: [{
                type: Input
            }], id2: [{
                type: Input
            }], id3: [{
                type: Input
            }], open: [{
                type: Input
            }], class: [{
                type: Input
            }], style: [{
                type: Input
            }], handler: [{
                type: Input
            }], button_click: [{
                type: Output
            }], row_click: [{
                type: Output
            }], top_button_click: [{
                type: Output
            }] } });

class SqlCheckboxComponent {
    ngAfterViewInit() {
        if (this.bs_row == 'Y') {
            this.bs_row_value = "row";
        }
        else {
            this.bs_row_value = 'none';
        }
        if (this.bs_col != '') {
            this.bs_col_value = this.bs_col;
        }
        else {
            this.bs_col_value = 'none';
        }
    }
    constructor(_dataService) {
        this._dataService = _dataService;
        this.value = '';
        this.value2 = false;
        this.fieldData = '';
        this.col = '';
        this.class = '';
        this.style = '';
        this.hint = '';
        this.icon = '';
        this.label = 'Label not set';
        this.placeholder = '';
        this.appearance = 'outline';
        this.bs_row = 'Y';
        this.bs_col = 'col-12';
        this.top_label = 'N';
        this.labelPosition = 'before';
        this.indeterminate = false;
        this.bs_row_value = 'row';
        this.bs_col_value = 'col-12';
        this.counter = 0;
        this.change = new EventEmitter();
        this.myObs = this._dataService.dataSubject.subscribe(d => {
            this.data = d;
            this.fieldData = this.data;
            this.value = this.fieldData[this.col];
            if (this.value == 'Y') {
                this.value2 = true;
            }
            else {
                this.value2 = false;
            }
            this.counter++;
        });
    }
    ngOnInit() {
    }
    handleChange() {
        this.fieldData['submit'] = 'N';
        if (this.value2 == true) {
            this.value = 'Y';
        }
        else {
            this.value = 'N';
        }
        this.fieldData[this.col] = this.value;
        this._dataService.pushNotification(this.fieldData);
    }
    ngOnDestroy() {
        //   this.myObs.unsubscribe();
    }
}
SqlCheckboxComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.3", ngImport: i0, type: SqlCheckboxComponent, deps: [{ token: SQLDataService }], target: i0.ɵɵFactoryTarget.Component });
SqlCheckboxComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.3", type: SqlCheckboxComponent, isStandalone: true, selector: "sql-checkbox", inputs: { col: "col", data: "data", class: "class", style: "style", hint: "hint", icon: "icon", label: "label", placeholder: "placeholder", appearance: "appearance", bs_row: "bs_row", bs_col: "bs_col", top_label: "top_label", labelPosition: "labelPosition", indeterminate: "indeterminate" }, outputs: { change: "change" }, ngImport: i0, template: "<p>sql-checkbox works!</p>\n", styles: [""], dependencies: [{ kind: "ngmodule", type: CommonModule }, { kind: "ngmodule", type: FormsModule }, { kind: "ngmodule", type: MatFormFieldModule }, { kind: "ngmodule", type: MatInputModule }, { kind: "ngmodule", type: MatCheckboxModule }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.3", ngImport: i0, type: SqlCheckboxComponent, decorators: [{
            type: Component,
            args: [{ selector: 'sql-checkbox', standalone: true, imports: [CommonModule, FormsModule, MatFormFieldModule, MatInputModule, MatCheckboxModule], template: "<p>sql-checkbox works!</p>\n" }]
        }], ctorParameters: function () { return [{ type: SQLDataService }]; }, propDecorators: { col: [{
                type: Input
            }], data: [{
                type: Input
            }], class: [{
                type: Input
            }], style: [{
                type: Input
            }], hint: [{
                type: Input
            }], icon: [{
                type: Input
            }], label: [{
                type: Input
            }], placeholder: [{
                type: Input
            }], appearance: [{
                type: Input
            }], bs_row: [{
                type: Input
            }], bs_col: [{
                type: Input
            }], top_label: [{
                type: Input
            }], labelPosition: [{
                type: Input
            }], indeterminate: [{
                type: Input
            }], change: [{
                type: Output
            }] } });

class SqlFullcalendarComponent {
    handleDateClick(arg) {
    }
    constructor(_dataService, _router, _activatedRoute) {
        this._dataService = _dataService;
        this._router = _router;
        this._activatedRoute = _activatedRoute;
        //-- Inputs
        this.router = 'N'; // does data come from Router.
        this.sql = "select 'x' from dual"; // query to populate panel.          
        this.id = '0'; // Primary key for query.
        this.id2 = '0';
        this.id3 = '0';
        this.carßd = "Y"; // Show the panel in a card Y/N
        this.closable = "N"; // Is the panel closable Y/N
        this.open = "Y"; // Does a closable form start open.
        this.class = ""; // Class for the panel container.
        this.style = ""; // Style for the panel container.
        this.title = ""; // Title of the Panel.
        this.bs_row = 'Y'; // Y means add a bootstrap row.
        this.bs_col = 'col-sm-12 col-lg-6 col-xl-4'; // What bootstrap columns.
        this.params = { id: '', id2: '', id3: '' };
        this.calendarOptions = {
            initialView: 'dayGridMonth',
            plugins: [dayGridPlugin, InteractionPlugin],
            eventClick: this.handleDateClick.bind(this),
            events: []
        };
        this.change = new EventEmitter();
        this.counter = 0;
        this.parameterValue = '';
    }
    ngOnInit() {
    }
    ngAfterViewInit() {
        this.params.id = this.id;
        this.params.id2 = this.id2;
        this.params.id3 = this.id3;
        this.myObj = this._dataService.getCalendar(this.sql, this.params).subscribe((data) => {
            this.data = data;
            this.calendarOptions.events = this.data;
        });
    }
    ngDoCheck() {
    }
    ngOnChanges(changes) {
    }
    ngOnDestroy() {
        this.myObj.unsubscribe();
    }
}
SqlFullcalendarComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.3", ngImport: i0, type: SqlFullcalendarComponent, deps: [{ token: SQLDataService }, { token: i2$1.Router }, { token: i2$1.ActivatedRoute }], target: i0.ɵɵFactoryTarget.Component });
SqlFullcalendarComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.3", type: SqlFullcalendarComponent, isStandalone: true, selector: "sql-fullcalendar", inputs: { router: "router", data: "data", sql: "sql", id: "id", id2: "id2", id3: "id3", carßd: "car\u00DFd", closable: "closable", open: "open", class: "class", style: "style", title: "title", bs_row: "bs_row", bs_col: "bs_col" }, outputs: { change: "change" }, usesOnChanges: true, ngImport: i0, template: "<div class=\"container-fluid row\">\n    <!--  <div class=\"col-sm-12\">\n          <div class=\"card\" class=\"card mt-3 mb-3 p-3\"> -->\n              <div class=\"d-none d-md-block row\">\n                  <div class=\"col-12\">\n                      <full-calendar [options]=\"calendarOptions\"></full-calendar>\n                  </div>\n    <!--          </div>\n          </div> -->\n      </div>\n  </div>", styles: [""], dependencies: [{ kind: "ngmodule", type: CommonModule }, { kind: "ngmodule", type: FullCalendarModule }, { kind: "component", type: i3$1.FullCalendarComponent, selector: "full-calendar", inputs: ["options", "deepChangeDetection", "events", "eventSources", "resources"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.3", ngImport: i0, type: SqlFullcalendarComponent, decorators: [{
            type: Component,
            args: [{ selector: 'sql-fullcalendar', standalone: true, imports: [CommonModule, FullCalendarModule], template: "<div class=\"container-fluid row\">\n    <!--  <div class=\"col-sm-12\">\n          <div class=\"card\" class=\"card mt-3 mb-3 p-3\"> -->\n              <div class=\"d-none d-md-block row\">\n                  <div class=\"col-12\">\n                      <full-calendar [options]=\"calendarOptions\"></full-calendar>\n                  </div>\n    <!--          </div>\n          </div> -->\n      </div>\n  </div>" }]
        }], ctorParameters: function () { return [{ type: SQLDataService }, { type: i2$1.Router }, { type: i2$1.ActivatedRoute }]; }, propDecorators: { router: [{
                type: Input
            }], data: [{
                type: Input
            }], sql: [{
                type: Input
            }], id: [{
                type: Input
            }], id2: [{
                type: Input
            }], id3: [{
                type: Input
            }], carßd: [{
                type: Input
            }], closable: [{
                type: Input
            }], open: [{
                type: Input
            }], class: [{
                type: Input
            }], style: [{
                type: Input
            }], title: [{
                type: Input
            }], bs_row: [{
                type: Input
            }], bs_col: [{
                type: Input
            }], change: [{
                type: Output
            }] } });

class SqlPanelComponent {
    constructor(_dataService, _router, _activatedRoute) {
        this._dataService = _dataService;
        this._router = _router;
        this._activatedRoute = _activatedRoute;
        //-- Inputs
        this.use_router = 'Y'; // does parameters come from Router.
        this.page = '';
        this.sql = ""; // query to populate panel.          
        this.subquery = ""; // subquery 1-3 go into parameters,
        this.subquery2 = "";
        this.subquery3 = "";
        this.id = '0'; // ID - ID3 go into parameters.
        this.id2 = '0';
        this.id3 = '0';
        this.card = "Y"; // Show the panel in a card Y/N
        this.closable = "N"; // Is the panel closable Y/N
        this.open = "Y"; // Does a closable form start open.
        this.class = ""; // Class for the panel container.
        this.style = ""; // Style for the panel container.
        this.title = ""; // Title of the Panel.
        this.bs_row = 'Y'; // Y means add a bootstrap row.
        this.bs_col = ''; // What bootstrap columns.
        this.change = new EventEmitter();
        this.counter = 0;
        this.parameterValue = '';
        this.parameters = { page: '', id: '', id2: '', id3: '' };
    }
    ngOnInit() {
        if (this.use_router == 'Y') {
            setTimeout(() => {
                this.myObs = this._dataService.paramSubject.subscribe(d => {
                    console.log('paramSubjct.subscribe');
                    console.log(d);
                    if (d.page !== undefined) {
                        this.page = d.page;
                    }
                    if (d.id !== undefined) {
                        this.id = d.id;
                    }
                    if (d.id2 !== undefined) {
                        this.id2 = d.id2;
                    }
                    if (d.id3 !== undefined) {
                        this.id3 = d.id3;
                    }
                    if (this.page !== 'AAA') {
                        console.log('sql: ' + this.sql);
                        console.log(d);
                        this.parameters.page = "";
                        this.parameters.id = this.id;
                        this.parameters.id2 = this.id2;
                        this.parameters.id3 = this.id3;
                        console.log(this.parameters);
                        this.myObs = this._dataService.getSQL(this.sql, this.parameters).subscribe((data) => {
                            console.log('panel init ds');
                            this.data = data[0];
                            console.log(this.data);
                            this._dataService.pageSubject.next(this.data);
                            if (this.data.id2 === undefined) {
                                this.data.id2 = '';
                            }
                            if (this.data.id3 === undefined) {
                                this.data.id3 = '';
                            }
                            this._dataService.containerSubject.next(this.data);
                        });
                    }
                });
            }, 500);
        }
    }
    ngAfterViewInit() {
    }
    ngDoCheck() {
    }
    ngOnChanges(changes) {
    }
    ngOnDestroy() {
        //  this.myObs.unsubscribe();
    }
}
SqlPanelComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.3", ngImport: i0, type: SqlPanelComponent, deps: [{ token: SQLDataService }, { token: i2$1.Router }, { token: i2$1.ActivatedRoute }], target: i0.ɵɵFactoryTarget.Component });
SqlPanelComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.3", type: SqlPanelComponent, isStandalone: true, selector: "sql-panel", inputs: { use_router: "use_router", page: "page", data: "data", sql: "sql", subquery: "subquery", subquery2: "subquery2", subquery3: "subquery3", id: "id", id2: "id2", id3: "id3", card: "card", closable: "closable", open: "open", class: "class", style: "style", title: "title", bs_row: "bs_row", bs_col: "bs_col" }, outputs: { change: "change" }, usesOnChanges: true, ngImport: i0, template: "<ng-container *ngIf=\"card=='N'\">\n    <div *ngIf=\"bs_row=='Y'\" class=\"row\">\n        <div [class]=\"bs_col\">\n            <ng-container *ngTemplateOutlet=\"fullTmpl\"></ng-container>\n        </div>\n    </div>\n    <!-- bs_row == 'N' and bs_col exists -->\n    <div *ngIf=\"bs_row!='Y'&&bs_col!=''\">\n        <div [class]=\"bs_col\">\n            <ng-container *ngTemplateOutlet=\"fullTmpl\"></ng-container>\n        </div>\n    </div>\n    <!-- bs_row == 'N' and bs_col exists -->\n    <div *ngIf=\"bs_row!='Y'&&bs_col==''\">\n            <ng-container *ngTemplateOutlet=\"fullTmpl\"></ng-container>\n    </div>\n</ng-container>\n\n<!-- it is a card -->\n<div *ngIf=\"card=='Y'\">\n    <div *ngIf=\"bs_row=='Y'\" class=\"row\">\n        <div [class]=\"bs_col\">\n            <div class=\"card\">\n                <div class=\"card-header\" style=\"margin-top: 0px;\">\n                    <h2 *ngIf=\"title!=''\" p-2>{{ title }}</h2>\n                    <ng-container *ngTemplateOutlet=\"headerTmpl\"></ng-container>\n                </div>\n                <div class=\"card-body\">\n                    <ng-container *ngTemplateOutlet=\"footerTmpl\"></ng-container>\n                </div>\n            </div>\n        </div>\n    </div>\n    <div *ngIf=\"bs_row!='Y'&&bs_col!=''\">\n        <div [class]=\"bs_col\">\n            <div class=\"card\">\n                <div class=\"card-header p-2\">\n                    <h2 *ngIf=\"title!=''\" p-2>{{ title }}</h2>\n                    <ng-container *ngTemplateOutlet=\"headerTmpl\"></ng-container>\n                </div>\n                <div class=\"card-body\">\n                    <ng-container *ngTemplateOutlet=\"footerTmpl\"></ng-container>\n                </div>\n            </div>\n        </div>\n    </div>    \n    <div *ngIf=\"bs_row!='Y'&&bs_col==''\">\n            <div class=\"card\">\n                <div class=\"card-header\">\n                    <h2 *ngIf=\"title!=''\" p-2>{{ title }}</h2>\n                    <ng-container *ngTemplateOutlet=\"headerTmpl\"></ng-container>\n                </div>\n                <div class=\"card-body\">\n                    <ng-container *ngTemplateOutlet=\"footerTmpl\"></ng-container>\n                </div>\n            </div>\n    </div>    \n</div>\n\n<ng-template #footerTmpl>\n    <ng-content select=\"[footer]\"></ng-content>\n</ng-template>\n\n<ng-template #headerTmpl>\n    <ng-content select=\"[header]\"></ng-content>\n</ng-template>\n\n<ng-template #fullTmpl>\n    <ng-content></ng-content>\n</ng-template>\n", styles: [""], dependencies: [{ kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i2.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "ngmodule", type: RouterModule }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.3", ngImport: i0, type: SqlPanelComponent, decorators: [{
            type: Component,
            args: [{ selector: 'sql-panel', standalone: true, imports: [CommonModule, RouterModule], template: "<ng-container *ngIf=\"card=='N'\">\n    <div *ngIf=\"bs_row=='Y'\" class=\"row\">\n        <div [class]=\"bs_col\">\n            <ng-container *ngTemplateOutlet=\"fullTmpl\"></ng-container>\n        </div>\n    </div>\n    <!-- bs_row == 'N' and bs_col exists -->\n    <div *ngIf=\"bs_row!='Y'&&bs_col!=''\">\n        <div [class]=\"bs_col\">\n            <ng-container *ngTemplateOutlet=\"fullTmpl\"></ng-container>\n        </div>\n    </div>\n    <!-- bs_row == 'N' and bs_col exists -->\n    <div *ngIf=\"bs_row!='Y'&&bs_col==''\">\n            <ng-container *ngTemplateOutlet=\"fullTmpl\"></ng-container>\n    </div>\n</ng-container>\n\n<!-- it is a card -->\n<div *ngIf=\"card=='Y'\">\n    <div *ngIf=\"bs_row=='Y'\" class=\"row\">\n        <div [class]=\"bs_col\">\n            <div class=\"card\">\n                <div class=\"card-header\" style=\"margin-top: 0px;\">\n                    <h2 *ngIf=\"title!=''\" p-2>{{ title }}</h2>\n                    <ng-container *ngTemplateOutlet=\"headerTmpl\"></ng-container>\n                </div>\n                <div class=\"card-body\">\n                    <ng-container *ngTemplateOutlet=\"footerTmpl\"></ng-container>\n                </div>\n            </div>\n        </div>\n    </div>\n    <div *ngIf=\"bs_row!='Y'&&bs_col!=''\">\n        <div [class]=\"bs_col\">\n            <div class=\"card\">\n                <div class=\"card-header p-2\">\n                    <h2 *ngIf=\"title!=''\" p-2>{{ title }}</h2>\n                    <ng-container *ngTemplateOutlet=\"headerTmpl\"></ng-container>\n                </div>\n                <div class=\"card-body\">\n                    <ng-container *ngTemplateOutlet=\"footerTmpl\"></ng-container>\n                </div>\n            </div>\n        </div>\n    </div>    \n    <div *ngIf=\"bs_row!='Y'&&bs_col==''\">\n            <div class=\"card\">\n                <div class=\"card-header\">\n                    <h2 *ngIf=\"title!=''\" p-2>{{ title }}</h2>\n                    <ng-container *ngTemplateOutlet=\"headerTmpl\"></ng-container>\n                </div>\n                <div class=\"card-body\">\n                    <ng-container *ngTemplateOutlet=\"footerTmpl\"></ng-container>\n                </div>\n            </div>\n    </div>    \n</div>\n\n<ng-template #footerTmpl>\n    <ng-content select=\"[footer]\"></ng-content>\n</ng-template>\n\n<ng-template #headerTmpl>\n    <ng-content select=\"[header]\"></ng-content>\n</ng-template>\n\n<ng-template #fullTmpl>\n    <ng-content></ng-content>\n</ng-template>\n" }]
        }], ctorParameters: function () { return [{ type: SQLDataService }, { type: i2$1.Router }, { type: i2$1.ActivatedRoute }]; }, propDecorators: { use_router: [{
                type: Input
            }], page: [{
                type: Input
            }], data: [{
                type: Input
            }], sql: [{
                type: Input
            }], subquery: [{
                type: Input
            }], subquery2: [{
                type: Input
            }], subquery3: [{
                type: Input
            }], id: [{
                type: Input
            }], id2: [{
                type: Input
            }], id3: [{
                type: Input
            }], card: [{
                type: Input
            }], closable: [{
                type: Input
            }], open: [{
                type: Input
            }], class: [{
                type: Input
            }], style: [{
                type: Input
            }], title: [{
                type: Input
            }], bs_row: [{
                type: Input
            }], bs_col: [{
                type: Input
            }], change: [{
                type: Output
            }] } });

class SqlCardComponent {
    constructor() {
        this.title = '';
        this.closed = 'N';
        this.style = 'margin-top:10px; margin-bottom:10px; margin-left: 10px; margin-right: 10px;';
        this.button_class = 'btn btn-primary float-right';
        this.button_style = 'margin-top: 10px; margin-bottom: 10px; text-align: right!important;';
        this.title_class = 'm-2';
        this.title_style = 'font-size: 18px; font-weight: bold;';
    }
    toggleClosed() {
        if (this.closed == 'Y') {
            this.closed = 'N';
        }
        else {
            this.closed = 'Y';
        }
    }
}
SqlCardComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.3", ngImport: i0, type: SqlCardComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
SqlCardComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.3", type: SqlCardComponent, isStandalone: true, selector: "sql-card", inputs: { title: "title", closed: "closed", style: "style", button_class: "button_class", button_style: "button_style", title_class: "title_class", title_style: "title_style" }, ngImport: i0, template: "<div class=\"card\" [style]=\"style\">\n    <div class=\"card-header\" style=\"margin-top: 0px;\">\n            <div class=\"col-9 col-lg-10 col-xl-11\">\n                <span [class]=\"title_class\" [style]=\"title_style\">{{ title }}</span>\n                  <span class=\"align-self-end float-end\" style=\"text-align: right;\">\n                    <button (click)=\"toggleClosed()\" *ngIf=\"closed=='Y'\" [class]=\"button_class\" [style]=\"button_style\"><i class=\"bi bi-arrow-bar-down\"></i></button>\n                   <button (click)=\"toggleClosed()\" *ngIf=\"closed=='N'\" [class]=\"button_class\" [style]=\"button_style\"><i class=\"bi bi-arrow-bar-up\"></i></button>\n                </span>\n            </div>\n    </div>\n    <div *ngIf=\"closed=='N'\" class=\"card-body p-2\">\n        <ng-content></ng-content>\n    </div>\n</div>\n", styles: [""], dependencies: [{ kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.3", ngImport: i0, type: SqlCardComponent, decorators: [{
            type: Component,
            args: [{ selector: 'sql-card', standalone: true, imports: [CommonModule], template: "<div class=\"card\" [style]=\"style\">\n    <div class=\"card-header\" style=\"margin-top: 0px;\">\n            <div class=\"col-9 col-lg-10 col-xl-11\">\n                <span [class]=\"title_class\" [style]=\"title_style\">{{ title }}</span>\n                  <span class=\"align-self-end float-end\" style=\"text-align: right;\">\n                    <button (click)=\"toggleClosed()\" *ngIf=\"closed=='Y'\" [class]=\"button_class\" [style]=\"button_style\"><i class=\"bi bi-arrow-bar-down\"></i></button>\n                   <button (click)=\"toggleClosed()\" *ngIf=\"closed=='N'\" [class]=\"button_class\" [style]=\"button_style\"><i class=\"bi bi-arrow-bar-up\"></i></button>\n                </span>\n            </div>\n    </div>\n    <div *ngIf=\"closed=='N'\" class=\"card-body p-2\">\n        <ng-content></ng-content>\n    </div>\n</div>\n" }]
        }], propDecorators: { title: [{
                type: Input
            }], closed: [{
                type: Input
            }], style: [{
                type: Input
            }], button_class: [{
                type: Input
            }], button_style: [{
                type: Input
            }], title_class: [{
                type: Input
            }], title_style: [{
                type: Input
            }] } });

const MY_DATE_FORMATS = {
    parse: {
        dateInput: 'MM/DD/YYYY',
    },
    display: {
        dateInput: 'MM/DD/YYYY',
        monthYearLabel: 'MMMM YYYY',
        dateA11yLabel: 'LL',
        monthYearA11yLabel: 'MMMM YYYY'
    },
};
class SqlDatepickerComponent {
    addEvent(type, event) {
        this.events.push(`${type}: ${event.value}`);
    }
    ngAfterViewInit() {
    }
    constructor(_dataService, datePipe) {
        this._dataService = _dataService;
        this.datePipe = datePipe;
        this.col = '';
        this.class = '';
        this.style = '';
        this.hint = '';
        this.icon = '';
        this.label = 'Label not set';
        this.placeholder = '';
        this.appearance = 'outline';
        this.bs_row = 'Y';
        this.bs_col = 'col-12';
        this.top_label = 'N';
        this.counter = 0;
        this.change = new EventEmitter();
        this.events = [];
        this.myObs = this._dataService.dataSubject.subscribe(d => {
            this.data = d;
            this.fieldData = this.data;
            this.value = this.fieldData[this.col];
            this.counter++;
        });
    }
    ngOnInit() {
        if (this.bs_col == 'Y') {
            this.row_value = 'row';
        }
        else {
            this.row_value = 'none';
        }
        if (this.bs_col != '') {
            this.col_value = this.bs_col;
        }
        else {
            this.col_value = 'none';
        }
    }
    handleChange() {
        this.fieldData['submit'] = 'N';
        this.fieldData[this.col] = this.datePipe.transform(this.value, 'yyyy-MM-dd');
        this._dataService.pushNotification(this.fieldData);
    }
    ngOnDestroy() {
        this.myObs.unsubscribe();
    }
}
SqlDatepickerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.3", ngImport: i0, type: SqlDatepickerComponent, deps: [{ token: SQLDataService }, { token: i2.DatePipe }], target: i0.ɵɵFactoryTarget.Component });
SqlDatepickerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.3", type: SqlDatepickerComponent, isStandalone: true, selector: "sql-datepicker", inputs: { col: "col", data: "data", class: "class", style: "style", hint: "hint", icon: "icon", label: "label", placeholder: "placeholder", appearance: "appearance", bs_row: "bs_row", bs_col: "bs_col", top_label: "top_label" }, outputs: { change: "change" }, providers: [
        DatePipe,
        { provide: MAT_DATE_FORMATS, useValue: MY_DATE_FORMATS },
        { provide: DateAdapter, useClass: MomentDateAdapter, deps: [MAT_DATE_LOCALE] },
    ], ngImport: i0, template: "    <span [class]=\"col_value\" style=\"margin-right: 20px; margin-left: -20px;\">\n        <p *ngIf=\"top_label=='Y'\">{{ label }}</p>\n        <mat-form-field [appearance]=\"appearance\">\n        <mat-label>{{ label }}</mat-label>\n        <input [(ngModel)]=\"value\" matInput [matDatepicker]=\"picker\"\n               (dateChange)=\"handleChange()\">\n        <mat-hint>MM/DD/YYYY</mat-hint>\n        <mat-datepicker-toggle matIconSuffix [for]=\"picker\"></mat-datepicker-toggle>\n        <mat-datepicker #picker></mat-datepicker>\n        </mat-form-field>\n    </span>  ", styles: [""], dependencies: [{ kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "ngmodule", type: FormsModule }, { kind: "directive", type: i3.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "ngmodule", type: MatInputModule }, { kind: "directive", type: i5$1.MatInput, selector: "input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]", inputs: ["disabled", "id", "placeholder", "name", "required", "type", "errorStateMatcher", "aria-describedby", "value", "readonly"], exportAs: ["matInput"] }, { kind: "component", type: i4$1.MatFormField, selector: "mat-form-field", inputs: ["hideRequiredMarker", "color", "floatLabel", "appearance", "subscriptSizing", "hintLabel"], exportAs: ["matFormField"] }, { kind: "directive", type: i4$1.MatLabel, selector: "mat-label" }, { kind: "directive", type: i4$1.MatHint, selector: "mat-hint", inputs: ["align", "id"] }, { kind: "directive", type: i4$1.MatSuffix, selector: "[matSuffix], [matIconSuffix], [matTextSuffix]", inputs: ["matTextSuffix"] }, { kind: "ngmodule", type: MomentDateModule }, { kind: "ngmodule", type: MatDatepickerModule }, { kind: "component", type: i6.MatDatepicker, selector: "mat-datepicker", exportAs: ["matDatepicker"] }, { kind: "directive", type: i6.MatDatepickerInput, selector: "input[matDatepicker]", inputs: ["matDatepicker", "min", "max", "matDatepickerFilter"], exportAs: ["matDatepickerInput"] }, { kind: "component", type: i6.MatDatepickerToggle, selector: "mat-datepicker-toggle", inputs: ["for", "tabIndex", "aria-label", "disabled", "disableRipple"], exportAs: ["matDatepickerToggle"] }, { kind: "ngmodule", type: MatFormFieldModule }, { kind: "ngmodule", type: MatNativeDateModule }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.3", ngImport: i0, type: SqlDatepickerComponent, decorators: [{
            type: Component,
            args: [{ selector: 'sql-datepicker', standalone: true, imports: [CommonModule, FormsModule, MatInputModule, MomentDateModule,
                        MatDatepickerModule, MatFormFieldModule, MatNativeDateModule], providers: [
                        DatePipe,
                        { provide: MAT_DATE_FORMATS, useValue: MY_DATE_FORMATS },
                        { provide: DateAdapter, useClass: MomentDateAdapter, deps: [MAT_DATE_LOCALE] },
                    ], template: "    <span [class]=\"col_value\" style=\"margin-right: 20px; margin-left: -20px;\">\n        <p *ngIf=\"top_label=='Y'\">{{ label }}</p>\n        <mat-form-field [appearance]=\"appearance\">\n        <mat-label>{{ label }}</mat-label>\n        <input [(ngModel)]=\"value\" matInput [matDatepicker]=\"picker\"\n               (dateChange)=\"handleChange()\">\n        <mat-hint>MM/DD/YYYY</mat-hint>\n        <mat-datepicker-toggle matIconSuffix [for]=\"picker\"></mat-datepicker-toggle>\n        <mat-datepicker #picker></mat-datepicker>\n        </mat-form-field>\n    </span>  " }]
        }], ctorParameters: function () { return [{ type: SQLDataService }, { type: i2.DatePipe }]; }, propDecorators: { col: [{
                type: Input
            }], data: [{
                type: Input
            }], class: [{
                type: Input
            }], style: [{
                type: Input
            }], hint: [{
                type: Input
            }], icon: [{
                type: Input
            }], label: [{
                type: Input
            }], placeholder: [{
                type: Input
            }], appearance: [{
                type: Input
            }], bs_row: [{
                type: Input
            }], bs_col: [{
                type: Input
            }], top_label: [{
                type: Input
            }], change: [{
                type: Output
            }] } });

class SqlUploadFormComponent {
    constructor(_http, _dataService) {
        this._http = _http;
        this._dataService = _dataService;
        this.last_id = '';
        this.path = "https://myna-docs.com/upload.php";
        this.id = '0'; // Primary key for an existing record = 0=Insert
        this.table = "dual"; // Name of the base table.
        this.embedded = "N"; // Is the form embedded in a list.
        this.card = "Y"; // Show the form in a card Y/N
        this.closable = "N"; // Is the form closable Y/N
        this.open = "Y"; // Does a closable form start open.
        this.class = ""; // Class for the form container.
        this.style = ""; // Style for the form container.
        this.title = ""; // Title of the form.
        this.bs_row = 'Y'; // Y means add a bootstrap row.
        this.bs_col = 'col-sm-12 col-lg-6 col-xl-4'; // What bootstrap columns.
        this.handler = 'default'; // what handler is used to process the form.
        this.change = new EventEmitter();
        this.saved = new EventEmitter();
        this.counter = 0;
        this.showErrorAlert = 'N';
        this.errorMessage = 'Post Failed';
        this.showSuccessAlert = 'N';
        this.file = new FormControl('');
        this.file_data = '';
        this.myObs = this._dataService.dataSubject.subscribe(d => {
            this.data = d;
            this.counter++;
            if (this.data.id != this.last_id) {
                this.last_id = this.data.id;
                this.id = this.data.id;
                this.ngAfterViewInit();
            }
            if (this.data.submit === 'Y') {
                this.postSQL();
            }
        });
    }
    ngOnInit() {
    }
    showUpload() {
        this.change.emit('DONE');
    }
    ngAfterViewInit() {
        if (this.embedded == 'Y') {
            this.id == this.data.id;
        }
        this._dataService.getForm(this.table, this.id).subscribe((data) => {
            this.data = data;
            this._dataService.pushNotification(this.data);
        });
    }
    postSQL() {
        this._dataService.postSQL(this.data).subscribe((data) => {
            if (data.error_code == "0") {
                this.showSuccessAlert = 'Y';
                this.showErrorAlert = 'N';
                this.errorMessage = 'Record Saved';
            }
            else {
                this.showSuccessAlert = 'N';
                this.showErrorAlert = 'Y';
                this.errorMessage = data.error_message;
                this.errorMessage = 'Record Saved';
            }
            this._dataService.pushNotification(data);
            setTimeout(() => {
                this.showErrorAlert = 'N';
                this.showSuccessAlert = 'N';
            }, 5000);
        });
    }
    ngDoCheck() {
    }
    ngOnChanges(changes) {
    }
    fileChange(index, event) {
        const fileList = event.target.files;
        if (fileList.length > 0) {
            let k;
            let v;
            const file = fileList[0];
            if ((file.size / 1048576) <= 8) {
                let formData = new FormData();
                formData.append('file', file, file.name);
                for ([k, v] of Object.entries(this.data)) {
                    formData.append(k, v);
                }
                this.file_data = formData;
            }
            else {
                alert('File size exceeds 8 MB. Please choose less than 8 MB');
            }
        }
    }
    uploadFile() {
        this._http.post(this.path, this.file_data)
            .subscribe(res => {
            location.reload();
        }, (err) => {
            //send error response
            alert('error occured');
        });
    }
    ngOnDestroy() {
        this.myObs.unsubscribe();
    }
}
SqlUploadFormComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.3", ngImport: i0, type: SqlUploadFormComponent, deps: [{ token: i1.HttpClient }, { token: SQLDataService }], target: i0.ɵɵFactoryTarget.Component });
SqlUploadFormComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.3", type: SqlUploadFormComponent, isStandalone: true, selector: "sql-upload-form", inputs: { data: "data", path: "path", id: "id", table: "table", embedded: "embedded", card: "card", closable: "closable", open: "open", class: "class", style: "style", title: "title", bs_row: "bs_row", bs_col: "bs_col", handler: "handler" }, outputs: { change: "change", saved: "saved" }, usesOnChanges: true, ngImport: i0, template: "<div class=\"card\">\n    <div class=\"card-header\" style=\"margin-top: 0px;\">\n       <h2>{{ title }}</h2>\n    </div>\n    <div class=\"card-body\">\n        <div class=\"row\">\n            <ng-content></ng-content>\n        </div>\n    </div>\n    <div class=\"row\">\n        <div class=\"col-6 p-3\">\n            <input style=\"margin-left: 20px;\" class=\"btn-dark btn\" [formControl]=\"file\" (change)=\"fileChange(index,$event)\" type=\"file\" placeholder=\"File\">\n        </div>\n        <div class=\"col-6 p-3\">\n            <button (click)=\"showUpload()\" class=\"btn btn-light\">\n                Cancel\n            </button>\n            <button style=\"margin-left:20px;\" (click)=\"uploadFile()\" class=\"btn btn-primary\">\n                Upload\n            </button>\n        </div>\n    </div>\n</div>", styles: [""], dependencies: [{ kind: "ngmodule", type: CommonModule }, { kind: "ngmodule", type: FormsModule }, { kind: "directive", type: i3.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "ngmodule", type: HttpClientModule }, { kind: "ngmodule", type: ReactiveFormsModule }, { kind: "directive", type: i3.FormControlDirective, selector: "[formControl]", inputs: ["formControl", "disabled", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.3", ngImport: i0, type: SqlUploadFormComponent, decorators: [{
            type: Component,
            args: [{ selector: 'sql-upload-form', standalone: true, imports: [CommonModule, FormsModule, HttpClientModule, ReactiveFormsModule], template: "<div class=\"card\">\n    <div class=\"card-header\" style=\"margin-top: 0px;\">\n       <h2>{{ title }}</h2>\n    </div>\n    <div class=\"card-body\">\n        <div class=\"row\">\n            <ng-content></ng-content>\n        </div>\n    </div>\n    <div class=\"row\">\n        <div class=\"col-6 p-3\">\n            <input style=\"margin-left: 20px;\" class=\"btn-dark btn\" [formControl]=\"file\" (change)=\"fileChange(index,$event)\" type=\"file\" placeholder=\"File\">\n        </div>\n        <div class=\"col-6 p-3\">\n            <button (click)=\"showUpload()\" class=\"btn btn-light\">\n                Cancel\n            </button>\n            <button style=\"margin-left:20px;\" (click)=\"uploadFile()\" class=\"btn btn-primary\">\n                Upload\n            </button>\n        </div>\n    </div>\n</div>" }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: SQLDataService }]; }, propDecorators: { data: [{
                type: Input
            }], path: [{
                type: Input
            }], id: [{
                type: Input
            }], table: [{
                type: Input
            }], embedded: [{
                type: Input
            }], card: [{
                type: Input
            }], closable: [{
                type: Input
            }], open: [{
                type: Input
            }], class: [{
                type: Input
            }], style: [{
                type: Input
            }], title: [{
                type: Input
            }], bs_row: [{
                type: Input
            }], bs_col: [{
                type: Input
            }], handler: [{
                type: Input
            }], change: [{
                type: Output
            }], saved: [{
                type: Output
            }] } });

class SqlInputComponent {
    ngAfterViewInit() {
    }
    constructor(_dataService) {
        this._dataService = _dataService;
        this.va = '';
        this.fieldData = '';
        this.col = '';
        this.class = '';
        this.style = '';
        this.hint = '';
        this.icon = '';
        this.label = 'Label not set';
        this.placeholder = '';
        this.appearance = 'outline';
        this.bs_row = 'Y';
        this.bs_col = 'col-12';
        this.top_label = 'N';
        this.counter = 0;
        this.change = new EventEmitter();
        this.nname = '';
        this.myObs = this._dataService.dataSubject.subscribe(d => {
            this.data = d;
            this.fieldData = this.data;
            this.va = this.fieldData[this.col];
            this.counter++;
        });
    }
    ngOnInit() {
        this.nname = 'XX' + Math.floor(Math.random() * 10000);
    }
    handleChange() {
        this.fieldData['submit'] = 'N';
        this.fieldData[this.col] = this.va;
        this._dataService.pushNotification(this.fieldData);
    }
    ngOnDestroy() {
        //    this.myObs.unsubscribe();
    }
}
SqlInputComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.3", ngImport: i0, type: SqlInputComponent, deps: [{ token: SQLDataService }], target: i0.ɵɵFactoryTarget.Component });
SqlInputComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.3", type: SqlInputComponent, isStandalone: true, selector: "sql-input", inputs: { col: "col", data: "data", class: "class", style: "style", hint: "hint", icon: "icon", label: "label", placeholder: "placeholder", appearance: "appearance", bs_row: "bs_row", bs_col: "bs_col", top_label: "top_label" }, outputs: { change: "change" }, ngImport: i0, template: "    <span *ngIf=\"appearance=='outline'\">\n      <!-- if new row -->\n          <div *ngIf=\"bs_row=='Y'\" class=\"row\">\n            <div [class]=\"bs_col\">\n              <p *ngIf=\"top_label=='Y'\">{{ label }}</p>\n              <mat-form-field \n                [ngClass]=\"class\" \n                [style]=\"style\" \n                (change)=\"handleChange()\"\n                appearance=\"outline\">\n                  <mat-label>{{ label }}</mat-label>\n                  <input [name]=\"nname\" [id]=\"nname\" [(ngModel)]=\"va\" autocomplete=\"false\" matInput placeholder=\"{{ placeholder }}\">\n                      <mat-icon matSuffix>{{ icon }}</mat-icon>\n                      <mat-hint>{{ hint }}</mat-hint>\n              </mat-form-field>\n            </div>\n          </div>\n      <!-- if not new row but has bootstrap column-->\n      <div *ngIf=\"bs_row!='Y'&&bs_col!=''\">\n        <div [class]=\"bs_col\">\n          <p *ngIf=\"top_label=='Y'\">{{ label }}</p>       \n          <mat-form-field \n            [ngClass]=\"class\" \n            [style]=\"style\" \n            (change)=\"handleChange()\"\n            appearance=\"outline\">\n              <mat-label>{{ label }}</mat-label>\n              <input  [name]=\"nname\" [id]=\"nname\" [(ngModel)]=\"va\" matInput autocomplete=\"false\" placeholder=\"{{ placeholder }}\">\n                  <mat-icon matSuffix>{{ icon }}</mat-icon>\n                  <mat-hint>{{ hint }}</mat-hint>\n          </mat-form-field>\n        </div>\n      </div>\n      <!-- if not new row and no bootstrap column -->\n      <span *ngIf=\"bs_row!='Y'&&bs_col==''\" style=\"margin-right:20px; \">\n        <p *ngIf=\"top_label=='Y'\">{{ label }}</p>\n          <mat-form-field \n            [ngClass]=\"class\" \n            [style]=\"style\" \n            (change)=\"handleChange()\"\n            appearance=\"outline\">\n              <mat-label>{{ label }}</mat-label>\n              <input  [name]=\"nname\" [id]=\"nname\"  [(ngModel)]=\"va\" matInput autocomplete=\"false\" placeholder=\"{{ placeholder }}\">\n                  <mat-icon matSuffix>{{ icon }}</mat-icon>\n                  <mat-hint>{{ hint }}</mat-hint>\n          </mat-form-field>\n        </span>\n    </span>\n    <!-- mat appearance is fill -->    \n    <span *ngIf=\"appearance=='fill'\">\n      <!-- if new row -->\n      <div *ngIf=\"bs_row=='Y'\" class=\"row\">\n        <div [class]=\"bs_col\">\n          <p *ngIf=\"top_label=='Y'\">{{ label }}</p>\n          <mat-form-field \n            [ngClass]=\"class\" \n            [style]=\"style\" appearance=\"fill\">\n              <mat-label>{{ label }}</mat-label>\n                <input  [name]=\"nname\" [id]=\"nname\"  [(ngModel)]=\"va\"\n                  [(ngModel)]=\"va\" \n                  (change)=\"handleChange()\" autocomplete=\"false\"\n                  matInput \n                  placeholder=\"{{ placeholder }}\">\n                    <mat-icon matSuffix>{{ icon }}</mat-icon>\n                    <mat-hint>{{ hint }}</mat-hint>\n          </mat-form-field>\n        </div>\n      </div>\n            <!-- if not new row but has bootstrap column-->\n            <div *ngIf=\"bs_row!='Y'&&bs_col!=''\">\n              <div [class]=\"bs_col\">\n                <p *ngIf=\"top_label=='Y'\">{{ label }}</p>\n                <mat-form-field \n                [ngClass]=\"class\" \n                [style]=\"style\" appearance=\"fill\">\n                  <mat-label>{{ label }}</mat-label>\n                    <input  [name]=\"nname\" [id]=\"nname\"  [(ngModel)]=\"va\"\n                      (change)=\"handleChange()\" autocomplete=\"false\"\n                      matInput \n                      placeholder=\"{{ placeholder }}\">\n                        <mat-icon matSuffix>{{ icon }}</mat-icon>\n                        <mat-hint>{{ hint }}</mat-hint>\n              </mat-form-field>\n              </div>\n            </div>\n            <span *ngIf=\"bs_row!='Y'&&bs_col==''\" style=\"margin-right:20px;\" >\n              <p *ngIf=\"top_label=='Y'\">{{ label }}</p>\n              <mat-form-field \n              [ngClass]=\"class\" \n              [style]=\"style\" appearance=\"fill\">\n                <mat-label>{{ label }}</mat-label>\n                  <input  [name]=\"nname\" [id]=\"nname\"  [(ngModel)]=\"va\"\n                    [(ngModel)]=\"va\" \n                    (change)=\"handleChange()\" autocomplete=\"false\"\n                    matInput \n                    placeholder=\"{{ placeholder }}\">\n                      <mat-icon matSuffix>{{ icon }}</mat-icon>\n                      <mat-hint>{{ hint }}</mat-hint>\n            </mat-form-field>\n          </span>\n\n        </span>", styles: [""], dependencies: [{ kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i2.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "ngmodule", type: FormsModule }, { kind: "directive", type: i3.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "ngmodule", type: MatFormFieldModule }, { kind: "component", type: i4$1.MatFormField, selector: "mat-form-field", inputs: ["hideRequiredMarker", "color", "floatLabel", "appearance", "subscriptSizing", "hintLabel"], exportAs: ["matFormField"] }, { kind: "directive", type: i4$1.MatLabel, selector: "mat-label" }, { kind: "directive", type: i4$1.MatHint, selector: "mat-hint", inputs: ["align", "id"] }, { kind: "directive", type: i4$1.MatSuffix, selector: "[matSuffix], [matIconSuffix], [matTextSuffix]", inputs: ["matTextSuffix"] }, { kind: "ngmodule", type: MatInputModule }, { kind: "directive", type: i5$1.MatInput, selector: "input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]", inputs: ["disabled", "id", "placeholder", "name", "required", "type", "errorStateMatcher", "aria-describedby", "value", "readonly"], exportAs: ["matInput"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.3", ngImport: i0, type: SqlInputComponent, decorators: [{
            type: Component,
            args: [{ selector: 'sql-input', standalone: true, imports: [CommonModule, FormsModule, MatFormFieldModule, MatInputModule], template: "    <span *ngIf=\"appearance=='outline'\">\n      <!-- if new row -->\n          <div *ngIf=\"bs_row=='Y'\" class=\"row\">\n            <div [class]=\"bs_col\">\n              <p *ngIf=\"top_label=='Y'\">{{ label }}</p>\n              <mat-form-field \n                [ngClass]=\"class\" \n                [style]=\"style\" \n                (change)=\"handleChange()\"\n                appearance=\"outline\">\n                  <mat-label>{{ label }}</mat-label>\n                  <input [name]=\"nname\" [id]=\"nname\" [(ngModel)]=\"va\" autocomplete=\"false\" matInput placeholder=\"{{ placeholder }}\">\n                      <mat-icon matSuffix>{{ icon }}</mat-icon>\n                      <mat-hint>{{ hint }}</mat-hint>\n              </mat-form-field>\n            </div>\n          </div>\n      <!-- if not new row but has bootstrap column-->\n      <div *ngIf=\"bs_row!='Y'&&bs_col!=''\">\n        <div [class]=\"bs_col\">\n          <p *ngIf=\"top_label=='Y'\">{{ label }}</p>       \n          <mat-form-field \n            [ngClass]=\"class\" \n            [style]=\"style\" \n            (change)=\"handleChange()\"\n            appearance=\"outline\">\n              <mat-label>{{ label }}</mat-label>\n              <input  [name]=\"nname\" [id]=\"nname\" [(ngModel)]=\"va\" matInput autocomplete=\"false\" placeholder=\"{{ placeholder }}\">\n                  <mat-icon matSuffix>{{ icon }}</mat-icon>\n                  <mat-hint>{{ hint }}</mat-hint>\n          </mat-form-field>\n        </div>\n      </div>\n      <!-- if not new row and no bootstrap column -->\n      <span *ngIf=\"bs_row!='Y'&&bs_col==''\" style=\"margin-right:20px; \">\n        <p *ngIf=\"top_label=='Y'\">{{ label }}</p>\n          <mat-form-field \n            [ngClass]=\"class\" \n            [style]=\"style\" \n            (change)=\"handleChange()\"\n            appearance=\"outline\">\n              <mat-label>{{ label }}</mat-label>\n              <input  [name]=\"nname\" [id]=\"nname\"  [(ngModel)]=\"va\" matInput autocomplete=\"false\" placeholder=\"{{ placeholder }}\">\n                  <mat-icon matSuffix>{{ icon }}</mat-icon>\n                  <mat-hint>{{ hint }}</mat-hint>\n          </mat-form-field>\n        </span>\n    </span>\n    <!-- mat appearance is fill -->    \n    <span *ngIf=\"appearance=='fill'\">\n      <!-- if new row -->\n      <div *ngIf=\"bs_row=='Y'\" class=\"row\">\n        <div [class]=\"bs_col\">\n          <p *ngIf=\"top_label=='Y'\">{{ label }}</p>\n          <mat-form-field \n            [ngClass]=\"class\" \n            [style]=\"style\" appearance=\"fill\">\n              <mat-label>{{ label }}</mat-label>\n                <input  [name]=\"nname\" [id]=\"nname\"  [(ngModel)]=\"va\"\n                  [(ngModel)]=\"va\" \n                  (change)=\"handleChange()\" autocomplete=\"false\"\n                  matInput \n                  placeholder=\"{{ placeholder }}\">\n                    <mat-icon matSuffix>{{ icon }}</mat-icon>\n                    <mat-hint>{{ hint }}</mat-hint>\n          </mat-form-field>\n        </div>\n      </div>\n            <!-- if not new row but has bootstrap column-->\n            <div *ngIf=\"bs_row!='Y'&&bs_col!=''\">\n              <div [class]=\"bs_col\">\n                <p *ngIf=\"top_label=='Y'\">{{ label }}</p>\n                <mat-form-field \n                [ngClass]=\"class\" \n                [style]=\"style\" appearance=\"fill\">\n                  <mat-label>{{ label }}</mat-label>\n                    <input  [name]=\"nname\" [id]=\"nname\"  [(ngModel)]=\"va\"\n                      (change)=\"handleChange()\" autocomplete=\"false\"\n                      matInput \n                      placeholder=\"{{ placeholder }}\">\n                        <mat-icon matSuffix>{{ icon }}</mat-icon>\n                        <mat-hint>{{ hint }}</mat-hint>\n              </mat-form-field>\n              </div>\n            </div>\n            <span *ngIf=\"bs_row!='Y'&&bs_col==''\" style=\"margin-right:20px;\" >\n              <p *ngIf=\"top_label=='Y'\">{{ label }}</p>\n              <mat-form-field \n              [ngClass]=\"class\" \n              [style]=\"style\" appearance=\"fill\">\n                <mat-label>{{ label }}</mat-label>\n                  <input  [name]=\"nname\" [id]=\"nname\"  [(ngModel)]=\"va\"\n                    [(ngModel)]=\"va\" \n                    (change)=\"handleChange()\" autocomplete=\"false\"\n                    matInput \n                    placeholder=\"{{ placeholder }}\">\n                      <mat-icon matSuffix>{{ icon }}</mat-icon>\n                      <mat-hint>{{ hint }}</mat-hint>\n            </mat-form-field>\n          </span>\n\n        </span>" }]
        }], ctorParameters: function () { return [{ type: SQLDataService }]; }, propDecorators: { col: [{
                type: Input
            }], data: [{
                type: Input
            }], class: [{
                type: Input
            }], style: [{
                type: Input
            }], hint: [{
                type: Input
            }], icon: [{
                type: Input
            }], label: [{
                type: Input
            }], placeholder: [{
                type: Input
            }], appearance: [{
                type: Input
            }], bs_row: [{
                type: Input
            }], bs_col: [{
                type: Input
            }], top_label: [{
                type: Input
            }], change: [{
                type: Output
            }] } });

class SqlSelectComponent {
    constructor(_dataService) {
        this._dataService = _dataService;
        this.value = '';
        this.fieldData = '';
        this.appearance = 'outline';
        this.native = 'Y';
        this.sql = '';
        this.handler = '';
        this.col = '';
        this.id = '';
        this.id2 = '';
        this.id3 = '';
        this.class = '';
        this.style = '';
        this.hint = '';
        this.icon = '';
        this.label = 'Label not set';
        this.placeholder = '';
        this.bs_row = 'Y';
        this.bs_col = 'col-12';
        this.top_label = 'N';
        this.counter = 0;
        this.change = new EventEmitter();
        this.parameters = { page: '', id: '', id2: '', id3: '' };
        this.myObs = this._dataService.dataSubject.subscribe(d => {
            this.data = d;
            this.fieldData = this.data;
            this.value = this.fieldData[this.col];
            this.counter++;
        });
    }
    ngAfterViewInit() {
    }
    ngOnInit() {
    }
    handleChange() {
        this.fieldData['submit'] = 'N';
        this.fieldData[this.col] = this.value;
        this._dataService.pushNotification(this.fieldData);
    }
    ngOnDestroy() {
        this.myObs.unsubscribe();
        this.myDataObs.unsubscribe();
    }
}
SqlSelectComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.3", ngImport: i0, type: SqlSelectComponent, deps: [{ token: SQLDataService }], target: i0.ɵɵFactoryTarget.Component });
SqlSelectComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.3", type: SqlSelectComponent, isStandalone: true, selector: "sql-select", inputs: { appearance: "appearance", native: "native", sql: "sql", handler: "handler", col: "col", data: "data", id: "id", id2: "id2", id3: "id3", class: "class", style: "style", hint: "hint", icon: "icon", label: "label", placeholder: "placeholder", bs_row: "bs_row", bs_col: "bs_col", top_label: "top_label" }, outputs: { change: "change" }, queries: [{ propertyName: "list", predicate: [""] }], ngImport: i0, template: "    <!--<ng-container *ngIf=\"appearance=='fill'\">\n        <ng-container *ngIf=\"native=='Y'\">\n            <div *ngIf=\"bs_row=='Y'\" class=\"row\">\n                <div [class]=\"bs_col\">\n                    <p *ngIf=\"top_label=='Y'\">{{ label }}</p>\n                    <mat-form-field appearance=\"fill\" [style]=\"style\" [class]=\"class\">\n                        <mat-label>{{ label }}</mat-label>\n                        <select [(ngModel)]=\"value\" (change)=\"handleChange()\" matNativeControl [style]=\"style\" [class]=\"class\">\n                          <ng-container *ngTemplateOutlet=\"contentTmpl\"></ng-container>\n                        </select>\n                      </mat-form-field>\n                </div>\n            </div>\n            <span *ngIf=\"bs_row!='Y'&&bs_col!=''\">\n                <div [class]=\"bs_col\">\n                    <p *ngIf=\"top_label=='Y'\">{{ label }}</p>\n                    <mat-form-field appearance=\"fill\" [style]=\"style\" [class]=\"class\">\n                        <mat-label>{{ label }}</mat-label>\n                        <select [(ngModel)]=\"value\"  matNativeControl (change)=\"handleChange()\" [style]=\"style\" [class]=\"class\">\n                          <ng-container *ngTemplateOutlet=\"contentTmpl\"></ng-container>\n                        </select>\n                      </mat-form-field>\n                </div>\n              </span>\n            <span *ngIf=\"bs_row!='Y'&&bs_col==''\">\n                <p *ngIf=\"top_label=='Y'\">{{ label }}</p>\n                <mat-form-field appearance=\"fill\" [style]=\"style\" [class]=\"class\">\n                    <mat-label>{{ label }}</mat-label>\n                    <select  [(ngModel)]=\"value\" matNativeControl (change)=\"handleChange()\" [style]=\"style\" [class]=\"class\">\n                      <ng-container *ngTemplateOutlet=\"contentTmpl\"></ng-container>\n                    </select>\n                  </mat-form-field>\n                </span>\n              </ng-container>\n        <span *ngIf=\"native=='N'\">\n            <div *ngIf=\"bs_row=='Y'\" class=\"row\">\n                <div [class]=\"bs_col\">\n                    <p *ngIf=\"top_label=='Y'\">{{ label }}</p>\n                    <mat-form-field appearance=\"fill\" [style]=\"style\" [class]=\"class\">\n                        <mat-label>{{ label }}</mat-label>\n                        <mat-select  [(ngModel)]=\"value\" (selectionChange)=\"handleChange()\" [style]=\"style\" [class]=\"class\">\n                          <ng-container *ngTemplateOutlet=\"contentTmpl\"></ng-container>\n                        </mat-select>\n                      </mat-form-field>\n                </div>\n            </div>\n            <span *ngIf=\"bs_row!='Y'&&bs_col!=''\">\n                <div [class]=\"bs_col\">\n                    <p *ngIf=\"top_label=='Y'\">{{ label }}</p>\n                    <mat-form-field appearance=\"fill\"  [style]=\"style\" [class]=\"class\">\n                        <mat-label>{{ label }}</mat-label>\n                        <mat-select  [(ngModel)]=\"value\" (selectionChange)=\"handleChange()\" [style]=\"style\" [class]=\"class\">\n                          <ng-container *ngTemplateOutlet=\"contentTmpl\"></ng-container>\n                        </mat-select>\n                      </mat-form-field>\n                </div>\n              </span>\n            <span *ngIf=\"bs_row!='Y'&&bs_col==''\">\n                <p *ngIf=\"top_label=='Y'\">{{ label }}</p>\n                <mat-form-field appearance=\"fill\"  [style]=\"style\" [class]=\"class\">\n                    <mat-label>{{ label }}</mat-label>\n                    <mat-select  [(ngModel)]=\"value\" (selectionChange)=\"handleChange()\" [style]=\"style\" [class]=\"class\">\n                      <ng-container *ngTemplateOutlet=\"contentTmpl\"></ng-container>\n                    </mat-select>\n                  </mat-form-field>\n                </span>\n              </span>\n    </ng-container>\n   <ng-container *ngIf=\"appearance=='outline'\">\n    <ng-container *ngIf=\"native=='Y'\">\n        <div *ngIf=\"bs_row=='Y'\" class=\"row\">\n            <div [class]=\"bs_col\">\n                <p *ngIf=\"top_label=='Y'\">{{ label }}</p>\n                <mat-form-field appearance=\"outline\" [style]=\"style\" [class]=\"class\">\n                    <mat-label>{{ label }}</mat-label>\n                    <select  [(ngModel)]=\"value\" matNativeControl  (change)=\"handleChange()\" [style]=\"style\" [class]=\"class\">\n                      <ng-container *ngTemplateOutlet=\"contentTmpl\"></ng-container>\n                    </select>\n                  </mat-form-field>\n            </div>\n        </div>\n        <span *ngIf=\"bs_row!='Y'&&bs_col!=''\">\n            <div [class]=\"bs_col\">\n                <p *ngIf=\"top_label=='Y'\">{{ label }}</p>\n                <mat-form-field appearance=\"outline\" [style]=\"style\" [class]=\"class\">\n                    <mat-label>{{ label }}</mat-label>\n                    <select  [(ngModel)]=\"value\" matNativeControl  (change)=\"handleChange()\" [style]=\"style\" [class]=\"class\">\n                      <ng-container *ngTemplateOutlet=\"contentTmpl\"></ng-container>\n                    </select>\n                  </mat-form-field>\n            </div>\n        </span> -->\n        <span *ngIf=\"bs_row!='Y'&&bs_col==''\" style=\"margin-right:20px;\">\n            <p *ngIf=\"top_label=='Y'\">{{ label }}</p>\n            <mat-form-field appearance=\"outline\" [style]=\"style\" [class]=\"class\">\n                <mat-label>{{ label }}</mat-label>\n                <mat-select  [(ngModel)]=\"value\"  (selectionChange)=\"handleChange()\" [style]=\"style\" [class]=\"class\">\n                  <ng-content></ng-content>\n                </mat-select>\n              </mat-form-field>\n        </span>\n<!--          </ng-container>\n    <ng-container *ngIf=\"native=='N'\">\n        <div *ngIf=\"bs_row=='Y'\" class=\"row\">\n            <div [class]=\"bs_col\">\n                <p *ngIf=\"top_label=='Y'\">{{ label }}</p>\n                <mat-form-field appearance=\"fill\"  [style]=\"style\" [class]=\"class\">\n                    <mat-label>{{ label }}</mat-label>\n                    <mat-select  [(ngModel)]=\"value\"  (selectionChange)=\"handleChange()\" [style]=\"style\" [class]=\"class\">\n                      <ng-container *ngTemplateOutlet=\"contentTmpl\"></ng-container>\n                    </mat-select>\n                  </mat-form-field>\n            </div>\n        </div>\n        <ng-container *ngIf=\"bs_row!='Y'&&bs_col!=''\">\n            <div [class]=\"bs_col\">\n                <p *ngIf=\"top_label=='Y'\">{{ label }}</p>\n                <mat-form-field appearance=\"outline\"  [style]=\"style\" [class]=\"class\">\n                    <mat-label>{{ label }}</mat-label>\n                    <mat-select  [(ngModel)]=\"value\"  (selectionChange)=\"handleChange()\" [style]=\"style\" [class]=\"class\">\n                      <ng-container *ngTemplateOutlet=\"contentTmpl\"></ng-container>\n                    </mat-select>\n                  </mat-form-field>\n            </div>\n          </ng-container>\n        <ng-container *ngIf=\"bs_row!='Y'&&bs_col==''\">\n            <p *ngIf=\"top_label=='Y'\">{{ label }}</p>\n            <mat-form-field appearance=\"outline\"  [style]=\"style\" [class]=\"class\">\n                <mat-label>{{ label }}</mat-label>\n                <mat-select  [(ngModel)]=\"value\"  (selectionChange)=\"handleChange()\" [style]=\"style\" [class]=\"class\">\n                  <ng-container *ngTemplateOutlet=\"contentTmpl\"></ng-container>\n                </mat-select>\n              </mat-form-field>\n            </ng-container>\n          </ng-container>\n        </ng-container>\n<ng-template #contentTmpl>\n         \n</ng-template> -->", styles: [""], dependencies: [{ kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "ngmodule", type: FormsModule }, { kind: "directive", type: i3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "ngmodule", type: MatFormFieldModule }, { kind: "component", type: i4$1.MatFormField, selector: "mat-form-field", inputs: ["hideRequiredMarker", "color", "floatLabel", "appearance", "subscriptSizing", "hintLabel"], exportAs: ["matFormField"] }, { kind: "directive", type: i4$1.MatLabel, selector: "mat-label" }, { kind: "ngmodule", type: MatInputModule }, { kind: "ngmodule", type: MatOptionModule }, { kind: "ngmodule", type: MatSelectModule }, { kind: "component", type: i5$2.MatSelect, selector: "mat-select", inputs: ["disabled", "disableRipple", "tabIndex", "hideSingleSelectionIndicator"], exportAs: ["matSelect"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.3", ngImport: i0, type: SqlSelectComponent, decorators: [{
            type: Component,
            args: [{ selector: 'sql-select', standalone: true, imports: [CommonModule, FormsModule, MatFormFieldModule,
                        MatInputModule, MatOptionModule, MatSelectModule], template: "    <!--<ng-container *ngIf=\"appearance=='fill'\">\n        <ng-container *ngIf=\"native=='Y'\">\n            <div *ngIf=\"bs_row=='Y'\" class=\"row\">\n                <div [class]=\"bs_col\">\n                    <p *ngIf=\"top_label=='Y'\">{{ label }}</p>\n                    <mat-form-field appearance=\"fill\" [style]=\"style\" [class]=\"class\">\n                        <mat-label>{{ label }}</mat-label>\n                        <select [(ngModel)]=\"value\" (change)=\"handleChange()\" matNativeControl [style]=\"style\" [class]=\"class\">\n                          <ng-container *ngTemplateOutlet=\"contentTmpl\"></ng-container>\n                        </select>\n                      </mat-form-field>\n                </div>\n            </div>\n            <span *ngIf=\"bs_row!='Y'&&bs_col!=''\">\n                <div [class]=\"bs_col\">\n                    <p *ngIf=\"top_label=='Y'\">{{ label }}</p>\n                    <mat-form-field appearance=\"fill\" [style]=\"style\" [class]=\"class\">\n                        <mat-label>{{ label }}</mat-label>\n                        <select [(ngModel)]=\"value\"  matNativeControl (change)=\"handleChange()\" [style]=\"style\" [class]=\"class\">\n                          <ng-container *ngTemplateOutlet=\"contentTmpl\"></ng-container>\n                        </select>\n                      </mat-form-field>\n                </div>\n              </span>\n            <span *ngIf=\"bs_row!='Y'&&bs_col==''\">\n                <p *ngIf=\"top_label=='Y'\">{{ label }}</p>\n                <mat-form-field appearance=\"fill\" [style]=\"style\" [class]=\"class\">\n                    <mat-label>{{ label }}</mat-label>\n                    <select  [(ngModel)]=\"value\" matNativeControl (change)=\"handleChange()\" [style]=\"style\" [class]=\"class\">\n                      <ng-container *ngTemplateOutlet=\"contentTmpl\"></ng-container>\n                    </select>\n                  </mat-form-field>\n                </span>\n              </ng-container>\n        <span *ngIf=\"native=='N'\">\n            <div *ngIf=\"bs_row=='Y'\" class=\"row\">\n                <div [class]=\"bs_col\">\n                    <p *ngIf=\"top_label=='Y'\">{{ label }}</p>\n                    <mat-form-field appearance=\"fill\" [style]=\"style\" [class]=\"class\">\n                        <mat-label>{{ label }}</mat-label>\n                        <mat-select  [(ngModel)]=\"value\" (selectionChange)=\"handleChange()\" [style]=\"style\" [class]=\"class\">\n                          <ng-container *ngTemplateOutlet=\"contentTmpl\"></ng-container>\n                        </mat-select>\n                      </mat-form-field>\n                </div>\n            </div>\n            <span *ngIf=\"bs_row!='Y'&&bs_col!=''\">\n                <div [class]=\"bs_col\">\n                    <p *ngIf=\"top_label=='Y'\">{{ label }}</p>\n                    <mat-form-field appearance=\"fill\"  [style]=\"style\" [class]=\"class\">\n                        <mat-label>{{ label }}</mat-label>\n                        <mat-select  [(ngModel)]=\"value\" (selectionChange)=\"handleChange()\" [style]=\"style\" [class]=\"class\">\n                          <ng-container *ngTemplateOutlet=\"contentTmpl\"></ng-container>\n                        </mat-select>\n                      </mat-form-field>\n                </div>\n              </span>\n            <span *ngIf=\"bs_row!='Y'&&bs_col==''\">\n                <p *ngIf=\"top_label=='Y'\">{{ label }}</p>\n                <mat-form-field appearance=\"fill\"  [style]=\"style\" [class]=\"class\">\n                    <mat-label>{{ label }}</mat-label>\n                    <mat-select  [(ngModel)]=\"value\" (selectionChange)=\"handleChange()\" [style]=\"style\" [class]=\"class\">\n                      <ng-container *ngTemplateOutlet=\"contentTmpl\"></ng-container>\n                    </mat-select>\n                  </mat-form-field>\n                </span>\n              </span>\n    </ng-container>\n   <ng-container *ngIf=\"appearance=='outline'\">\n    <ng-container *ngIf=\"native=='Y'\">\n        <div *ngIf=\"bs_row=='Y'\" class=\"row\">\n            <div [class]=\"bs_col\">\n                <p *ngIf=\"top_label=='Y'\">{{ label }}</p>\n                <mat-form-field appearance=\"outline\" [style]=\"style\" [class]=\"class\">\n                    <mat-label>{{ label }}</mat-label>\n                    <select  [(ngModel)]=\"value\" matNativeControl  (change)=\"handleChange()\" [style]=\"style\" [class]=\"class\">\n                      <ng-container *ngTemplateOutlet=\"contentTmpl\"></ng-container>\n                    </select>\n                  </mat-form-field>\n            </div>\n        </div>\n        <span *ngIf=\"bs_row!='Y'&&bs_col!=''\">\n            <div [class]=\"bs_col\">\n                <p *ngIf=\"top_label=='Y'\">{{ label }}</p>\n                <mat-form-field appearance=\"outline\" [style]=\"style\" [class]=\"class\">\n                    <mat-label>{{ label }}</mat-label>\n                    <select  [(ngModel)]=\"value\" matNativeControl  (change)=\"handleChange()\" [style]=\"style\" [class]=\"class\">\n                      <ng-container *ngTemplateOutlet=\"contentTmpl\"></ng-container>\n                    </select>\n                  </mat-form-field>\n            </div>\n        </span> -->\n        <span *ngIf=\"bs_row!='Y'&&bs_col==''\" style=\"margin-right:20px;\">\n            <p *ngIf=\"top_label=='Y'\">{{ label }}</p>\n            <mat-form-field appearance=\"outline\" [style]=\"style\" [class]=\"class\">\n                <mat-label>{{ label }}</mat-label>\n                <mat-select  [(ngModel)]=\"value\"  (selectionChange)=\"handleChange()\" [style]=\"style\" [class]=\"class\">\n                  <ng-content></ng-content>\n                </mat-select>\n              </mat-form-field>\n        </span>\n<!--          </ng-container>\n    <ng-container *ngIf=\"native=='N'\">\n        <div *ngIf=\"bs_row=='Y'\" class=\"row\">\n            <div [class]=\"bs_col\">\n                <p *ngIf=\"top_label=='Y'\">{{ label }}</p>\n                <mat-form-field appearance=\"fill\"  [style]=\"style\" [class]=\"class\">\n                    <mat-label>{{ label }}</mat-label>\n                    <mat-select  [(ngModel)]=\"value\"  (selectionChange)=\"handleChange()\" [style]=\"style\" [class]=\"class\">\n                      <ng-container *ngTemplateOutlet=\"contentTmpl\"></ng-container>\n                    </mat-select>\n                  </mat-form-field>\n            </div>\n        </div>\n        <ng-container *ngIf=\"bs_row!='Y'&&bs_col!=''\">\n            <div [class]=\"bs_col\">\n                <p *ngIf=\"top_label=='Y'\">{{ label }}</p>\n                <mat-form-field appearance=\"outline\"  [style]=\"style\" [class]=\"class\">\n                    <mat-label>{{ label }}</mat-label>\n                    <mat-select  [(ngModel)]=\"value\"  (selectionChange)=\"handleChange()\" [style]=\"style\" [class]=\"class\">\n                      <ng-container *ngTemplateOutlet=\"contentTmpl\"></ng-container>\n                    </mat-select>\n                  </mat-form-field>\n            </div>\n          </ng-container>\n        <ng-container *ngIf=\"bs_row!='Y'&&bs_col==''\">\n            <p *ngIf=\"top_label=='Y'\">{{ label }}</p>\n            <mat-form-field appearance=\"outline\"  [style]=\"style\" [class]=\"class\">\n                <mat-label>{{ label }}</mat-label>\n                <mat-select  [(ngModel)]=\"value\"  (selectionChange)=\"handleChange()\" [style]=\"style\" [class]=\"class\">\n                  <ng-container *ngTemplateOutlet=\"contentTmpl\"></ng-container>\n                </mat-select>\n              </mat-form-field>\n            </ng-container>\n          </ng-container>\n        </ng-container>\n<ng-template #contentTmpl>\n         \n</ng-template> -->" }]
        }], ctorParameters: function () { return [{ type: SQLDataService }]; }, propDecorators: { list: [{
                type: ContentChildren,
                args: ['']
            }], appearance: [{
                type: Input
            }], native: [{
                type: Input
            }], sql: [{
                type: Input
            }], handler: [{
                type: Input
            }], col: [{
                type: Input
            }], data: [{
                type: Input
            }], id: [{
                type: Input
            }], id2: [{
                type: Input
            }], id3: [{
                type: Input
            }], class: [{
                type: Input
            }], style: [{
                type: Input
            }], hint: [{
                type: Input
            }], icon: [{
                type: Input
            }], label: [{
                type: Input
            }], placeholder: [{
                type: Input
            }], bs_row: [{
                type: Input
            }], bs_col: [{
                type: Input
            }], top_label: [{
                type: Input
            }], change: [{
                type: Output
            }] } });

class SqlTextareaComponent {
    ngAfterViewInit() {
    }
    constructor(_dataService) {
        this._dataService = _dataService;
        this.value = '';
        this.fieldData = '';
        this.rows = '5';
        this.maxrows = '10';
        this.col = '';
        this.class = '';
        this.style = '';
        this.hint = '';
        this.icon = '';
        this.label = 'Label not set';
        this.placeholder = '';
        this.appearance = 'outline';
        this.bs_row = 'Y';
        this.bs_col = 'col-12';
        this.top_label = 'N';
        this.counter = 0;
        this.change = new EventEmitter();
        this.myObs = this._dataService.dataSubject.subscribe(d => {
            this.data = d;
            this.fieldData = this.data;
            this.value = this.fieldData[this.col];
            this.counter++;
        });
    }
    ngOnInit() {
    }
    handleChange() {
        this.fieldData['submit'] = 'N';
        this.fieldData[this.col] = this.value;
        this._dataService.pushNotification(this.fieldData);
    }
    ngOnDestroy() {
        this.myObs.unsubscribe();
    }
}
SqlTextareaComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.3", ngImport: i0, type: SqlTextareaComponent, deps: [{ token: SQLDataService }], target: i0.ɵɵFactoryTarget.Component });
SqlTextareaComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.3", type: SqlTextareaComponent, isStandalone: true, selector: "sql-textarea", inputs: { rows: "rows", maxrows: "maxrows", col: "col", data: "data", class: "class", style: "style", hint: "hint", icon: "icon", label: "label", placeholder: "placeholder", appearance: "appearance", bs_row: "bs_row", bs_col: "bs_col", top_label: "top_label" }, outputs: { change: "change" }, ngImport: i0, template: "<div class=\"container-fluid\">\n    <!-- mat appearance is outline -->\n    <div *ngIf=\"appearance=='outline'\">\n      <!-- if new row -->\n          <div *ngIf=\"bs_row=='Y'\" class=\"row\">\n            <div [class]=\"bs_col\">\n                <p *ngIf=\"top_label=='Y'\">{{ label }}</p>\n                <mat-form-field appearance=\"outline\" [style]=\"style\" [class]=\"class\">\n                  <mat-label>{{ label }}</mat-label>\n                  <textarea (change)=\"handleChange()\" [(ngModel)]=\"value\" matInput\n                            cdkTextareaAutosize\n                            #autosize=\"cdkTextareaAutosize\"\n                            cdkAutosizeMinRows=\"{{ rows}}\"\n                            cdkAutosizeMaxRows=\"{{ maxrows }}\"></textarea>\n                </mat-form-field>  \n            </div>\n          </div>\n      <!-- if not new row but has bootstrap column-->\n      <div *ngIf=\"bs_row!='Y'&&bs_col!=''\">\n        <div [class]=\"bs_col\">\n            <p *ngIf=\"top_label=='Y'\">{{ label }}</p>\n            <mat-form-field appearance=\"outline\" [style]=\"style\" [class]=\"class\">\n              <mat-label>{{ label }}</mat-label>\n              <textarea (change)=\"handleChange()\" [(ngModel)]=\"value\" matInput\n                        cdkTextareaAutosize\n                        #autosize=\"cdkTextareaAutosize\"\n                        cdkAutosizeMinRows=\"{{ rows}}\"\n                        cdkAutosizeMaxRows=\"{{ maxrows }}\"></textarea>\n            </mat-form-field>  \n        </div>\n      </div>\n      <!-- if not new row and no bootstrap column -->\n      <div *ngIf=\"bs_row!='Y'&&bs_col==''\">\n        <p *ngIf=\"top_label=='Y'\">{{ label }}</p>\n        <mat-form-field appearance=\"outline\" [style]=\"style\" [class]=\"class\">\n          <mat-label>{{ label }}</mat-label>\n          <textarea (change)=\"handleChange()\" [(ngModel)]=\"value\" matInput\n                    cdkTextareaAutosize\n                    #autosize=\"cdkTextareaAutosize\"\n                    cdkAutosizeMinRows=\"{{ rows}}\"\n                    cdkAutosizeMaxRows=\"{{ maxrows }}\"></textarea>\n        </mat-form-field>  \n      </div>\n    </div>\n    <!-- mat appearance is fill -->    \n    <div *ngIf=\"appearance=='fill'\">\n      <!-- if new row -->\n      <div *ngIf=\"bs_row=='Y'\" class=\"row\">\n        <div [class]=\"bs_col\">\n          <p *ngIf=\"top_label=='Y'\">{{ label }}</p>\n          <mat-form-field appearance=\"fill\" [style]=\"style\" [class]=\"class\">\n            <mat-label>{{ label }}</mat-label>\n            <textarea (change)=\"handleChange()\" [(ngModel)]=\"value\" matInput\n                      cdkTextareaAutosize\n                      #autosize=\"cdkTextareaAutosize\"\n                      cdkAutosizeMinRows=\"{{ rows}}\"\n                      cdkAutosizeMaxRows=\"{{ maxrows }}\"></textarea>\n          </mat-form-field>  \n        </div>\n      </div>\n            <!-- if not new row but has bootstrap column-->\n            <div *ngIf=\"bs_row!='Y'&&bs_col!=''\">\n              <div [class]=\"bs_col\">\n                <p *ngIf=\"top_label=='Y'\">{{ label }}</p>\n                <mat-form-field appearance=\"fill\" [style]=\"style\" [class]=\"class\">\n                  <mat-label>{{ label }}</mat-label>\n                  <textarea (change)=\"handleChange()\" [(ngModel)]=\"value\" matInput\n                            cdkTextareaAutosize\n                            #autosize=\"cdkTextareaAutosize\"\n                            cdkAutosizeMinRows=\"{{ rows}}\"\n                            cdkAutosizeMaxRows=\"{{ maxrows }}\"></textarea>\n                </mat-form-field>  \n              </div>\n            </div>\n            <div *ngIf=\"bs_row!='Y'&&bs_col==''\">\n                <p *ngIf=\"top_label=='Y'\">{{ label }}</p>\n                <mat-form-field appearance=\"fill\" [style]=\"style\" [class]=\"class\">\n                  <mat-label>{{ label }}</mat-label>\n                  <textarea (change)=\"handleChange()\" [(ngModel)]=\"value\" matInput\n                            cdkTextareaAutosize\n                            #autosize=\"cdkTextareaAutosize\"\n                            cdkAutosizeMinRows=\"{{ rows}}\"\n                            cdkAutosizeMaxRows=\"{{ maxrows }}\"></textarea>\n                </mat-form-field>  \n          </div>\n\n    </div>\n</div> ", styles: [""], dependencies: [{ kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "ngmodule", type: FormsModule }, { kind: "directive", type: i3.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "ngmodule", type: MatFormFieldModule }, { kind: "component", type: i4$1.MatFormField, selector: "mat-form-field", inputs: ["hideRequiredMarker", "color", "floatLabel", "appearance", "subscriptSizing", "hintLabel"], exportAs: ["matFormField"] }, { kind: "directive", type: i4$1.MatLabel, selector: "mat-label" }, { kind: "ngmodule", type: MatInputModule }, { kind: "directive", type: i5$1.MatInput, selector: "input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]", inputs: ["disabled", "id", "placeholder", "name", "required", "type", "errorStateMatcher", "aria-describedby", "value", "readonly"], exportAs: ["matInput"] }, { kind: "directive", type: i6$1.CdkTextareaAutosize, selector: "textarea[cdkTextareaAutosize]", inputs: ["cdkAutosizeMinRows", "cdkAutosizeMaxRows", "cdkTextareaAutosize", "placeholder"], exportAs: ["cdkTextareaAutosize"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.3", ngImport: i0, type: SqlTextareaComponent, decorators: [{
            type: Component,
            args: [{ selector: 'sql-textarea', standalone: true, imports: [CommonModule, FormsModule, MatFormFieldModule, MatInputModule], template: "<div class=\"container-fluid\">\n    <!-- mat appearance is outline -->\n    <div *ngIf=\"appearance=='outline'\">\n      <!-- if new row -->\n          <div *ngIf=\"bs_row=='Y'\" class=\"row\">\n            <div [class]=\"bs_col\">\n                <p *ngIf=\"top_label=='Y'\">{{ label }}</p>\n                <mat-form-field appearance=\"outline\" [style]=\"style\" [class]=\"class\">\n                  <mat-label>{{ label }}</mat-label>\n                  <textarea (change)=\"handleChange()\" [(ngModel)]=\"value\" matInput\n                            cdkTextareaAutosize\n                            #autosize=\"cdkTextareaAutosize\"\n                            cdkAutosizeMinRows=\"{{ rows}}\"\n                            cdkAutosizeMaxRows=\"{{ maxrows }}\"></textarea>\n                </mat-form-field>  \n            </div>\n          </div>\n      <!-- if not new row but has bootstrap column-->\n      <div *ngIf=\"bs_row!='Y'&&bs_col!=''\">\n        <div [class]=\"bs_col\">\n            <p *ngIf=\"top_label=='Y'\">{{ label }}</p>\n            <mat-form-field appearance=\"outline\" [style]=\"style\" [class]=\"class\">\n              <mat-label>{{ label }}</mat-label>\n              <textarea (change)=\"handleChange()\" [(ngModel)]=\"value\" matInput\n                        cdkTextareaAutosize\n                        #autosize=\"cdkTextareaAutosize\"\n                        cdkAutosizeMinRows=\"{{ rows}}\"\n                        cdkAutosizeMaxRows=\"{{ maxrows }}\"></textarea>\n            </mat-form-field>  \n        </div>\n      </div>\n      <!-- if not new row and no bootstrap column -->\n      <div *ngIf=\"bs_row!='Y'&&bs_col==''\">\n        <p *ngIf=\"top_label=='Y'\">{{ label }}</p>\n        <mat-form-field appearance=\"outline\" [style]=\"style\" [class]=\"class\">\n          <mat-label>{{ label }}</mat-label>\n          <textarea (change)=\"handleChange()\" [(ngModel)]=\"value\" matInput\n                    cdkTextareaAutosize\n                    #autosize=\"cdkTextareaAutosize\"\n                    cdkAutosizeMinRows=\"{{ rows}}\"\n                    cdkAutosizeMaxRows=\"{{ maxrows }}\"></textarea>\n        </mat-form-field>  \n      </div>\n    </div>\n    <!-- mat appearance is fill -->    \n    <div *ngIf=\"appearance=='fill'\">\n      <!-- if new row -->\n      <div *ngIf=\"bs_row=='Y'\" class=\"row\">\n        <div [class]=\"bs_col\">\n          <p *ngIf=\"top_label=='Y'\">{{ label }}</p>\n          <mat-form-field appearance=\"fill\" [style]=\"style\" [class]=\"class\">\n            <mat-label>{{ label }}</mat-label>\n            <textarea (change)=\"handleChange()\" [(ngModel)]=\"value\" matInput\n                      cdkTextareaAutosize\n                      #autosize=\"cdkTextareaAutosize\"\n                      cdkAutosizeMinRows=\"{{ rows}}\"\n                      cdkAutosizeMaxRows=\"{{ maxrows }}\"></textarea>\n          </mat-form-field>  \n        </div>\n      </div>\n            <!-- if not new row but has bootstrap column-->\n            <div *ngIf=\"bs_row!='Y'&&bs_col!=''\">\n              <div [class]=\"bs_col\">\n                <p *ngIf=\"top_label=='Y'\">{{ label }}</p>\n                <mat-form-field appearance=\"fill\" [style]=\"style\" [class]=\"class\">\n                  <mat-label>{{ label }}</mat-label>\n                  <textarea (change)=\"handleChange()\" [(ngModel)]=\"value\" matInput\n                            cdkTextareaAutosize\n                            #autosize=\"cdkTextareaAutosize\"\n                            cdkAutosizeMinRows=\"{{ rows}}\"\n                            cdkAutosizeMaxRows=\"{{ maxrows }}\"></textarea>\n                </mat-form-field>  \n              </div>\n            </div>\n            <div *ngIf=\"bs_row!='Y'&&bs_col==''\">\n                <p *ngIf=\"top_label=='Y'\">{{ label }}</p>\n                <mat-form-field appearance=\"fill\" [style]=\"style\" [class]=\"class\">\n                  <mat-label>{{ label }}</mat-label>\n                  <textarea (change)=\"handleChange()\" [(ngModel)]=\"value\" matInput\n                            cdkTextareaAutosize\n                            #autosize=\"cdkTextareaAutosize\"\n                            cdkAutosizeMinRows=\"{{ rows}}\"\n                            cdkAutosizeMaxRows=\"{{ maxrows }}\"></textarea>\n                </mat-form-field>  \n          </div>\n\n    </div>\n</div> " }]
        }], ctorParameters: function () { return [{ type: SQLDataService }]; }, propDecorators: { rows: [{
                type: Input
            }], maxrows: [{
                type: Input
            }], col: [{
                type: Input
            }], data: [{
                type: Input
            }], class: [{
                type: Input
            }], style: [{
                type: Input
            }], hint: [{
                type: Input
            }], icon: [{
                type: Input
            }], label: [{
                type: Input
            }], placeholder: [{
                type: Input
            }], appearance: [{
                type: Input
            }], bs_row: [{
                type: Input
            }], bs_col: [{
                type: Input
            }], top_label: [{
                type: Input
            }], change: [{
                type: Output
            }] } });

class SqlCalendarComponent {
}
SqlCalendarComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.3", ngImport: i0, type: SqlCalendarComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
SqlCalendarComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.3", type: SqlCalendarComponent, isStandalone: true, selector: "lib-sql-calendar", ngImport: i0, template: "<p>sql-calendar works!</p>\n", styles: [""], dependencies: [{ kind: "ngmodule", type: CommonModule }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.3", ngImport: i0, type: SqlCalendarComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lib-sql-calendar', standalone: true, imports: [CommonModule], template: "<p>sql-calendar works!</p>\n" }]
        }] });

class SqlRadioGroupComponent {
    constructor(_dataService) {
        this._dataService = _dataService;
        this.value = '';
        this.fieldData = '';
        this.appearance = 'outline';
        this.inline = 'N';
        this.native = 'Y';
        this.sql = '';
        this.handler = '';
        this.col = '';
        this.class = '';
        this.style = '';
        this.id = '';
        this.id2 = '';
        this.id3 = '';
        this.hint = '';
        this.icon = '';
        this.label = 'Label not set';
        this.placeholder = '';
        this.bs_row = 'Y';
        this.bs_col = 'col-12';
        this.top_label = 'N';
        this.counter = 0;
        this.change = new EventEmitter();
        this.parameters = { page: '', id: '', id2: '', id3: '' };
        this.myObs = this._dataService.dataSubject.subscribe(d => {
            this.data = d;
            this.fieldData = this.data;
            this.value = this.fieldData[this.col];
            this.counter++;
        });
    }
    ngAfterViewInit() {
        this.parameters.id = this.id;
        this.parameters.id2 = this.id2;
        this.parameters.id3 = this.id3;
        this.myDataObs = this._dataService.getSelect(this.sql, this.parameters).subscribe((data) => {
            this.selectData = data;
        });
    }
    ngOnInit() {
        if (this.bs_col == 'Y') {
            this.row_value = 'row';
        }
        else {
            this.row_value = 'none';
        }
        if (this.bs_col != '') {
            this.col_value = this.bs_col;
        }
        else {
            this.col_value = 'none';
        }
    }
    handleChange() {
        this.fieldData['submit'] = 'N';
        this.fieldData[this.col] = this.value;
        this._dataService.pushNotification(this.fieldData);
    }
    ngOnDestroy() {
        this.myObs.unsubscribe();
        this.myDataObs.unsubscribe();
    }
}
SqlRadioGroupComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.3", ngImport: i0, type: SqlRadioGroupComponent, deps: [{ token: SQLDataService }], target: i0.ɵɵFactoryTarget.Component });
SqlRadioGroupComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.3", type: SqlRadioGroupComponent, isStandalone: true, selector: "sql-radio-group", inputs: { appearance: "appearance", inline: "inline", native: "native", sql: "sql", handler: "handler", col: "col", data: "data", class: "class", style: "style", id: "id", id2: "id2", id3: "id3", hint: "hint", icon: "icon", label: "label", placeholder: "placeholder", bs_row: "bs_row", bs_col: "bs_col", top_label: "top_label" }, outputs: { change: "change" }, ngImport: i0, template: "<ng-container *ngIf=\"inline=='N'\">\n  <label id=\"example-radio-group-label\">{{ label }}</label>\n  <mat-radio-group\n    aria-labelledby=\"example-radio-group-label\"\n    class=\"example-radio-group\"\n    [style]=\"style\"\n    [(ngModel)]=\"value\"\n    (ngModelChange)=\"handleChange()\">\n    <mat-radio-button class=\"example-radio-button\" *ngFor=\"let m of selectData\" [value]=\"m.id\">\n      {{ m.option }}\n    </mat-radio-button>\n  </mat-radio-group>\n</ng-container>\n<ng-container *ngIf=\"inline=='Y'\">\n  <label id=\"example-radio-group-label\">{{ label }}</label>\n  <mat-radio-group\n    aria-labelledby=\"example-radio-group-label\"\n    [class]=\"class\"\n    [style]=\"style\"\n    [(ngModel)]=\"value\"\n    (ngModelChange)=\"handleChange()\">\n    <mat-radio-button class=\"example-radio-button\" *ngFor=\"let m of selectData\" [value]=\"m.id\">\n      {{ m.option }}\n    </mat-radio-button>\n  </mat-radio-group>\n</ng-container>", styles: [".example-radio-group{display:flex;flex-direction:column;margin:15px 0;align-items:flex-start}.example-radio-button{margin:5px}\n"], dependencies: [{ kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "ngmodule", type: FormsModule }, { kind: "directive", type: i3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "ngmodule", type: MatFormFieldModule }, { kind: "ngmodule", type: MatInputModule }, { kind: "ngmodule", type: MatOptionModule }, { kind: "ngmodule", type: MatSelectModule }, { kind: "ngmodule", type: MatRadioModule }, { kind: "directive", type: i4$2.MatRadioGroup, selector: "mat-radio-group", exportAs: ["matRadioGroup"] }, { kind: "component", type: i4$2.MatRadioButton, selector: "mat-radio-button", inputs: ["disableRipple", "tabIndex"], exportAs: ["matRadioButton"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.3", ngImport: i0, type: SqlRadioGroupComponent, decorators: [{
            type: Component,
            args: [{ selector: 'sql-radio-group', standalone: true, imports: [CommonModule, FormsModule, MatFormFieldModule,
                        MatInputModule, MatOptionModule, MatSelectModule, MatRadioModule], template: "<ng-container *ngIf=\"inline=='N'\">\n  <label id=\"example-radio-group-label\">{{ label }}</label>\n  <mat-radio-group\n    aria-labelledby=\"example-radio-group-label\"\n    class=\"example-radio-group\"\n    [style]=\"style\"\n    [(ngModel)]=\"value\"\n    (ngModelChange)=\"handleChange()\">\n    <mat-radio-button class=\"example-radio-button\" *ngFor=\"let m of selectData\" [value]=\"m.id\">\n      {{ m.option }}\n    </mat-radio-button>\n  </mat-radio-group>\n</ng-container>\n<ng-container *ngIf=\"inline=='Y'\">\n  <label id=\"example-radio-group-label\">{{ label }}</label>\n  <mat-radio-group\n    aria-labelledby=\"example-radio-group-label\"\n    [class]=\"class\"\n    [style]=\"style\"\n    [(ngModel)]=\"value\"\n    (ngModelChange)=\"handleChange()\">\n    <mat-radio-button class=\"example-radio-button\" *ngFor=\"let m of selectData\" [value]=\"m.id\">\n      {{ m.option }}\n    </mat-radio-button>\n  </mat-radio-group>\n</ng-container>", styles: [".example-radio-group{display:flex;flex-direction:column;margin:15px 0;align-items:flex-start}.example-radio-button{margin:5px}\n"] }]
        }], ctorParameters: function () { return [{ type: SQLDataService }]; }, propDecorators: { appearance: [{
                type: Input
            }], inline: [{
                type: Input
            }], native: [{
                type: Input
            }], sql: [{
                type: Input
            }], handler: [{
                type: Input
            }], col: [{
                type: Input
            }], data: [{
                type: Input
            }], class: [{
                type: Input
            }], style: [{
                type: Input
            }], id: [{
                type: Input
            }], id2: [{
                type: Input
            }], id3: [{
                type: Input
            }], hint: [{
                type: Input
            }], icon: [{
                type: Input
            }], label: [{
                type: Input
            }], placeholder: [{
                type: Input
            }], bs_row: [{
                type: Input
            }], bs_col: [{
                type: Input
            }], top_label: [{
                type: Input
            }], change: [{
                type: Output
            }] } });

class SqlTableComponent {
    constructor(_dataService) {
        this._dataService = _dataService;
        // format: is built from ContentChildren and Input Parameters
        this.format = { title: '', search: '', class: '', style: '', columns: [], buttons: [] };
        this.row_placeholder = 'row';
        this.col_placeholder = 'col-12';
        //-- Inputs
        this.data = '';
        this.use_parameters = 'N';
        this.function = ''; // Use Data if data comes from function.
        this.sql = ''; // SQL that gets data.
        this.card = "Y"; // Show the form in a card Y/N
        this.card_class = '';
        this.card_style = '';
        this.container_class = 'container-fluid m-2 p-2'; // Class of the outer ng-container.
        this.container_style = ''; // Style of the outer ng-container.
        this.closable = "N"; // Is the form closable Y/N
        this.search = 'TOP'; // Location of the search box.
        this.bs_row = 'Y'; // Y means add a bootstrap row.
        this.bs_col = 'col-sm-12 col-lg-12 col-xl-12'; // What bootstrap columns.
        this.table_class = 'table table-striped table-condensed'; // class of the table.
        this.table_style = ''; // style of the table.
        this.edit = 'N'; // Add custom edit button.
        this.title = 'Title Not Set'; // title of the page.
        this.pagination = 'Y'; // Include pagination.
        this.pagesize = 25; // rows per page for pagination.
        this.id = '0'; // id for where clause.
        this.id2 = '0'; // id for where clause.
        this.id3 = '0'; // id for where clause.
        this.open = "Y"; // Does a closable list start open.
        this.class = 'table table-striped table-condensed'; // Class for the table container.
        this.style = ""; // Style for the table container.
        this.handler = 'default'; // what handler is used to process the form.
        this.button_click = new EventEmitter();
        this.row_click = new EventEmitter();
        this.top_button_click = new EventEmitter();
        this.parameters = { page: '', id: '', id2: '', id3: '' };
        this.last_parameters = { page: 'xxx', id: 'xxx', id2: 'xxx', id3: 'xxx' };
        this.counter = 0;
        this.page = '';
    }
    ngOnInit() {
        this.format.search = 'Y';
    }
    topButtonClick(m) {
        this.top_button_click.emit(m);
    }
    rowClick(m) {
        this.row_click.emit(m);
    }
    buttonClick(m) {
        this.button_click.emit(m);
    }
    ngAfterViewInit() {
        if (this.use_parameters === 'Y') {
            this._dataService.paramSubject.subscribe(d => {
                this.parameters = d;
                this._dataService.getSQL(this.sql, this.parameters).subscribe((data) => {
                    this.list = data;
                    this.list.forEach(function (value) {
                        value.active = 'N';
                    });
                });
            });
        }
        if (this.use_parameters === 'N') {
            this.parameters.page = this.page;
            this.parameters.id = this.id;
            this.parameters.id2 = this.id2;
            this.parameters.id3 = this.id3;
            this._dataService.getSQL(this.sql, this.parameters).subscribe((data) => {
                this.list = data;
                this.list.forEach(function (value) {
                    value.active = 'N';
                });
            });
        }
        this.format.title = this.title;
        this.format.class = this.class;
        this.format.style = this.style;
        this.format.pagination = this.pagination;
        this.format.pagesize = this.pagesize;
        if (this.bs_row == 'Y') {
            this.row_placeholder = "row";
        }
        else {
            this.row_placeholder = "none";
        }
        this.col_placeholder = this.bs_col;
        this.column_list.forEach((e) => {
            let column_template = { column_name: '', class: '', type: '', style: '', title: '', value: '' };
            //-- TH is data column
            if (e.nativeElement.nodeName == 'TH') {
                column_template.type = "data";
                column_template.value = e.nativeElement.id;
                column_template.title = e.nativeElement.innerHTML;
            }
            //-- BUTTON is button column
            if (e.nativeElement.nodeName == 'BUTTON') {
                column_template.type = "button";
                column_template.value = '';
                column_template.title = e.nativeElement.innerHTML;
            }
            //-- TD is text column
            if (e.nativeElement.nodeName == 'TD') {
                column_template.type = "text";
                column_template.title = '';
                column_template.value = e.nativeElement.innerHTML;
            }
            if (e.nativeElement.className !== undefined) {
                column_template.class = e.nativeElement.className;
            }
            column_template.style = e.nativeElement.style.cssText;
            this.format.columns.push(column_template);
        });
        if (this.last_parameters.page != this.parameters.page ||
            this.last_parameters.id != this.parameters.id ||
            this.last_parameters.id2 != this.parameters.id2 ||
            this.last_parameters.id3 != this.parameters.id3) {
            this.last_parameters.page = this.parameters.page;
            this.last_parameters.id = this.parameters.id;
            this.last_parameters.id2 = this.parameters.id2;
            this.last_parameters.id3 = this.parameters.id3;
            this.myDataObs = this._dataService.getSQL(this.sql, this.parameters).subscribe((data) => {
                this.list = data;
            });
        }
    }
    tableRefresh() {
        this.myDataObs.unsubscribe();
        this.myDataObs = this._dataService.getSQL(this.sql, this.parameters).subscribe((data) => {
            this.list = data;
        });
    }
    ngOnDestroy() {
        this.myObs.unsubscribe();
        this.myDataObs.unsubscribe();
    }
}
SqlTableComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.3", ngImport: i0, type: SqlTableComponent, deps: [{ token: SQLDataService }], target: i0.ɵɵFactoryTarget.Component });
SqlTableComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.3", type: SqlTableComponent, isStandalone: true, selector: "sql-table", inputs: { use_parameters: "use_parameters", function: "function", sql: "sql", card: "card", card_class: "card_class", card_style: "card_style", container_class: "container_class", container_style: "container_style", closable: "closable", search: "search", bs_row: "bs_row", bs_col: "bs_col", table_class: "table_class", table_style: "table_style", edit: "edit", title: "title", pagination: "pagination", pagesize: "pagesize", id: "id", id2: "id2", id3: "id3", open: "open", class: "class", style: "style", handler: "handler" }, outputs: { button_click: "button_click", row_click: "row_click", top_button_click: "top_button_click" }, queries: [{ propertyName: "title_list", predicate: ["title"] }, { propertyName: "column_list", predicate: ["column"] }], ngImport: i0, template: "<!-- NOT A CARD FORMAT-->\n<div *ngIf=\"card!='Y'\" [class]=\"container_class\" [style]=\"container_style\">\n    <div [class]=\"row_placeholder\">\n        <div [class]=\"col_placeholder\">\n            <div *ngIf=\"format.search=='TOP'\" class=\"row m-1 p-3\">\n                <div class=\"col-lg-6\">\n                    Search: <input style=\"max-width:320px;\" class=\"form-control\" type=\"text\" id=\"term\" name=\"term\" [(ngModel)]=\"term\"> \n                </div>\n            </div>\n            <div class=\"row p-2 mt-2 mb-2\">\n                <div class=\"col-md-12\">\n                    <h2>{{ title }}</h2>\n                </div>\n            </div>\n            <div *ngIf=\"format.buttons.length>0||format.search=='Y'\" class=\"row m-1 p-3\">\n                <div *ngIf=\"format.search=='Y'\" class=\"col-lg-6\">\n                    Search: <input style=\"max-width:320px;\" class=\"form-control\" type=\"text\" id=\"term\" name=\"term\" [(ngModel)]=\"term\"> \n                </div>\n                <div class=\"col-md-2\" *ngFor=\"let m of format.buttons\">\n                    <button (click)=\"topButtonClick(m.value);\" [class]=\"m.class\" [style]=\"m.style\" [innerHTML]=\"m.title\"></button>\n                </div>\n            </div>\n            <table [class]=\"table_class\" [style]=\"table_style\">\n                <thead>\n                    <tr class=\"p-2\">\n                        <ng-container *ngFor=\"let m of format.columns\">\n                            <th *ngIf=\"m.type!='button'\" class=\"p-2\">{{ m.title }}</th>\n                            <th *ngIf=\"m.type=='button'\" class=\"p-2\"></th>\n                        </ng-container>         \n                    </tr>\n                </thead>\n            <tbody>\n                <ng-container *ngFor=\"let m of list | filter: term | paginate: { currentPage: p , itemsPerPage: format.pagesize }\">\n                    <tr class=\"p-2\">\n                        <ng-container *ngFor=\"let n of format.columns\">\n                            <td (click)=\"rowClick(m)\" *ngIf=\"n['type']=='data'\" [innerHTML]=\"m[n['value']]\" [class]=\"n['class']\"></td>\n                            <td (click)=\"rowClick(m)\" *ngIf=\"n['type']=='text'\" [innerHTML]=\"n['value']\" [class]=\"n['class']\"></td>\n                            <td *ngIf=\"n['type']=='button'\">\n                                <button (click)=\"buttonClick(m)\" [class]=\"n.class\" [innerHTML]=\"n.title\"></button>\n                            </td>\n                        </ng-container>\n                    </tr> \n                </ng-container>\n            </tbody> \n            </table>\n        <div *ngIf=\"format.pagination=='Y'\">\n                <paging-controls (pageChange)=\"p = $event\" [isItemsPerPage]=\"false\"  \n                class=\"my-pagination\"></paging-controls> \n            </div> \n        </div> <!-- col -->\n    </div> <!-- row -->\n</div> <!-- container -->\n<!-- CARD FORMAT-->\n<div *ngIf=\"card=='Y'\" [class]=\"container_class\" [style]=\"container_style\">\n    <div [class]=\"row_placeholder\">\n        <div [class]=\"col_placeholder\">\n            <div class=\"card\">\n                <div class=\"card-header\" style=\"margin-top: 0px;\">\n                    <div class=\"row p-2 mt-2 mb-2\">\n                        <div class=\"col-md-12\">\n                            <h2>{{ title }}</h2>\n                        </div>\n                    </div>\n                </div>\n                <div class=\"card-body\">\n                    <div *ngIf=\"format.search=='TOP'\" class=\"row m-1 p-3\">\n                        <div class=\"col-6\">\n                            Search: <input style=\"max-width:320px;\" class=\"form-control\" type=\"text\" id=\"term\" name=\"term\" [(ngModel)]=\"term\"> \n                        </div>\n                    </div>\n                    <div *ngIf=\"format.buttons.length>0||format.search=='Y'\" class=\"row m-1 p-3\">\n                        <div *ngIf=\"format.search=='Y'\" class=\"col-lg-6\">\n                            Search: <input style=\"max-width:320px;\" class=\"form-control\" type=\"text\" id=\"term\" name=\"term\" [(ngModel)]=\"term\"> \n                        </div>\n                        <div class=\"col-md-2\" *ngFor=\"let m of format.buttons\">\n                            <button (click)=\"topButtonClick(m.value);\" [class]=\"m.class\" [style]=\"m.style\" [innerHTML]=\"m.title\"></button>\n                        </div>\n                    </div>\n                    <table [class]=\"table_class\" [style]=\"table_style\">\n                        <thead>\n                            <ng-container *ngFor=\"let m of format.columns\">\n                                <th *ngIf=\"m.type!='button'\" [style]=\"m.style\" class=\"p-2\">{{ m.title }}</th>\n                                <th *ngIf=\"m.type=='button'\" [style]=\"m.style\" class=\"p-2\"></th>\n                            </ng-container>   \n                        </thead>\n                        <tbody>\n                            <ng-container *ngFor=\"let m of list | filter: term | paginate: { currentPage: p , itemsPerPage: format.pagesize }\">\n                                <tr class=\"p-2\">\n                                    <ng-container *ngFor=\"let n of format.columns\">\n                                        <td (click)=\"rowClick(m)\" [style]=\"m.style\"  *ngIf=\"n['type']=='data'\" [innerHTML]=\"m[n['value']]\" [class]=\"n['class']\"></td>\n                                        <td (click)=\"rowClick(m)\" [style]=\"m.style\"  *ngIf=\"n['type']=='text'\" [innerHTML]=\"n['value']\" [class]=\"n['class']\"></td>\n                                        <td *ngIf=\"n['type']=='button'\">\n                                            <button (click)=\"buttonClick(m)\" [style]=\"m.style\" [class]=\"n.class\" [innerHTML]=\"n.title\"></button>\n                                        </td>\n                                    </ng-container>\n                                </tr> \n                            </ng-container>\n                        </tbody> \n                    </table>\n                    <div *ngIf=\"format.pagination=='Y'\">\n                            <paging-controls (pageChange)=\"p = $event\" [isItemsPerPage]=\"false\"  \n                            class=\"my-pagination\"></paging-controls> \n                    </div>\n                </div> <!-- card-body -->\n            </div> <!-- card --> \n        </div>\n    </div>\n</div>", styles: [""], dependencies: [{ kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "ngmodule", type: FormsModule }, { kind: "directive", type: i3.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "ngmodule", type: NgxTablePaginationModule }, { kind: "component", type: i4.PaginationComponent, selector: "paging-controls", inputs: ["maxSize", "previousLabel", "nextLabel", "screenReaderPaginationLabel", "screenReaderPageLabel", "screenReaderCurrentLabel", "directionLinks", "autoHide", "responsive", "id", "isItemsPerPage"], outputs: ["pageChange", "pageBoundsCorrection"] }, { kind: "pipe", type: i4.PaginationPipe, name: "paginate" }, { kind: "ngmodule", type: Ng2SearchPipeModule }, { kind: "pipe", type: i5.Ng2SearchPipe, name: "filter" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.3", ngImport: i0, type: SqlTableComponent, decorators: [{
            type: Component,
            args: [{ selector: 'sql-table', standalone: true, imports: [CommonModule,
                        FormsModule,
                        NgxTablePaginationModule,
                        Ng2SearchPipeModule], template: "<!-- NOT A CARD FORMAT-->\n<div *ngIf=\"card!='Y'\" [class]=\"container_class\" [style]=\"container_style\">\n    <div [class]=\"row_placeholder\">\n        <div [class]=\"col_placeholder\">\n            <div *ngIf=\"format.search=='TOP'\" class=\"row m-1 p-3\">\n                <div class=\"col-lg-6\">\n                    Search: <input style=\"max-width:320px;\" class=\"form-control\" type=\"text\" id=\"term\" name=\"term\" [(ngModel)]=\"term\"> \n                </div>\n            </div>\n            <div class=\"row p-2 mt-2 mb-2\">\n                <div class=\"col-md-12\">\n                    <h2>{{ title }}</h2>\n                </div>\n            </div>\n            <div *ngIf=\"format.buttons.length>0||format.search=='Y'\" class=\"row m-1 p-3\">\n                <div *ngIf=\"format.search=='Y'\" class=\"col-lg-6\">\n                    Search: <input style=\"max-width:320px;\" class=\"form-control\" type=\"text\" id=\"term\" name=\"term\" [(ngModel)]=\"term\"> \n                </div>\n                <div class=\"col-md-2\" *ngFor=\"let m of format.buttons\">\n                    <button (click)=\"topButtonClick(m.value);\" [class]=\"m.class\" [style]=\"m.style\" [innerHTML]=\"m.title\"></button>\n                </div>\n            </div>\n            <table [class]=\"table_class\" [style]=\"table_style\">\n                <thead>\n                    <tr class=\"p-2\">\n                        <ng-container *ngFor=\"let m of format.columns\">\n                            <th *ngIf=\"m.type!='button'\" class=\"p-2\">{{ m.title }}</th>\n                            <th *ngIf=\"m.type=='button'\" class=\"p-2\"></th>\n                        </ng-container>         \n                    </tr>\n                </thead>\n            <tbody>\n                <ng-container *ngFor=\"let m of list | filter: term | paginate: { currentPage: p , itemsPerPage: format.pagesize }\">\n                    <tr class=\"p-2\">\n                        <ng-container *ngFor=\"let n of format.columns\">\n                            <td (click)=\"rowClick(m)\" *ngIf=\"n['type']=='data'\" [innerHTML]=\"m[n['value']]\" [class]=\"n['class']\"></td>\n                            <td (click)=\"rowClick(m)\" *ngIf=\"n['type']=='text'\" [innerHTML]=\"n['value']\" [class]=\"n['class']\"></td>\n                            <td *ngIf=\"n['type']=='button'\">\n                                <button (click)=\"buttonClick(m)\" [class]=\"n.class\" [innerHTML]=\"n.title\"></button>\n                            </td>\n                        </ng-container>\n                    </tr> \n                </ng-container>\n            </tbody> \n            </table>\n        <div *ngIf=\"format.pagination=='Y'\">\n                <paging-controls (pageChange)=\"p = $event\" [isItemsPerPage]=\"false\"  \n                class=\"my-pagination\"></paging-controls> \n            </div> \n        </div> <!-- col -->\n    </div> <!-- row -->\n</div> <!-- container -->\n<!-- CARD FORMAT-->\n<div *ngIf=\"card=='Y'\" [class]=\"container_class\" [style]=\"container_style\">\n    <div [class]=\"row_placeholder\">\n        <div [class]=\"col_placeholder\">\n            <div class=\"card\">\n                <div class=\"card-header\" style=\"margin-top: 0px;\">\n                    <div class=\"row p-2 mt-2 mb-2\">\n                        <div class=\"col-md-12\">\n                            <h2>{{ title }}</h2>\n                        </div>\n                    </div>\n                </div>\n                <div class=\"card-body\">\n                    <div *ngIf=\"format.search=='TOP'\" class=\"row m-1 p-3\">\n                        <div class=\"col-6\">\n                            Search: <input style=\"max-width:320px;\" class=\"form-control\" type=\"text\" id=\"term\" name=\"term\" [(ngModel)]=\"term\"> \n                        </div>\n                    </div>\n                    <div *ngIf=\"format.buttons.length>0||format.search=='Y'\" class=\"row m-1 p-3\">\n                        <div *ngIf=\"format.search=='Y'\" class=\"col-lg-6\">\n                            Search: <input style=\"max-width:320px;\" class=\"form-control\" type=\"text\" id=\"term\" name=\"term\" [(ngModel)]=\"term\"> \n                        </div>\n                        <div class=\"col-md-2\" *ngFor=\"let m of format.buttons\">\n                            <button (click)=\"topButtonClick(m.value);\" [class]=\"m.class\" [style]=\"m.style\" [innerHTML]=\"m.title\"></button>\n                        </div>\n                    </div>\n                    <table [class]=\"table_class\" [style]=\"table_style\">\n                        <thead>\n                            <ng-container *ngFor=\"let m of format.columns\">\n                                <th *ngIf=\"m.type!='button'\" [style]=\"m.style\" class=\"p-2\">{{ m.title }}</th>\n                                <th *ngIf=\"m.type=='button'\" [style]=\"m.style\" class=\"p-2\"></th>\n                            </ng-container>   \n                        </thead>\n                        <tbody>\n                            <ng-container *ngFor=\"let m of list | filter: term | paginate: { currentPage: p , itemsPerPage: format.pagesize }\">\n                                <tr class=\"p-2\">\n                                    <ng-container *ngFor=\"let n of format.columns\">\n                                        <td (click)=\"rowClick(m)\" [style]=\"m.style\"  *ngIf=\"n['type']=='data'\" [innerHTML]=\"m[n['value']]\" [class]=\"n['class']\"></td>\n                                        <td (click)=\"rowClick(m)\" [style]=\"m.style\"  *ngIf=\"n['type']=='text'\" [innerHTML]=\"n['value']\" [class]=\"n['class']\"></td>\n                                        <td *ngIf=\"n['type']=='button'\">\n                                            <button (click)=\"buttonClick(m)\" [style]=\"m.style\" [class]=\"n.class\" [innerHTML]=\"n.title\"></button>\n                                        </td>\n                                    </ng-container>\n                                </tr> \n                            </ng-container>\n                        </tbody> \n                    </table>\n                    <div *ngIf=\"format.pagination=='Y'\">\n                            <paging-controls (pageChange)=\"p = $event\" [isItemsPerPage]=\"false\"  \n                            class=\"my-pagination\"></paging-controls> \n                    </div>\n                </div> <!-- card-body -->\n            </div> <!-- card --> \n        </div>\n    </div>\n</div>" }]
        }], ctorParameters: function () { return [{ type: SQLDataService }]; }, propDecorators: { title_list: [{
                type: ContentChildren,
                args: ['title']
            }], column_list: [{
                type: ContentChildren,
                args: ['column']
            }], use_parameters: [{
                type: Input
            }], function: [{
                type: Input
            }], sql: [{
                type: Input
            }], card: [{
                type: Input
            }], card_class: [{
                type: Input
            }], card_style: [{
                type: Input
            }], container_class: [{
                type: Input
            }], container_style: [{
                type: Input
            }], closable: [{
                type: Input
            }], search: [{
                type: Input
            }], bs_row: [{
                type: Input
            }], bs_col: [{
                type: Input
            }], table_class: [{
                type: Input
            }], table_style: [{
                type: Input
            }], edit: [{
                type: Input
            }], title: [{
                type: Input
            }], pagination: [{
                type: Input
            }], pagesize: [{
                type: Input
            }], id: [{
                type: Input
            }], id2: [{
                type: Input
            }], id3: [{
                type: Input
            }], open: [{
                type: Input
            }], class: [{
                type: Input
            }], style: [{
                type: Input
            }], handler: [{
                type: Input
            }], button_click: [{
                type: Output
            }], row_click: [{
                type: Output
            }], top_button_click: [{
                type: Output
            }] } });

class SqlEditTableComponent {
    constructor(_dataService) {
        this._dataService = _dataService;
        // format: is built from ContentChildren and Input Parameters
        this.format = { title: '', search: '', class: '', style: '', columns: [], buttons: [] };
        this.row_placeholder = 'row';
        this.col_placeholder = 'col-12';
        //-- Inputs
        this.use_parameters = 'N';
        this.data = ''; // Use Data if data comes from function.
        this.sql = ''; // SQL that gets data.
        this.card = "Y"; // Show the form in a card Y/N
        this.card_class = '';
        this.card_style = '';
        this.container_class = 'container-fluid m-2 p-2'; // Class of the outer ng-container.
        this.container_style = ''; // Style of the outer ng-container.  
        this.closable = "N"; // Is the form closable Y/N
        this.search = 'TOP'; // Location of the search box.
        this.bs_row = 'Y'; // Y means add a bootstrap row.
        this.bs_col = 'col-sm-12 col-lg-12 col-xl-12'; // What bootstrap columns.
        this.table_class = 'table table-striped table-condensed'; // class of the table.
        this.table_style = ''; // style of the table.
        this.edit = 'Y'; // Add custom edit button.
        this.title = 'Title Not Set'; // title of the page.
        this.pagination = 'Y'; // Include pagination.
        this.pagesize = 25; // rows per page for pagination.
        this.id = '0'; // id for where clause.
        this.id2 = '0'; // id for where clause.
        this.id3 = '0'; // id for where clause.
        this.open = "Y"; // Does a closable list start open.
        this.class = 'table table-striped table-condensed'; // Class for the table container.
        this.style = ""; // Style for the table container.
        this.handler = 'default'; // what handler is used to process the form.
        this.button_click = new EventEmitter();
        this.row_click = new EventEmitter();
        this.top_button_click = new EventEmitter();
        this.parameters = { page: '', id: '', id2: '', id3: '' };
        this.last_parameters = { page: 'xxx', id: 'xxx', id2: 'xxx', id3: 'xxx' };
        this.page = '';
        this.counter = 0;
        this.myObs = this._dataService.dataSubject.subscribe(d => {
            this.data = d;
            if (d.error_code === 0) {
                this.tableRefresh();
            }
        });
    }
    ngOnInit() {
        this.format.search = 'Y';
    }
    topButtonClick(m) {
        this.top_button_click.emit(m);
    }
    rowClick(m) {
        this.row_click.emit(m);
    }
    editClick(m) {
        let p = { id: '', id2: '', id3: '' };
        if (m.id !== undefined) {
            p.id = m.id;
        }
        ;
        if (m.id2 !== undefined) {
            p.id2 = m.id2;
        }
        ;
        if (m.id3 !== undefined) {
            p.id3 = m.id3;
        }
        ;
        if (m.edit === 'Y') {
            m.edit = 'N';
        }
        else {
            this.list.forEach((value) => {
                value.edit = 'N';
            });
            this._dataService.containerSubject.next(p);
            m.edit = 'Y';
        }
    }
    buttonClick(m) {
        this.button_click.emit(m);
    }
    ngAfterViewInit() {
        if (this.use_parameters === 'Y') {
            this.myParameterObs = this._dataService.paramSubject.subscribe(d => {
                this.parameters = d;
                this.myDataObs = this._dataService.getSQL(this.sql, this.parameters).subscribe((data) => {
                    this.list = data;
                    this.list.forEach(function (value) {
                        value.active = 'N';
                    });
                });
            });
        }
        if (this.use_parameters === 'N') {
            this.parameters.page = this.page;
            this.parameters.id = this.id;
            this.parameters.id2 = this.id2;
            this.parameters.id3 = this.id3;
            this.myDataObs = this._dataService.getSQL(this.sql, this.parameters).subscribe((data) => {
                this.list = data;
                this.list.forEach(function (value) {
                    value.active = 'N';
                });
            });
        }
        this.format.title = this.title;
        this.format.class = this.class;
        this.format.style = this.style;
        this.format.pagination = this.pagination;
        this.format.pagesize = this.pagesize;
        if (this.bs_row == 'Y') {
            this.row_placeholder = "row";
        }
        else {
            this.row_placeholder = "none";
        }
        this.col_placeholder = this.bs_col;
        this.column_list.forEach((e) => {
            let column_template = { column_name: '', class: '', type: '', style: '', title: '', value: '' };
            //-- TH is data column
            if (e.nativeElement.nodeName == 'TH') {
                column_template.type = "data";
                column_template.value = e.nativeElement.id;
                column_template.title = e.nativeElement.innerHTML;
            }
            //-- BUTTON is button column
            if (e.nativeElement.nodeName == 'BUTTON') {
                column_template.type = "button";
                column_template.value = '';
                column_template.title = e.nativeElement.innerHTML;
            }
            //-- TD is text column
            if (e.nativeElement.nodeName == 'TD') {
                column_template.type = "text";
                column_template.title = '';
                column_template.value = e.nativeElement.innerHTML;
            }
            if (e.nativeElement.className !== undefined) {
                column_template.class = e.nativeElement.className;
            }
            column_template.style = e.nativeElement.style.cssText;
            this.format.columns.push(column_template);
        });
        if (this._dataService !== undefined && this.parameters !== undefined && this.sql !== undefined) {
            if (this.last_parameters.page != this.parameters.page ||
                this.last_parameters.id != this.parameters.id ||
                this.last_parameters.id2 != this.parameters.id2 ||
                this.last_parameters.id3 != this.parameters.id3) {
                this.last_parameters.page = this.parameters.page;
                this.last_parameters.id = this.parameters.id;
                this.last_parameters.id2 = this.parameters.id2;
                this.last_parameters.id3 = this.parameters.id3;
                try {
                    this.myDataObs = this._dataService.getSQL(this.sql, this.parameters).subscribe((data) => {
                        if (data !== undefined) {
                            this.list = data;
                        }
                    });
                }
                catch (_a) {
                }
            }
        }
    }
    tableRefresh() {
        this.last_parameters.page = this.parameters.page;
        this.last_parameters.id = this.parameters.id;
        this.last_parameters.id2 = this.parameters.id2;
        this.last_parameters.id3 = this.parameters.id3;
        this.myDataObs = this._dataService.getSQL(this.sql, this.parameters).subscribe((data) => {
            this.list = data;
        });
    }
    ngOnDestroy() {
        this.myObs.unsubscribe();
        this.myDataObs.unsubscribe();
        this.myParameterObs.unsubscribe();
    }
}
SqlEditTableComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.3", ngImport: i0, type: SqlEditTableComponent, deps: [{ token: SQLDataService }], target: i0.ɵɵFactoryTarget.Component });
SqlEditTableComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.3", type: SqlEditTableComponent, isStandalone: true, selector: "sql-edit-table", inputs: { use_parameters: "use_parameters", data: "data", sql: "sql", card: "card", card_class: "card_class", card_style: "card_style", container_class: "container_class", container_style: "container_style", closable: "closable", search: "search", bs_row: "bs_row", bs_col: "bs_col", table_class: "table_class", table_style: "table_style", edit: "edit", title: "title", pagination: "pagination", pagesize: "pagesize", id: "id", id2: "id2", id3: "id3", open: "open", class: "class", style: "style", handler: "handler" }, outputs: { button_click: "button_click", row_click: "row_click", top_button_click: "top_button_click" }, queries: [{ propertyName: "title_list", predicate: ["title"] }, { propertyName: "column_list", predicate: ["column"] }], ngImport: i0, template: "<!-- NOT A CARD FORMAT-->\n<div *ngIf=\"card!='Y'\" [class]=\"container_class\" [style]=\"container_style\">\n    <div [class]=\"row_placeholder\">\n        <div [class]=\"col_placeholder\">\n            <div *ngIf=\"format.search=='TOP'\" class=\"row m-1 p-3\">\n                <div class=\"col-lg-6\">\n                    Search: <input style=\"max-width:320px;\" class=\"form-control\" type=\"text\" id=\"term\" name=\"term\" [(ngModel)]=\"term\"> \n                </div>\n            </div>\n            <div class=\"row p-2 mt-2 mb-2\">\n                <div class=\"col-md-12\">\n                    <h2>{{ title }}</h2>\n                </div>\n            </div>\n            <div *ngIf=\"format.buttons.length>0||format.search=='Y'\" class=\"row m-1 p-3\">\n                <div *ngIf=\"format.search=='Y'\" class=\"col-lg-6\">\n                    Search: <input style=\"max-width:320px;\" class=\"form-control\" type=\"text\" id=\"term\" name=\"term\" [(ngModel)]=\"term\"> \n                </div>\n                <div class=\"col-md-2\" *ngFor=\"let m of format.buttons\">\n                    <button (click)=\"topButtonClick(m.value);\" [class]=\"m.class\" [style]=\"m.style\" [innerHTML]=\"m.title\"></button>\n                </div>\n            </div>\n            <table [class]=\"table_class\" [style]=\"table_style\">\n                <thead>\n                    <tr class=\"p-2\">\n                        <ng-container *ngFor=\"let m of format.columns\">\n                            <th *ngIf=\"m.type!='button'\" class=\"p-2\">{{ m.title }}</th>\n                            <th *ngIf=\"m.type=='button'\" class=\"p-2\"></th>\n                        </ng-container>         \n                        <th *ngIf=\"edit=='Y'\"></th>  \n                    </tr>\n                </thead>\n            <tbody>\n                <ng-container *ngFor=\"let m of list | filter: term | paginate: { currentPage: p , itemsPerPage: format.pagesize }\">\n                    <tr class=\"p-2\">\n                        <ng-container *ngFor=\"let n of format.columns\">\n                            <td (click)=\"rowClick(m)\" *ngIf=\"n['type']=='data'\" [innerHTML]=\"m[n['value']]\" [class]=\"n['class']\"></td>\n                            <td (click)=\"rowClick(m)\" *ngIf=\"n['type']=='text'\" [innerHTML]=\"n['value']\" [class]=\"n['class']\"></td>\n                            <td *ngIf=\"n['type']=='button'\">\n                                <button (click)=\"buttonClick(m)\" [class]=\"n.class\" [innerHTML]=\"n.title\"></button>\n                            </td>\n                        </ng-container>\n                        <td *ngIf=\"edit=='Y'\">\n                            <button class=\"btn btn-light\" (click)=\"editClick(m);\">\n                                <i class=\"bi bi-pencil-square\"></i>\n                            </button>\n                        </td>\n                    </tr> \n                    <tr *ngIf=\"m?.edit=='Y'\">\n                        <td [colSpan]=\"format.columns.length\">\n                            <ng-container *ngTemplateOutlet=\"contentTmpl\"></ng-container>\n                        </td>\n                    </tr>\n                </ng-container>\n            </tbody> \n            </table>\n        <div *ngIf=\"format.pagination=='Y'\">\n                <paging-controls (pageChange)=\"p = $event\" [isItemsPerPage]=\"false\"  \n                class=\"my-pagination\"></paging-controls> \n            </div> \n        </div> <!-- col -->\n    </div> <!-- row -->\n</div> <!-- container -->\n<!-- CARD FORMAT-->\n<div *ngIf=\"card=='Y'\" [class]=\"container_class\" [style]=\"container_style\">\n    <div [class]=\"row_placeholder\">\n        <div [class]=\"col_placeholder\">\n            <div class=\"card\">\n                <div class=\"card-header\"  style=\"margin-top: 0px;\">\n                    <div class=\"row p-2\">\n                        <div class=\"col-md-12\">\n                            <h2>{{ title }}</h2>\n                        </div>\n                    </div>\n                </div>\n                <div class=\"card-body\">\n                    <div *ngIf=\"format.search=='TOP'\" class=\"row m-1 p-3\">\n                        <div class=\"col-6\">\n                            Search: <input style=\"max-width:320px;\" class=\"form-control\" type=\"text\" id=\"term\" name=\"term\" [(ngModel)]=\"term\"> \n                        </div>\n                    </div>\n                    <div *ngIf=\"format.buttons.length>0||format.search=='Y'\" class=\"row m-1 p-3\">\n                        <div *ngIf=\"format.search=='Y'\" class=\"col-lg-6\">\n                            Search: <input style=\"max-width:320px;\" class=\"form-control\" type=\"text\" id=\"term\" name=\"term\" [(ngModel)]=\"term\"> \n                        </div>\n                        <div class=\"col-md-2\" *ngFor=\"let m of format.buttons\">\n                            <button (click)=\"topButtonClick(m.value);\" [class]=\"m.class\" [style]=\"m.style\" [innerHTML]=\"m.title\"></button>\n                        </div>\n                    </div>\n                    <table [class]=\"table_class\" [style]=\"table_style\">\n                        <thead>\n                            <ng-container *ngFor=\"let m of format.columns\">\n                                <th *ngIf=\"m.type!='button'\" [style]=\"m.style\" class=\"p-2\">{{ m.title }}</th>\n                                <th *ngIf=\"m.type=='button'\" [style]=\"m.style\" class=\"p-2\"></th>\n                            </ng-container>   \n                            <th *ngIf=\"edit=='Y'\"></th>  \n                        </thead>\n                        <tbody>\n                            <ng-container *ngFor=\"let m of list | filter: term | paginate: { currentPage: p , itemsPerPage: format.pagesize }\">\n                                <tr class=\"p-2\">\n                                    <ng-container *ngFor=\"let n of format.columns\">\n                                        <td (click)=\"rowClick(m)\" [style]=\"m.style\"  *ngIf=\"n['type']=='data'\" [innerHTML]=\"m[n['value']]\" [class]=\"n['class']\"></td>\n                                        <td (click)=\"rowClick(m)\" [style]=\"m.style\"  *ngIf=\"n['type']=='text'\" [innerHTML]=\"n['value']\" [class]=\"n['class']\"></td>\n                                        <td *ngIf=\"n['type']=='button'\">\n                                            <button (click)=\"buttonClick(m)\" [style]=\"m.style\" [class]=\"n.class\" [innerHTML]=\"n.title\"></button>\n                                        </td>\n                                    </ng-container>\n                                    <td *ngIf=\"edit=='Y'\" style=\"width:40px;\">\n                                        <button class=\"btn btn-light\" (click)=\"editClick(m);\">\n                                            <i class=\"bi bi-pencil-square\"></i>\n                                        </button>\n                                    </td>\n                                </tr> \n                                <tr *ngIf=\"m?.edit=='Y'\">\n                                    <td [colSpan]=\"format.columns.length\"> \n                                       <ng-container *ngTemplateOutlet=\"contentTmpl\"></ng-container>\n                                    </td>\n                                </tr>\n                            </ng-container>\n                        </tbody> \n                    </table>\n                    <div *ngIf=\"format.pagination=='Y'\">\n                            <paging-controls (pageChange)=\"p = $event\" [isItemsPerPage]=\"false\"  \n                            class=\"my-pagination\"></paging-controls> \n                    </div>\n                </div> <!-- card-body -->\n            </div> <!-- card --> \n        </div>\n    </div>\n</div>\n<ng-template #contentTmpl>\n    <ng-content select=\"[form]\"></ng-content>\n</ng-template>\n", styles: [""], dependencies: [{ kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i2.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "ngmodule", type: FormsModule }, { kind: "directive", type: i3.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "ngmodule", type: NgxTablePaginationModule }, { kind: "component", type: i4.PaginationComponent, selector: "paging-controls", inputs: ["maxSize", "previousLabel", "nextLabel", "screenReaderPaginationLabel", "screenReaderPageLabel", "screenReaderCurrentLabel", "directionLinks", "autoHide", "responsive", "id", "isItemsPerPage"], outputs: ["pageChange", "pageBoundsCorrection"] }, { kind: "pipe", type: i4.PaginationPipe, name: "paginate" }, { kind: "ngmodule", type: Ng2SearchPipeModule }, { kind: "pipe", type: i5.Ng2SearchPipe, name: "filter" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.3", ngImport: i0, type: SqlEditTableComponent, decorators: [{
            type: Component,
            args: [{ selector: 'sql-edit-table', standalone: true, imports: [CommonModule,
                        FormsModule,
                        NgxTablePaginationModule,
                        Ng2SearchPipeModule], template: "<!-- NOT A CARD FORMAT-->\n<div *ngIf=\"card!='Y'\" [class]=\"container_class\" [style]=\"container_style\">\n    <div [class]=\"row_placeholder\">\n        <div [class]=\"col_placeholder\">\n            <div *ngIf=\"format.search=='TOP'\" class=\"row m-1 p-3\">\n                <div class=\"col-lg-6\">\n                    Search: <input style=\"max-width:320px;\" class=\"form-control\" type=\"text\" id=\"term\" name=\"term\" [(ngModel)]=\"term\"> \n                </div>\n            </div>\n            <div class=\"row p-2 mt-2 mb-2\">\n                <div class=\"col-md-12\">\n                    <h2>{{ title }}</h2>\n                </div>\n            </div>\n            <div *ngIf=\"format.buttons.length>0||format.search=='Y'\" class=\"row m-1 p-3\">\n                <div *ngIf=\"format.search=='Y'\" class=\"col-lg-6\">\n                    Search: <input style=\"max-width:320px;\" class=\"form-control\" type=\"text\" id=\"term\" name=\"term\" [(ngModel)]=\"term\"> \n                </div>\n                <div class=\"col-md-2\" *ngFor=\"let m of format.buttons\">\n                    <button (click)=\"topButtonClick(m.value);\" [class]=\"m.class\" [style]=\"m.style\" [innerHTML]=\"m.title\"></button>\n                </div>\n            </div>\n            <table [class]=\"table_class\" [style]=\"table_style\">\n                <thead>\n                    <tr class=\"p-2\">\n                        <ng-container *ngFor=\"let m of format.columns\">\n                            <th *ngIf=\"m.type!='button'\" class=\"p-2\">{{ m.title }}</th>\n                            <th *ngIf=\"m.type=='button'\" class=\"p-2\"></th>\n                        </ng-container>         \n                        <th *ngIf=\"edit=='Y'\"></th>  \n                    </tr>\n                </thead>\n            <tbody>\n                <ng-container *ngFor=\"let m of list | filter: term | paginate: { currentPage: p , itemsPerPage: format.pagesize }\">\n                    <tr class=\"p-2\">\n                        <ng-container *ngFor=\"let n of format.columns\">\n                            <td (click)=\"rowClick(m)\" *ngIf=\"n['type']=='data'\" [innerHTML]=\"m[n['value']]\" [class]=\"n['class']\"></td>\n                            <td (click)=\"rowClick(m)\" *ngIf=\"n['type']=='text'\" [innerHTML]=\"n['value']\" [class]=\"n['class']\"></td>\n                            <td *ngIf=\"n['type']=='button'\">\n                                <button (click)=\"buttonClick(m)\" [class]=\"n.class\" [innerHTML]=\"n.title\"></button>\n                            </td>\n                        </ng-container>\n                        <td *ngIf=\"edit=='Y'\">\n                            <button class=\"btn btn-light\" (click)=\"editClick(m);\">\n                                <i class=\"bi bi-pencil-square\"></i>\n                            </button>\n                        </td>\n                    </tr> \n                    <tr *ngIf=\"m?.edit=='Y'\">\n                        <td [colSpan]=\"format.columns.length\">\n                            <ng-container *ngTemplateOutlet=\"contentTmpl\"></ng-container>\n                        </td>\n                    </tr>\n                </ng-container>\n            </tbody> \n            </table>\n        <div *ngIf=\"format.pagination=='Y'\">\n                <paging-controls (pageChange)=\"p = $event\" [isItemsPerPage]=\"false\"  \n                class=\"my-pagination\"></paging-controls> \n            </div> \n        </div> <!-- col -->\n    </div> <!-- row -->\n</div> <!-- container -->\n<!-- CARD FORMAT-->\n<div *ngIf=\"card=='Y'\" [class]=\"container_class\" [style]=\"container_style\">\n    <div [class]=\"row_placeholder\">\n        <div [class]=\"col_placeholder\">\n            <div class=\"card\">\n                <div class=\"card-header\"  style=\"margin-top: 0px;\">\n                    <div class=\"row p-2\">\n                        <div class=\"col-md-12\">\n                            <h2>{{ title }}</h2>\n                        </div>\n                    </div>\n                </div>\n                <div class=\"card-body\">\n                    <div *ngIf=\"format.search=='TOP'\" class=\"row m-1 p-3\">\n                        <div class=\"col-6\">\n                            Search: <input style=\"max-width:320px;\" class=\"form-control\" type=\"text\" id=\"term\" name=\"term\" [(ngModel)]=\"term\"> \n                        </div>\n                    </div>\n                    <div *ngIf=\"format.buttons.length>0||format.search=='Y'\" class=\"row m-1 p-3\">\n                        <div *ngIf=\"format.search=='Y'\" class=\"col-lg-6\">\n                            Search: <input style=\"max-width:320px;\" class=\"form-control\" type=\"text\" id=\"term\" name=\"term\" [(ngModel)]=\"term\"> \n                        </div>\n                        <div class=\"col-md-2\" *ngFor=\"let m of format.buttons\">\n                            <button (click)=\"topButtonClick(m.value);\" [class]=\"m.class\" [style]=\"m.style\" [innerHTML]=\"m.title\"></button>\n                        </div>\n                    </div>\n                    <table [class]=\"table_class\" [style]=\"table_style\">\n                        <thead>\n                            <ng-container *ngFor=\"let m of format.columns\">\n                                <th *ngIf=\"m.type!='button'\" [style]=\"m.style\" class=\"p-2\">{{ m.title }}</th>\n                                <th *ngIf=\"m.type=='button'\" [style]=\"m.style\" class=\"p-2\"></th>\n                            </ng-container>   \n                            <th *ngIf=\"edit=='Y'\"></th>  \n                        </thead>\n                        <tbody>\n                            <ng-container *ngFor=\"let m of list | filter: term | paginate: { currentPage: p , itemsPerPage: format.pagesize }\">\n                                <tr class=\"p-2\">\n                                    <ng-container *ngFor=\"let n of format.columns\">\n                                        <td (click)=\"rowClick(m)\" [style]=\"m.style\"  *ngIf=\"n['type']=='data'\" [innerHTML]=\"m[n['value']]\" [class]=\"n['class']\"></td>\n                                        <td (click)=\"rowClick(m)\" [style]=\"m.style\"  *ngIf=\"n['type']=='text'\" [innerHTML]=\"n['value']\" [class]=\"n['class']\"></td>\n                                        <td *ngIf=\"n['type']=='button'\">\n                                            <button (click)=\"buttonClick(m)\" [style]=\"m.style\" [class]=\"n.class\" [innerHTML]=\"n.title\"></button>\n                                        </td>\n                                    </ng-container>\n                                    <td *ngIf=\"edit=='Y'\" style=\"width:40px;\">\n                                        <button class=\"btn btn-light\" (click)=\"editClick(m);\">\n                                            <i class=\"bi bi-pencil-square\"></i>\n                                        </button>\n                                    </td>\n                                </tr> \n                                <tr *ngIf=\"m?.edit=='Y'\">\n                                    <td [colSpan]=\"format.columns.length\"> \n                                       <ng-container *ngTemplateOutlet=\"contentTmpl\"></ng-container>\n                                    </td>\n                                </tr>\n                            </ng-container>\n                        </tbody> \n                    </table>\n                    <div *ngIf=\"format.pagination=='Y'\">\n                            <paging-controls (pageChange)=\"p = $event\" [isItemsPerPage]=\"false\"  \n                            class=\"my-pagination\"></paging-controls> \n                    </div>\n                </div> <!-- card-body -->\n            </div> <!-- card --> \n        </div>\n    </div>\n</div>\n<ng-template #contentTmpl>\n    <ng-content select=\"[form]\"></ng-content>\n</ng-template>\n" }]
        }], ctorParameters: function () { return [{ type: SQLDataService }]; }, propDecorators: { title_list: [{
                type: ContentChildren,
                args: ['title']
            }], column_list: [{
                type: ContentChildren,
                args: ['column']
            }], use_parameters: [{
                type: Input
            }], data: [{
                type: Input
            }], sql: [{
                type: Input
            }], card: [{
                type: Input
            }], card_class: [{
                type: Input
            }], card_style: [{
                type: Input
            }], container_class: [{
                type: Input
            }], container_style: [{
                type: Input
            }], closable: [{
                type: Input
            }], search: [{
                type: Input
            }], bs_row: [{
                type: Input
            }], bs_col: [{
                type: Input
            }], table_class: [{
                type: Input
            }], table_style: [{
                type: Input
            }], edit: [{
                type: Input
            }], title: [{
                type: Input
            }], pagination: [{
                type: Input
            }], pagesize: [{
                type: Input
            }], id: [{
                type: Input
            }], id2: [{
                type: Input
            }], id3: [{
                type: Input
            }], open: [{
                type: Input
            }], class: [{
                type: Input
            }], style: [{
                type: Input
            }], handler: [{
                type: Input
            }], button_click: [{
                type: Output
            }], row_click: [{
                type: Output
            }], top_button_click: [{
                type: Output
            }] } });

class SqlSubmitComponent {
    constructor(_dataService) {
        this._dataService = _dataService;
        this.data = {};
        this.label = 'Save Changes';
        this.class = 'btn btn-primary';
        this.style = '';
        this.change = new EventEmitter();
        this.counter = 0;
        this.myObj = this._dataService.dataSubject.subscribe(d => {
            this.data = d;
            this.counter++;
        });
    }
    ngOnDestroy() {
        this.myObj.unsubscribe();
    }
    ngOnInit() {
    }
    handleClick() {
        this.data['submit'] = 'Y';
        this._dataService.pushNotification(this.data);
    }
}
SqlSubmitComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.3", ngImport: i0, type: SqlSubmitComponent, deps: [{ token: SQLDataService }], target: i0.ɵɵFactoryTarget.Component });
SqlSubmitComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.3", type: SqlSubmitComponent, isStandalone: true, selector: "sql-submit", inputs: { data: "data", label: "label", class: "class", style: "style" }, outputs: { change: "change" }, ngImport: i0, template: "<span class=\"m-2 p-2\">\n    <button [ngClass]=\"class\" [style]=\"style\" (click)=\"handleClick()\">{{ label }}</button> \n</span>", styles: [""], dependencies: [{ kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i2.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.3", ngImport: i0, type: SqlSubmitComponent, decorators: [{
            type: Component,
            args: [{ selector: 'sql-submit', standalone: true, imports: [CommonModule], template: "<span class=\"m-2 p-2\">\n    <button [ngClass]=\"class\" [style]=\"style\" (click)=\"handleClick()\">{{ label }}</button> \n</span>" }]
        }], ctorParameters: function () { return [{ type: SQLDataService }]; }, propDecorators: { data: [{
                type: Input
            }], label: [{
                type: Input
            }], class: [{
                type: Input
            }], style: [{
                type: Input
            }], change: [{
                type: Output
            }] } });

class SqlComponentsModule {
}
SqlComponentsModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.3", ngImport: i0, type: SqlComponentsModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
SqlComponentsModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "15.2.3", ngImport: i0, type: SqlComponentsModule, declarations: [SqlComponentsComponent], imports: [SqlFormComponent,
        SqlAddTableComponent,
        SqlCalendarComponent,
        SqlCheckboxComponent,
        SqlFullcalendarComponent,
        SqlPanelComponent,
        SqlCardComponent,
        SqlDatepickerComponent,
        SqlUploadFormComponent,
        SqlInputComponent,
        SqlSelectComponent,
        SqlTextareaComponent,
        SqlRadioGroupComponent,
        SqlTableComponent,
        SqlEditTableComponent,
        SqlSubmitComponent], exports: [SqlComponentsComponent,
        SqlFormComponent,
        SqlAddTableComponent,
        SqlCalendarComponent,
        SqlCheckboxComponent,
        SqlFullcalendarComponent,
        SqlPanelComponent,
        SqlCardComponent,
        SqlDatepickerComponent,
        SqlUploadFormComponent,
        SqlInputComponent,
        SqlSelectComponent,
        SqlTextareaComponent,
        SqlRadioGroupComponent,
        SqlTableComponent,
        SqlEditTableComponent,
        SqlSubmitComponent] });
SqlComponentsModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "15.2.3", ngImport: i0, type: SqlComponentsModule, imports: [SqlFormComponent,
        SqlAddTableComponent,
        SqlCalendarComponent,
        SqlCheckboxComponent,
        SqlFullcalendarComponent,
        SqlPanelComponent,
        SqlCardComponent,
        SqlDatepickerComponent,
        SqlUploadFormComponent,
        SqlInputComponent,
        SqlSelectComponent,
        SqlTextareaComponent,
        SqlRadioGroupComponent,
        SqlTableComponent,
        SqlEditTableComponent,
        SqlSubmitComponent] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.3", ngImport: i0, type: SqlComponentsModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [
                        SqlComponentsComponent,
                    ],
                    imports: [
                        SqlFormComponent,
                        SqlAddTableComponent,
                        SqlCalendarComponent,
                        SqlCheckboxComponent,
                        SqlFullcalendarComponent,
                        SqlPanelComponent,
                        SqlCardComponent,
                        SqlDatepickerComponent,
                        SqlUploadFormComponent,
                        SqlInputComponent,
                        SqlSelectComponent,
                        SqlTextareaComponent,
                        SqlRadioGroupComponent,
                        SqlTableComponent,
                        SqlEditTableComponent,
                        SqlSubmitComponent
                    ],
                    exports: [
                        SqlComponentsComponent,
                        SqlFormComponent,
                        SqlAddTableComponent,
                        SqlCalendarComponent,
                        SqlCheckboxComponent,
                        SqlFullcalendarComponent,
                        SqlPanelComponent,
                        SqlCardComponent,
                        SqlDatepickerComponent,
                        SqlUploadFormComponent,
                        SqlInputComponent,
                        SqlSelectComponent,
                        SqlTextareaComponent,
                        SqlRadioGroupComponent,
                        SqlTableComponent,
                        SqlEditTableComponent,
                        SqlSubmitComponent
                    ]
                }]
        }] });

class SqlDialogComponent {
    constructor() {
        this.message = '';
    }
}
SqlDialogComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.3", ngImport: i0, type: SqlDialogComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
SqlDialogComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.3", type: SqlDialogComponent, isStandalone: true, selector: "lib-sql-dialog", inputs: { message: "message" }, ngImport: i0, template: "<h1 mat-dialog-title>Delete Record</h1>\n<div mat-dialog-content>\n  {{ message }}\n</div>\n<div mat-dialog-actions>\n  <button class=\"btn btn-primary\" mat-dialog-close>No</button>\n  <button class=\"btn btn-danger\" mat-dialog-close cdkFocusInitial>Yes</button>\n</div>", styles: [""], dependencies: [{ kind: "ngmodule", type: CommonModule }, { kind: "ngmodule", type: MatDialogModule }, { kind: "directive", type: i2$2.MatDialogClose, selector: "[mat-dialog-close], [matDialogClose]", inputs: ["aria-label", "type", "mat-dialog-close", "matDialogClose"], exportAs: ["matDialogClose"] }, { kind: "directive", type: i2$2.MatDialogTitle, selector: "[mat-dialog-title], [matDialogTitle]", inputs: ["id"], exportAs: ["matDialogTitle"] }, { kind: "directive", type: i2$2.MatDialogContent, selector: "[mat-dialog-content], mat-dialog-content, [matDialogContent]" }, { kind: "directive", type: i2$2.MatDialogActions, selector: "[mat-dialog-actions], mat-dialog-actions, [matDialogActions]", inputs: ["align"] }, { kind: "ngmodule", type: MatButtonModule }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.3", ngImport: i0, type: SqlDialogComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lib-sql-dialog', standalone: true, imports: [CommonModule, MatDialogModule, MatButtonModule], template: "<h1 mat-dialog-title>Delete Record</h1>\n<div mat-dialog-content>\n  {{ message }}\n</div>\n<div mat-dialog-actions>\n  <button class=\"btn btn-primary\" mat-dialog-close>No</button>\n  <button class=\"btn btn-danger\" mat-dialog-close cdkFocusInitial>Yes</button>\n</div>" }]
        }], propDecorators: { message: [{
                type: Input
            }] } });

class SqlDeleteDialogComponent {
    constructor(_dataService, dialog) {
        this._dataService = _dataService;
        this.dialog = dialog;
        this.data = {};
        this.change = new EventEmitter();
        this.myObj = this._dataService.dataSubject.subscribe(d => {
            this.data = d;
        });
    }
    ngOnDestroy() {
        this.myObj.unsubscribe();
    }
    ngOnInit() {
    }
    handleClick() {
        this.data['submit'] = 'D';
        this._dataService.pushNotification(this.data);
    }
}
SqlDeleteDialogComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.3", ngImport: i0, type: SqlDeleteDialogComponent, deps: [{ token: SQLDataService }, { token: i2$2.MatDialog }], target: i0.ɵɵFactoryTarget.Component });
SqlDeleteDialogComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.3", type: SqlDeleteDialogComponent, isStandalone: true, selector: "lib-sql-delete-dialog", inputs: { data: "data" }, ngImport: i0, template: "<h1 mat-dialog-title>Delete Record</h1>\n<div mat-dialog-content>\n  Are you sure to want to delete this record?  This cannot be reversed.\n</div>\n<div mat-dialog-actions>\n  <button class=\"btn btn-primary\" mat-dialog-close>No</button>\n  <button style=\"margin-left: 20px;\" (click)=\"handleClick()\" class=\"btn btn-danger\" mat-dialog-close cdkFocusInitial>Yes</button>\n</div>", styles: [""], dependencies: [{ kind: "ngmodule", type: CommonModule }, { kind: "ngmodule", type: MatDialogModule }, { kind: "directive", type: i2$2.MatDialogClose, selector: "[mat-dialog-close], [matDialogClose]", inputs: ["aria-label", "type", "mat-dialog-close", "matDialogClose"], exportAs: ["matDialogClose"] }, { kind: "directive", type: i2$2.MatDialogTitle, selector: "[mat-dialog-title], [matDialogTitle]", inputs: ["id"], exportAs: ["matDialogTitle"] }, { kind: "directive", type: i2$2.MatDialogContent, selector: "[mat-dialog-content], mat-dialog-content, [matDialogContent]" }, { kind: "directive", type: i2$2.MatDialogActions, selector: "[mat-dialog-actions], mat-dialog-actions, [matDialogActions]", inputs: ["align"] }, { kind: "ngmodule", type: MatButtonModule }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.3", ngImport: i0, type: SqlDeleteDialogComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lib-sql-delete-dialog', standalone: true, imports: [CommonModule, MatDialogModule, MatButtonModule], template: "<h1 mat-dialog-title>Delete Record</h1>\n<div mat-dialog-content>\n  Are you sure to want to delete this record?  This cannot be reversed.\n</div>\n<div mat-dialog-actions>\n  <button class=\"btn btn-primary\" mat-dialog-close>No</button>\n  <button style=\"margin-left: 20px;\" (click)=\"handleClick()\" class=\"btn btn-danger\" mat-dialog-close cdkFocusInitial>Yes</button>\n</div>" }]
        }], ctorParameters: function () { return [{ type: SQLDataService }, { type: i2$2.MatDialog }]; }, propDecorators: { data: [{
                type: Input
            }] } });

class SqlDeleteComponent {
    constructor(_dataService, dialog) {
        this._dataService = _dataService;
        this.dialog = dialog;
        this.data = {};
        this.label = 'Delete Record';
        this.warning = 'Are you sure you want to delete this record?';
        this.class = 'btn btn-danger';
        this.style = '';
        this.change = new EventEmitter();
        this.counter = 0;
        this.myObj = this._dataService.dataSubject.subscribe(d => {
            this.data = d;
            this.counter++;
        });
    }
    handleClick(enterAnimationDuration, exitAnimationDuration) {
        this.dialog.open(SqlDeleteDialogComponent, {
            width: '350px',
            enterAnimationDuration,
            exitAnimationDuration,
        });
    }
    ngOnDestroy() {
        //    this.myObj.unsubscribe();
    }
    ngOnInit() {
    }
}
SqlDeleteComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.3", ngImport: i0, type: SqlDeleteComponent, deps: [{ token: SQLDataService }, { token: i2$2.MatDialog }], target: i0.ɵɵFactoryTarget.Component });
SqlDeleteComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.3", type: SqlDeleteComponent, isStandalone: true, selector: "sql-delete", inputs: { data: "data", label: "label", warning: "warning", class: "class", style: "style" }, outputs: { change: "change" }, ngImport: i0, template: "<span *ngIf=\"data?.id!=''&&data?.id!='0'\" class=\"m-2 p-2\">\n    <button [ngClass]=\"class\" [style]=\"style\" (click)=\"handleClick('300ms', '150ms')\">{{ label }}</button> \n</span>", styles: [""], dependencies: [{ kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i2.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.3", ngImport: i0, type: SqlDeleteComponent, decorators: [{
            type: Component,
            args: [{ selector: 'sql-delete', standalone: true, imports: [CommonModule, SqlDialogComponent], template: "<span *ngIf=\"data?.id!=''&&data?.id!='0'\" class=\"m-2 p-2\">\n    <button [ngClass]=\"class\" [style]=\"style\" (click)=\"handleClick('300ms', '150ms')\">{{ label }}</button> \n</span>" }]
        }], ctorParameters: function () { return [{ type: SQLDataService }, { type: i2$2.MatDialog }]; }, propDecorators: { data: [{
                type: Input
            }], label: [{
                type: Input
            }], warning: [{
                type: Input
            }], class: [{
                type: Input
            }], style: [{
                type: Input
            }], change: [{
                type: Output
            }] } });

class SqlMenuComponent {
    constructor(_dataService) {
        this._dataService = _dataService;
        // format: is built from ContentChildren and Input Parameters
        this.format = { title: '', search: '', class: '', style: '', columns: [], buttons: [] };
        this.list = [];
        this.row_placeholder = 'row';
        this.col_placeholder = 'col-12';
        //-- Inputs
        this.title = ''; // title of the page.
        this.active = '0';
        this.use_parameters = 'N';
        this.data = ''; // Use Data if data comes from function.
        this.card = "Y"; // Show the form in a card Y/N
        this.card_class = '';
        this.card_style = '';
        this.container_class = 'container-fluid m-2 p-2'; // Class of the outer ng-container.
        this.container_style = ''; // Style of the outer ng-container.  
        this.search = 'TOP'; // Location of the search box.
        this.bs_row = 'Y'; // Y means add a bootstrap row.
        this.bs_col = 'col-sm-12 col-lg-12 col-xl-12'; // What bootstrap columns.
        this.table_class = 'table table-striped table-condensed'; // class of the table.
        this.table_style = ''; // style of the table.
        this.edit = 'Y'; // Add custom edit button.
        this.pagination = 'Y'; // Include pagination.
        this.pagesize = 25; // rows per page for pagination.
        this.id = '0'; // id for where clause.
        this.open = "Y"; // Does a closable list start open.
        this.class = 'table table-striped table-condensed'; // Class for the table container.
        this.style = ""; // Style for the table container.
        this.handler = 'default'; // what handler is used to process the form.
        this.menuClick = new EventEmitter();
        this.counter = 0;
        this.myObs = this._dataService.dataSubject.subscribe(d => {
            this.data = d;
        });
    }
    ngOnInit() {
        this.format.search = 'Y';
    }
    processClick(m) {
        this.list.forEach((e) => {
            e.active = 'N';
        });
        m.active = 'Y';
        this.menuClick.emit(m);
    }
    ngAfterViewInit() {
        this.format.title = this.title;
        this.format.class = this.class;
        this.format.style = this.style;
        this.format.pagination = this.pagination;
        this.format.pagesize = this.pagesize;
        if (this.bs_row == 'Y') {
            this.row_placeholder = "row";
        }
        else {
            this.row_placeholder = "none";
        }
        this.col_placeholder = this.bs_col;
        this.row_list.forEach((e) => {
            let template = { title: '', class: '', id: '', style: '', active: 'N' };
            if (e.nativeElement.nodeName == 'LI') {
                template.id = e.nativeElement.id;
                template.title = e.nativeElement.innerHTML;
            }
            if (e.nativeElement.className !== undefined) {
                template.class = e.nativeElement.className;
            }
            template.style = e.nativeElement.style.cssText;
            this.list.push(template);
        });
        this.list.forEach((e) => {
            console.log('e.id: ' + e.id + ' ' + ' active: ' + this.active);
            if (e.id == this.active) {
                e.active = 'Y';
            }
            else {
                e.active = 'N';
            }
        });
    }
    ngOnDestroy() {
        //    this.myObs.unsubscribe();
        //   this.myDataObs.unsubscribe();
    }
}
SqlMenuComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.3", ngImport: i0, type: SqlMenuComponent, deps: [{ token: SQLDataService }], target: i0.ɵɵFactoryTarget.Component });
SqlMenuComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.3", type: SqlMenuComponent, isStandalone: true, selector: "sql-menu", inputs: { title: "title", active: "active", use_parameters: "use_parameters", data: "data", card: "card", card_class: "card_class", card_style: "card_style", container_class: "container_class", container_style: "container_style", search: "search", bs_row: "bs_row", bs_col: "bs_col", table_class: "table_class", table_style: "table_style", edit: "edit", pagination: "pagination", pagesize: "pagesize", id: "id", open: "open", class: "class", style: "style", handler: "handler" }, outputs: { menuClick: "menuClick" }, queries: [{ propertyName: "title_list", predicate: ["title"] }, { propertyName: "row_list", predicate: ["row"] }], ngImport: i0, template: "<div class=\"list-group\">\n    <button *ngIf=\"title!=''\" class=\"list-group-item list-group-item-action list-group-item-dark\">{{ title }}</button>\n    <ng-container *ngFor=\"let m of list\">\n        <li (click)=\"processClick(m)\" *ngIf=\"m?.active!=='Y'\" \n        class=\"list-group-item d-flex justify-content-between align-items-center\">{{ m.title }}\n                <span *ngIf=\"m.badge!==''\" class=\"badge bg-primary rounded-pill\">{{ m.badge }}</span></li>\n        <li (click)=\"processClick(m)\" *ngIf=\"m?.active==='Y'\" \n        class=\"list-group-item d-flex justify-content-between align-items-center active\">{{ m.title }}\n                <span *ngIf=\"m.badge!==''\" class=\"badge bg-primary rounded-pill\">{{ m.badge }}</span></li>\n    </ng-container>\n</div>", styles: [""], dependencies: [{ kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.3", ngImport: i0, type: SqlMenuComponent, decorators: [{
            type: Component,
            args: [{ selector: 'sql-menu', standalone: true, imports: [CommonModule], template: "<div class=\"list-group\">\n    <button *ngIf=\"title!=''\" class=\"list-group-item list-group-item-action list-group-item-dark\">{{ title }}</button>\n    <ng-container *ngFor=\"let m of list\">\n        <li (click)=\"processClick(m)\" *ngIf=\"m?.active!=='Y'\" \n        class=\"list-group-item d-flex justify-content-between align-items-center\">{{ m.title }}\n                <span *ngIf=\"m.badge!==''\" class=\"badge bg-primary rounded-pill\">{{ m.badge }}</span></li>\n        <li (click)=\"processClick(m)\" *ngIf=\"m?.active==='Y'\" \n        class=\"list-group-item d-flex justify-content-between align-items-center active\">{{ m.title }}\n                <span *ngIf=\"m.badge!==''\" class=\"badge bg-primary rounded-pill\">{{ m.badge }}</span></li>\n    </ng-container>\n</div>" }]
        }], ctorParameters: function () { return [{ type: SQLDataService }]; }, propDecorators: { title_list: [{
                type: ContentChildren,
                args: ['title']
            }], row_list: [{
                type: ContentChildren,
                args: ['row']
            }], title: [{
                type: Input
            }], active: [{
                type: Input
            }], use_parameters: [{
                type: Input
            }], data: [{
                type: Input
            }], card: [{
                type: Input
            }], card_class: [{
                type: Input
            }], card_style: [{
                type: Input
            }], container_class: [{
                type: Input
            }], container_style: [{
                type: Input
            }], search: [{
                type: Input
            }], bs_row: [{
                type: Input
            }], bs_col: [{
                type: Input
            }], table_class: [{
                type: Input
            }], table_style: [{
                type: Input
            }], edit: [{
                type: Input
            }], pagination: [{
                type: Input
            }], pagesize: [{
                type: Input
            }], id: [{
                type: Input
            }], open: [{
                type: Input
            }], class: [{
                type: Input
            }], style: [{
                type: Input
            }], handler: [{
                type: Input
            }], menuClick: [{
                type: Output
            }] } });

class SqlDataMenuComponent {
    constructor(_dataService) {
        this._dataService = _dataService;
        this.row_placeholder = 'row';
        this.col_placeholder = 'col-12';
        //-- Inputs
        this.function = ''; // Use Function if data comes from a function in router.php
        this.sql = ''; // SQL that gets data 
        this.use_parameters = 'N'; // If Y uses the paramSubject to get parameters.
        this.page = ''; // page parameter, ignored if use_parameters = 'Y'.
        this.id = '0'; // id parameter, ignored if use_parameters = 'Y'.
        this.id2 = '0'; // id2 parameter, ignored if use_parameters = 'Y'.
        this.id3 = '0'; // id3 parameter, ignored if use_parameters = 'Y'.
        this.class = ''; // class of the outer container.
        this.style = ''; // style of the outer container.
        this.title = ''; // title of the page.
        this.parameters = { page: '', id: '', id2: '', id3: '' };
        this.click = new EventEmitter();
        this.counter = 0;
    }
    ngOnInit() {
    }
    processClick(m) {
        this.list.forEach(function (value) {
            if (value.id == m.id) {
                value.active = 'Y';
            }
            else {
                value.active = 'N';
            }
        });
        this.click.emit(m);
    }
    ngAfterViewInit() {
        if (this.use_parameters == 'Y') {
            this._dataService.paramSubject.subscribe(d => {
                this.parameters = d;
                this._dataService.getSQL(this.sql, this.parameters).subscribe((data) => {
                    this.list = data;
                    this.list.forEach(function (value) {
                        value.active = 'N';
                    });
                });
            });
        }
        else {
            this.parameters.page = this.page;
            this.parameters.id = this.id;
            this.parameters.id2 = this.id2;
            this.parameters.id3 = this.id3;
            this._dataService.getMenu(this.sql, this.parameters).subscribe((data) => {
                this.list = data;
                this.list.forEach(function (value) {
                    value.active = 'N';
                });
            });
        }
    }
}
SqlDataMenuComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.3", ngImport: i0, type: SqlDataMenuComponent, deps: [{ token: SQLDataService }], target: i0.ɵɵFactoryTarget.Component });
SqlDataMenuComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.3", type: SqlDataMenuComponent, isStandalone: true, selector: "sql-data-menu", inputs: { function: "function", sql: "sql", use_parameters: "use_parameters", page: "page", id: "id", id2: "id2", id3: "id3", class: "class", style: "style", title: "title" }, outputs: { click: "click" }, ngImport: i0, template: "<div class=\"list-group\" [style]=\"style\">\n    <button *ngIf=\"title!=''\" class=\"list-group-item list-group-item-action list-group-item-dark\">{{ title }}</button>\n    <ng-container *ngFor=\"let m of list\">\n        <li (click)=\"processClick(m)\" *ngIf=\"m?.active!=='Y'\" \n        class=\"list-group-item d-flex justify-content-between align-items-center\">{{ m.title }}\n                <span *ngIf=\"m.badge!==''\" class=\"badge bg-primary rounded-pill\">{{ m.badge }}</span></li>\n        <li (click)=\"processClick(m)\" *ngIf=\"m?.active==='Y'\" \n        class=\"list-group-item d-flex justify-content-between align-items-center active\">{{ m.title }}\n                <span *ngIf=\"m.badge!==''\" class=\"badge bg-primary rounded-pill\">{{ m.badge }}</span></li>\n    </ng-container>\n</div>", styles: [""], dependencies: [{ kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "ngmodule", type: FormsModule }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.3", ngImport: i0, type: SqlDataMenuComponent, decorators: [{
            type: Component,
            args: [{ selector: 'sql-data-menu', standalone: true, imports: [CommonModule,
                        FormsModule], template: "<div class=\"list-group\" [style]=\"style\">\n    <button *ngIf=\"title!=''\" class=\"list-group-item list-group-item-action list-group-item-dark\">{{ title }}</button>\n    <ng-container *ngFor=\"let m of list\">\n        <li (click)=\"processClick(m)\" *ngIf=\"m?.active!=='Y'\" \n        class=\"list-group-item d-flex justify-content-between align-items-center\">{{ m.title }}\n                <span *ngIf=\"m.badge!==''\" class=\"badge bg-primary rounded-pill\">{{ m.badge }}</span></li>\n        <li (click)=\"processClick(m)\" *ngIf=\"m?.active==='Y'\" \n        class=\"list-group-item d-flex justify-content-between align-items-center active\">{{ m.title }}\n                <span *ngIf=\"m.badge!==''\" class=\"badge bg-primary rounded-pill\">{{ m.badge }}</span></li>\n    </ng-container>\n</div>" }]
        }], ctorParameters: function () { return [{ type: SQLDataService }]; }, propDecorators: { function: [{
                type: Input
            }], sql: [{
                type: Input
            }], use_parameters: [{
                type: Input
            }], page: [{
                type: Input
            }], id: [{
                type: Input
            }], id2: [{
                type: Input
            }], id3: [{
                type: Input
            }], class: [{
                type: Input
            }], style: [{
                type: Input
            }], title: [{
                type: Input
            }], click: [{
                type: Output
            }] } });

class SqlDataSelectComponent {
    constructor(_dataService) {
        this._dataService = _dataService;
        this.value = '';
        this.fieldData = '';
        this.appearance = 'outline';
        this.native = 'Y';
        this.sql = '';
        this.handler = '';
        this.col = '';
        this.id = '';
        this.id2 = '';
        this.id3 = '';
        this.class = '';
        this.style = '';
        this.hint = '';
        this.icon = '';
        this.label = 'Label not set';
        this.placeholder = '';
        this.bs_row = 'Y';
        this.bs_col = 'col-12';
        this.top_label = 'N';
        this.counter = 0;
        this.change = new EventEmitter();
        this.parameters = { page: '', id: '', id2: '', id3: '' };
        this.myObs = this._dataService.dataSubject.subscribe(d => {
            this.data = d;
            this.fieldData = this.data;
            this.value = this.fieldData[this.col];
            this.counter++;
        });
    }
    ngAfterViewInit() {
        this.parameters.id = this.id;
        this.parameters.id2 = this.id2;
        this.parameters.id3 = this.id3;
        this.myDataObs = this._dataService.getSelect(this.sql, this.parameters).subscribe((data) => {
            this.selectData = data;
        });
    }
    ngOnInit() {
    }
    handleChange() {
        this.fieldData['submit'] = 'N';
        this.fieldData[this.col] = this.value;
        this._dataService.pushNotification(this.fieldData);
    }
    ngOnDestroy() {
        this.myObs.unsubscribe();
        this.myDataObs.unsubscribe();
    }
}
SqlDataSelectComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.3", ngImport: i0, type: SqlDataSelectComponent, deps: [{ token: SQLDataService }], target: i0.ɵɵFactoryTarget.Component });
SqlDataSelectComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.3", type: SqlDataSelectComponent, isStandalone: true, selector: "sql-data-select", inputs: { appearance: "appearance", native: "native", sql: "sql", handler: "handler", col: "col", data: "data", id: "id", id2: "id2", id3: "id3", class: "class", style: "style", hint: "hint", icon: "icon", label: "label", placeholder: "placeholder", bs_row: "bs_row", bs_col: "bs_col", top_label: "top_label" }, outputs: { change: "change" }, ngImport: i0, template: "<ng-container *ngIf=\"appearance=='fill'\">\n    <ng-container *ngIf=\"native=='Y'\">\n        <!-- New Row -->\n        <div *ngIf=\"bs_row=='Y'\" class=\"row\">\n            <div [class]=\"bs_col\">\n                <p *ngIf=\"top_label=='Y'\">{{ label }}</p>\n                <mat-form-field appearance=\"fill\" [style]=\"style\" [class]=\"class\">\n                    <mat-label>{{ label }}</mat-label>\n                    <select [(ngModel)]=\"value\" (change)=\"handleChange()\" matNativeControl [style]=\"style\" [class]=\"class\">\n                      <option *ngFor=\"let m of selectData\" [value]=\"m.id\">{{ m.option }}</option>\n                    </select>\n                  </mat-form-field>\n            </div>\n        </div>\n        <!-- No New Row but column -->\n        <span *ngIf=\"bs_row!='Y'&&bs_col!=''\">\n            <div [class]=\"bs_col\">\n                <p *ngIf=\"top_label=='Y'\">{{ label }}</p>\n                <mat-form-field appearance=\"fill\" [style]=\"style\" [class]=\"class\">\n                    <mat-label>{{ label }}</mat-label>\n                    <select [(ngModel)]=\"value\"  matNativeControl (change)=\"handleChange()\" [style]=\"style\" [class]=\"class\">\n                      <option *ngFor=\"let m of selectData\" [value]=\"m.id\">{{ m.option }}</option>\n                    </select>\n                  </mat-form-field>\n            </div>\n          </span>\n        <!-- No New Row and no column -->\n        <span *ngIf=\"bs_row!='Y'&&bs_col==''\">\n            <p *ngIf=\"top_label=='Y'\">{{ label }}</p>\n            <mat-form-field appearance=\"fill\" [style]=\"style\" [class]=\"class\">\n                <mat-label>{{ label }}</mat-label>\n                <select  [(ngModel)]=\"value\" matNativeControl (change)=\"handleChange()\" [style]=\"style\" [class]=\"class\">\n                  <option *ngFor=\"let m of selectData\" [value]=\"m.id\">{{ m.option }}</option>\n                </select>\n              </mat-form-field>\n            </span>\n          </ng-container>\n    <span *ngIf=\"native=='N'\">\n        <!-- New Row -->\n        <div *ngIf=\"bs_row=='Y'\" class=\"row\">\n            <div [class]=\"bs_col\">\n                <p *ngIf=\"top_label=='Y'\">{{ label }}</p>\n                <mat-form-field appearance=\"fill\" [style]=\"style\" [class]=\"class\">\n                    <mat-label>{{ label }}</mat-label>\n                    <mat-select  [(ngModel)]=\"value\" (selectionChange)=\"handleChange()\" [style]=\"style\" [class]=\"class\">\n                      <mat-option *ngFor=\"let m of selectData\" [value]=\"m.id\">\n                        {{ m.option }}\n                      </mat-option>\n                    </mat-select>\n                  </mat-form-field>\n            </div>\n        </div>\n        <!-- No New Row but column -->\n        <span *ngIf=\"bs_row!='Y'&&bs_col!=''\">\n            <div [class]=\"bs_col\">\n                <p *ngIf=\"top_label=='Y'\">{{ label }}</p>\n                <mat-form-field appearance=\"fill\"  [style]=\"style\" [class]=\"class\">\n                    <mat-label>{{ label }}</mat-label>\n                    <mat-select  [(ngModel)]=\"value\" (selectionChange)=\"handleChange()\" [style]=\"style\" [class]=\"class\">\n                      <mat-option *ngFor=\"let m of selectData\" [value]=\"m.id\">\n                        {{ m.option }}\n                      </mat-option>\n                    </mat-select>\n                  </mat-form-field>\n            </div>\n          </span>\n        <!-- No New Row and no column -->\n        <span *ngIf=\"bs_row!='Y'&&bs_col==''\">\n            <p *ngIf=\"top_label=='Y'\">{{ label }}</p>\n            <mat-form-field appearance=\"fill\"  [style]=\"style\" [class]=\"class\">\n                <mat-label>{{ label }}</mat-label>\n                <mat-select  [(ngModel)]=\"value\" (selectionChange)=\"handleChange()\" [style]=\"style\" [class]=\"class\">\n                  <mat-option *ngFor=\"let m of selectData\" [value]=\"m.id\"  [style]=\"style\" [class]=\"class\">\n                    {{ m.option }}\n                  </mat-option>\n                </mat-select>\n              </mat-form-field>\n            </span>\n          </span>\n</ng-container>\n<!-- OUTLINE Style -->\n<ng-container *ngIf=\"appearance=='outline'\">\n<ng-container *ngIf=\"native=='Y'\">\n    <!-- New Row -->\n    <div *ngIf=\"bs_row=='Y'\" class=\"row\">\n        <div [class]=\"bs_col\">\n            <p *ngIf=\"top_label=='Y'\">{{ label }}</p>\n            <mat-form-field appearance=\"outline\" [style]=\"style\" [class]=\"class\">\n                <mat-label>{{ label }}</mat-label>\n                <select  [(ngModel)]=\"value\" matNativeControl  (change)=\"handleChange()\" [style]=\"style\" [class]=\"class\">\n                  <option *ngFor=\"let m of selectData\" [value]=\"m.id\">{{ m.option }}</option>\n                </select>\n              </mat-form-field>\n        </div>\n    </div>\n    <!-- No New Row but column -->\n    <span *ngIf=\"bs_row!='Y'&&bs_col!=''\">\n        <div [class]=\"bs_col\">\n            <p *ngIf=\"top_label=='Y'\">{{ label }}</p>\n            <mat-form-field appearance=\"outline\" [style]=\"style\" [class]=\"class\">\n                <mat-label>{{ label }}</mat-label>\n                <select  [(ngModel)]=\"value\" matNativeControl  (change)=\"handleChange()\" [style]=\"style\" [class]=\"class\">\n                  <option *ngFor=\"let m of selectData\" [value]=\"m.id\">{{ m.option }}</option>\n                </select>\n              </mat-form-field>\n        </div>\n    </span>\n    <!-- No New Row and no column -->\n    <ng-container *ngIf=\"bs_row!='Y'&&bs_col==''\">\n        <p *ngIf=\"top_label=='Y'\">{{ label }}</p>\n        <mat-form-field appearance=\"outline\" [style]=\"style\" [class]=\"class\">\n            <mat-label>{{ label }}</mat-label>\n            <select  [(ngModel)]=\"value\" matNativeControl  (change)=\"handleChange()\" [style]=\"style\" [class]=\"class\">\n              <option *ngFor=\"let m of selectData\" [value]=\"m.id\">{{ m.option }}</option>\n            </select>\n          </mat-form-field>\n        </ng-container>\n      </ng-container>\n<ng-container *ngIf=\"native=='N'\">\n    <!-- New Row -->\n    <div *ngIf=\"bs_row=='Y'\" class=\"row\">\n        <div [class]=\"bs_col\">\n            <p *ngIf=\"top_label=='Y'\">{{ label }}</p>\n            <mat-form-field appearance=\"fill\"  [style]=\"style\" [class]=\"class\">\n                <mat-label>{{ label }}</mat-label>\n                <mat-select  [(ngModel)]=\"value\"  (selectionChange)=\"handleChange()\" [style]=\"style\" [class]=\"class\">\n                  <mat-option *ngFor=\"let m of selectData\" [value]=\"m.id\">\n                    {{ m.option }}\n                  </mat-option>\n                </mat-select>\n              </mat-form-field>\n        </div>\n    </div>\n    <!-- No New Row but column -->\n    <ng-container *ngIf=\"bs_row!='Y'&&bs_col!=''\">\n        <div [class]=\"bs_col\">\n            <p *ngIf=\"top_label=='Y'\">{{ label }}</p>\n            <mat-form-field appearance=\"outline\"  [style]=\"style\" [class]=\"class\">\n                <mat-label>{{ label }}</mat-label>\n                <mat-select  [(ngModel)]=\"value\"  (selectionChange)=\"handleChange()\" [style]=\"style\" [class]=\"class\">\n                  <mat-option *ngFor=\"let m of selectData\" [value]=\"m.id\">\n                    {{ m.option }}\n                  </mat-option>\n                </mat-select>\n              </mat-form-field>\n        </div>\n      </ng-container>\n    <!-- No New Row and no column -->\n    <ng-container *ngIf=\"bs_row!='Y'&&bs_col==''\">\n        <p *ngIf=\"top_label=='Y'\">{{ label }}</p>\n        <mat-form-field appearance=\"outline\"  [style]=\"style\" [class]=\"class\">\n            <mat-label>{{ label }}</mat-label>\n            <mat-select  [(ngModel)]=\"value\"  (selectionChange)=\"handleChange()\" [style]=\"style\" [class]=\"class\">\n              <mat-option *ngFor=\"let m of selectData\" [value]=\"m.id\">\n                {{ m.option }}\n              </mat-option>\n            </mat-select>\n          </mat-form-field>\n        </ng-container>\n      </ng-container>\n    </ng-container>\n", styles: [""], dependencies: [{ kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "ngmodule", type: FormsModule }, { kind: "directive", type: i3.NgSelectOption, selector: "option", inputs: ["ngValue", "value"] }, { kind: "directive", type: i3.ɵNgSelectMultipleOption, selector: "option", inputs: ["ngValue", "value"] }, { kind: "directive", type: i3.SelectControlValueAccessor, selector: "select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]", inputs: ["compareWith"] }, { kind: "directive", type: i3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "ngmodule", type: MatFormFieldModule }, { kind: "component", type: i4$1.MatFormField, selector: "mat-form-field", inputs: ["hideRequiredMarker", "color", "floatLabel", "appearance", "subscriptSizing", "hintLabel"], exportAs: ["matFormField"] }, { kind: "directive", type: i4$1.MatLabel, selector: "mat-label" }, { kind: "ngmodule", type: MatInputModule }, { kind: "directive", type: i5$1.MatInput, selector: "input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]", inputs: ["disabled", "id", "placeholder", "name", "required", "type", "errorStateMatcher", "aria-describedby", "value", "readonly"], exportAs: ["matInput"] }, { kind: "ngmodule", type: MatOptionModule }, { kind: "component", type: i6$2.MatOption, selector: "mat-option", exportAs: ["matOption"] }, { kind: "ngmodule", type: MatSelectModule }, { kind: "component", type: i5$2.MatSelect, selector: "mat-select", inputs: ["disabled", "disableRipple", "tabIndex", "hideSingleSelectionIndicator"], exportAs: ["matSelect"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.3", ngImport: i0, type: SqlDataSelectComponent, decorators: [{
            type: Component,
            args: [{ selector: 'sql-data-select', standalone: true, imports: [CommonModule, FormsModule, MatFormFieldModule,
                        MatInputModule, MatOptionModule, MatSelectModule], template: "<ng-container *ngIf=\"appearance=='fill'\">\n    <ng-container *ngIf=\"native=='Y'\">\n        <!-- New Row -->\n        <div *ngIf=\"bs_row=='Y'\" class=\"row\">\n            <div [class]=\"bs_col\">\n                <p *ngIf=\"top_label=='Y'\">{{ label }}</p>\n                <mat-form-field appearance=\"fill\" [style]=\"style\" [class]=\"class\">\n                    <mat-label>{{ label }}</mat-label>\n                    <select [(ngModel)]=\"value\" (change)=\"handleChange()\" matNativeControl [style]=\"style\" [class]=\"class\">\n                      <option *ngFor=\"let m of selectData\" [value]=\"m.id\">{{ m.option }}</option>\n                    </select>\n                  </mat-form-field>\n            </div>\n        </div>\n        <!-- No New Row but column -->\n        <span *ngIf=\"bs_row!='Y'&&bs_col!=''\">\n            <div [class]=\"bs_col\">\n                <p *ngIf=\"top_label=='Y'\">{{ label }}</p>\n                <mat-form-field appearance=\"fill\" [style]=\"style\" [class]=\"class\">\n                    <mat-label>{{ label }}</mat-label>\n                    <select [(ngModel)]=\"value\"  matNativeControl (change)=\"handleChange()\" [style]=\"style\" [class]=\"class\">\n                      <option *ngFor=\"let m of selectData\" [value]=\"m.id\">{{ m.option }}</option>\n                    </select>\n                  </mat-form-field>\n            </div>\n          </span>\n        <!-- No New Row and no column -->\n        <span *ngIf=\"bs_row!='Y'&&bs_col==''\">\n            <p *ngIf=\"top_label=='Y'\">{{ label }}</p>\n            <mat-form-field appearance=\"fill\" [style]=\"style\" [class]=\"class\">\n                <mat-label>{{ label }}</mat-label>\n                <select  [(ngModel)]=\"value\" matNativeControl (change)=\"handleChange()\" [style]=\"style\" [class]=\"class\">\n                  <option *ngFor=\"let m of selectData\" [value]=\"m.id\">{{ m.option }}</option>\n                </select>\n              </mat-form-field>\n            </span>\n          </ng-container>\n    <span *ngIf=\"native=='N'\">\n        <!-- New Row -->\n        <div *ngIf=\"bs_row=='Y'\" class=\"row\">\n            <div [class]=\"bs_col\">\n                <p *ngIf=\"top_label=='Y'\">{{ label }}</p>\n                <mat-form-field appearance=\"fill\" [style]=\"style\" [class]=\"class\">\n                    <mat-label>{{ label }}</mat-label>\n                    <mat-select  [(ngModel)]=\"value\" (selectionChange)=\"handleChange()\" [style]=\"style\" [class]=\"class\">\n                      <mat-option *ngFor=\"let m of selectData\" [value]=\"m.id\">\n                        {{ m.option }}\n                      </mat-option>\n                    </mat-select>\n                  </mat-form-field>\n            </div>\n        </div>\n        <!-- No New Row but column -->\n        <span *ngIf=\"bs_row!='Y'&&bs_col!=''\">\n            <div [class]=\"bs_col\">\n                <p *ngIf=\"top_label=='Y'\">{{ label }}</p>\n                <mat-form-field appearance=\"fill\"  [style]=\"style\" [class]=\"class\">\n                    <mat-label>{{ label }}</mat-label>\n                    <mat-select  [(ngModel)]=\"value\" (selectionChange)=\"handleChange()\" [style]=\"style\" [class]=\"class\">\n                      <mat-option *ngFor=\"let m of selectData\" [value]=\"m.id\">\n                        {{ m.option }}\n                      </mat-option>\n                    </mat-select>\n                  </mat-form-field>\n            </div>\n          </span>\n        <!-- No New Row and no column -->\n        <span *ngIf=\"bs_row!='Y'&&bs_col==''\">\n            <p *ngIf=\"top_label=='Y'\">{{ label }}</p>\n            <mat-form-field appearance=\"fill\"  [style]=\"style\" [class]=\"class\">\n                <mat-label>{{ label }}</mat-label>\n                <mat-select  [(ngModel)]=\"value\" (selectionChange)=\"handleChange()\" [style]=\"style\" [class]=\"class\">\n                  <mat-option *ngFor=\"let m of selectData\" [value]=\"m.id\"  [style]=\"style\" [class]=\"class\">\n                    {{ m.option }}\n                  </mat-option>\n                </mat-select>\n              </mat-form-field>\n            </span>\n          </span>\n</ng-container>\n<!-- OUTLINE Style -->\n<ng-container *ngIf=\"appearance=='outline'\">\n<ng-container *ngIf=\"native=='Y'\">\n    <!-- New Row -->\n    <div *ngIf=\"bs_row=='Y'\" class=\"row\">\n        <div [class]=\"bs_col\">\n            <p *ngIf=\"top_label=='Y'\">{{ label }}</p>\n            <mat-form-field appearance=\"outline\" [style]=\"style\" [class]=\"class\">\n                <mat-label>{{ label }}</mat-label>\n                <select  [(ngModel)]=\"value\" matNativeControl  (change)=\"handleChange()\" [style]=\"style\" [class]=\"class\">\n                  <option *ngFor=\"let m of selectData\" [value]=\"m.id\">{{ m.option }}</option>\n                </select>\n              </mat-form-field>\n        </div>\n    </div>\n    <!-- No New Row but column -->\n    <span *ngIf=\"bs_row!='Y'&&bs_col!=''\">\n        <div [class]=\"bs_col\">\n            <p *ngIf=\"top_label=='Y'\">{{ label }}</p>\n            <mat-form-field appearance=\"outline\" [style]=\"style\" [class]=\"class\">\n                <mat-label>{{ label }}</mat-label>\n                <select  [(ngModel)]=\"value\" matNativeControl  (change)=\"handleChange()\" [style]=\"style\" [class]=\"class\">\n                  <option *ngFor=\"let m of selectData\" [value]=\"m.id\">{{ m.option }}</option>\n                </select>\n              </mat-form-field>\n        </div>\n    </span>\n    <!-- No New Row and no column -->\n    <ng-container *ngIf=\"bs_row!='Y'&&bs_col==''\">\n        <p *ngIf=\"top_label=='Y'\">{{ label }}</p>\n        <mat-form-field appearance=\"outline\" [style]=\"style\" [class]=\"class\">\n            <mat-label>{{ label }}</mat-label>\n            <select  [(ngModel)]=\"value\" matNativeControl  (change)=\"handleChange()\" [style]=\"style\" [class]=\"class\">\n              <option *ngFor=\"let m of selectData\" [value]=\"m.id\">{{ m.option }}</option>\n            </select>\n          </mat-form-field>\n        </ng-container>\n      </ng-container>\n<ng-container *ngIf=\"native=='N'\">\n    <!-- New Row -->\n    <div *ngIf=\"bs_row=='Y'\" class=\"row\">\n        <div [class]=\"bs_col\">\n            <p *ngIf=\"top_label=='Y'\">{{ label }}</p>\n            <mat-form-field appearance=\"fill\"  [style]=\"style\" [class]=\"class\">\n                <mat-label>{{ label }}</mat-label>\n                <mat-select  [(ngModel)]=\"value\"  (selectionChange)=\"handleChange()\" [style]=\"style\" [class]=\"class\">\n                  <mat-option *ngFor=\"let m of selectData\" [value]=\"m.id\">\n                    {{ m.option }}\n                  </mat-option>\n                </mat-select>\n              </mat-form-field>\n        </div>\n    </div>\n    <!-- No New Row but column -->\n    <ng-container *ngIf=\"bs_row!='Y'&&bs_col!=''\">\n        <div [class]=\"bs_col\">\n            <p *ngIf=\"top_label=='Y'\">{{ label }}</p>\n            <mat-form-field appearance=\"outline\"  [style]=\"style\" [class]=\"class\">\n                <mat-label>{{ label }}</mat-label>\n                <mat-select  [(ngModel)]=\"value\"  (selectionChange)=\"handleChange()\" [style]=\"style\" [class]=\"class\">\n                  <mat-option *ngFor=\"let m of selectData\" [value]=\"m.id\">\n                    {{ m.option }}\n                  </mat-option>\n                </mat-select>\n              </mat-form-field>\n        </div>\n      </ng-container>\n    <!-- No New Row and no column -->\n    <ng-container *ngIf=\"bs_row!='Y'&&bs_col==''\">\n        <p *ngIf=\"top_label=='Y'\">{{ label }}</p>\n        <mat-form-field appearance=\"outline\"  [style]=\"style\" [class]=\"class\">\n            <mat-label>{{ label }}</mat-label>\n            <mat-select  [(ngModel)]=\"value\"  (selectionChange)=\"handleChange()\" [style]=\"style\" [class]=\"class\">\n              <mat-option *ngFor=\"let m of selectData\" [value]=\"m.id\">\n                {{ m.option }}\n              </mat-option>\n            </mat-select>\n          </mat-form-field>\n        </ng-container>\n      </ng-container>\n    </ng-container>\n" }]
        }], ctorParameters: function () { return [{ type: SQLDataService }]; }, propDecorators: { appearance: [{
                type: Input
            }], native: [{
                type: Input
            }], sql: [{
                type: Input
            }], handler: [{
                type: Input
            }], col: [{
                type: Input
            }], data: [{
                type: Input
            }], id: [{
                type: Input
            }], id2: [{
                type: Input
            }], id3: [{
                type: Input
            }], class: [{
                type: Input
            }], style: [{
                type: Input
            }], hint: [{
                type: Input
            }], icon: [{
                type: Input
            }], label: [{
                type: Input
            }], placeholder: [{
                type: Input
            }], bs_row: [{
                type: Input
            }], bs_col: [{
                type: Input
            }], top_label: [{
                type: Input
            }], change: [{
                type: Output
            }] } });

class SqlDefaultValueComponent {
    constructor(_dataService) {
        this._dataService = _dataService;
        this.col = '';
        this.value = '';
        this.myObs = this._dataService.dataSubject.subscribe(d => {
            this.data = d;
        });
    }
    ngAfterViewInit() {
        console.log('sql-default-value');
        console.log(this.value);
        console.log(this.col);
        setTimeout(() => {
            this.data[this.col] = this.value;
            console.log('sql-default-value: timer');
            console.log(this.data);
            this._dataService.dataSubject.next(this.data);
        }, 1000);
    }
    ngOnDestroy() {
        this.myObs.unsubscribe();
    }
}
SqlDefaultValueComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.3", ngImport: i0, type: SqlDefaultValueComponent, deps: [{ token: SQLDataService }], target: i0.ɵɵFactoryTarget.Component });
SqlDefaultValueComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.3", type: SqlDefaultValueComponent, isStandalone: true, selector: "sql-default-value", inputs: { col: "col", value: "value" }, ngImport: i0, template: "", styles: [""], dependencies: [{ kind: "ngmodule", type: CommonModule }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.3", ngImport: i0, type: SqlDefaultValueComponent, decorators: [{
            type: Component,
            args: [{ selector: 'sql-default-value', standalone: true, imports: [CommonModule], template: "" }]
        }], ctorParameters: function () { return [{ type: SQLDataService }]; }, propDecorators: { col: [{
                type: Input
            }], value: [{
                type: Input
            }] } });

class PreInsertTriggerComponent {
    constructor(_dataService) {
        this._dataService = _dataService;
        this.name = 'pre-insert';
        this.sql = '';
        this.order = '0';
    }
    ngOnDestroy() {
        this.myObs.unsubscribe();
    }
    ngOnChanges(changes) {
    }
    registerService() {
        let count = 0;
        this.myObs = this._dataService.dataSubject.subscribe(d => {
            this.data = d;
            if (this.data.triggers === undefined) {
                let t = [];
                this.data.triggers = t;
            }
            count = 0;
            this.data.triggers.forEach((element) => {
                if (element.type == 'pre-insert-trigger' && element.name == this.name) {
                    count++;
                }
            });
            if (count == 0) {
                let tr = { type: 'pre-insert-trigger', name: this.name, sql: this.sql, order: this.order };
                this.data.triggers.push(tr);
                this._dataService.dataSubject.next(this.data);
            }
        });
    }
    ngAfterViewInit() {
        setTimeout(() => {
            this.registerService();
        }, 1000);
    }
}
PreInsertTriggerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.3", ngImport: i0, type: PreInsertTriggerComponent, deps: [{ token: SQLDataService }], target: i0.ɵɵFactoryTarget.Component });
PreInsertTriggerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.3", type: PreInsertTriggerComponent, isStandalone: true, selector: "pre-insert-trigger", inputs: { name: "name", sql: "sql", order: "order" }, usesOnChanges: true, ngImport: i0, template: "", styles: [""], dependencies: [{ kind: "ngmodule", type: CommonModule }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.3", ngImport: i0, type: PreInsertTriggerComponent, decorators: [{
            type: Component,
            args: [{ selector: 'pre-insert-trigger', standalone: true, imports: [CommonModule], template: "" }]
        }], ctorParameters: function () { return [{ type: SQLDataService }]; }, propDecorators: { name: [{
                type: Input
            }], sql: [{
                type: Input
            }], order: [{
                type: Input
            }] } });

class PreUpdateTriggerComponent {
    constructor(_dataService) {
        this._dataService = _dataService;
        this.name = 'pre-insert';
        this.sql = '';
        this.order = '0';
    }
    ngOnDestroy() {
        this.myObs.unsubscribe();
    }
    ngOnChanges(changes) {
    }
    registerService() {
        let count = 0;
        this.myObs = this._dataService.dataSubject.subscribe(d => {
            this.data = d;
            if (this.data.triggers === undefined) {
                let t = [];
                this.data.triggers = t;
            }
            count = 0;
            this.data.triggers.forEach((element) => {
                if (element.type == 'pre-update-trigger' && element.name == this.name) {
                    count++;
                }
            });
            if (count == 0) {
                let tr = { type: 'pre-update-trigger', name: this.name, sql: this.sql, order: this.order };
                this.data.triggers.push(tr);
                this._dataService.dataSubject.next(this.data);
            }
        });
    }
    ngAfterViewInit() {
        setTimeout(() => {
            this.registerService();
        }, 1000);
    }
}
PreUpdateTriggerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.3", ngImport: i0, type: PreUpdateTriggerComponent, deps: [{ token: SQLDataService }], target: i0.ɵɵFactoryTarget.Component });
PreUpdateTriggerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.3", type: PreUpdateTriggerComponent, isStandalone: true, selector: "pre-update-trigger", inputs: { name: "name", sql: "sql", order: "order" }, usesOnChanges: true, ngImport: i0, template: "", styles: [""], dependencies: [{ kind: "ngmodule", type: CommonModule }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.3", ngImport: i0, type: PreUpdateTriggerComponent, decorators: [{
            type: Component,
            args: [{ selector: 'pre-update-trigger', standalone: true, imports: [CommonModule], template: "" }]
        }], ctorParameters: function () { return [{ type: SQLDataService }]; }, propDecorators: { name: [{
                type: Input
            }], sql: [{
                type: Input
            }], order: [{
                type: Input
            }] } });

class PostInsertTriggerComponent {
    constructor(_dataService) {
        this._dataService = _dataService;
        this.name = 'pre-insert';
        this.sql = '';
        this.order = '0';
    }
    ngOnDestroy() {
        //   this.myObs.unsubscribe();
    }
    ngOnChanges(changes) {
    }
    registerService() {
        let count = 0;
        this.myObs = this._dataService.dataSubject.subscribe(d => {
            this.data = d;
            if (this.data.triggers === undefined) {
                let t = [];
                this.data.triggers = t;
            }
            count = 0;
            this.data.triggers.forEach((element) => {
                if (element.type == 'post-insert-trigger' && element.name == this.name) {
                    count++;
                }
            });
            if (count == 0) {
                let tr = { type: 'post-insert-trigger', name: this.name, sql: this.sql, order: this.order };
                this.data.triggers.push(tr);
                this._dataService.dataSubject.next(this.data);
            }
        });
    }
    ngAfterViewInit() {
        setTimeout(() => {
            this.registerService();
        }, 1000);
    }
}
PostInsertTriggerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.3", ngImport: i0, type: PostInsertTriggerComponent, deps: [{ token: SQLDataService }], target: i0.ɵɵFactoryTarget.Component });
PostInsertTriggerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.3", type: PostInsertTriggerComponent, isStandalone: true, selector: "post-insert-trigger", inputs: { name: "name", sql: "sql", order: "order" }, usesOnChanges: true, ngImport: i0, template: "", styles: [""], dependencies: [{ kind: "ngmodule", type: CommonModule }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.3", ngImport: i0, type: PostInsertTriggerComponent, decorators: [{
            type: Component,
            args: [{ selector: 'post-insert-trigger', standalone: true, imports: [CommonModule], template: "" }]
        }], ctorParameters: function () { return [{ type: SQLDataService }]; }, propDecorators: { name: [{
                type: Input
            }], sql: [{
                type: Input
            }], order: [{
                type: Input
            }] } });

class SqlDataPreviewComponent {
    constructor(_dataService) {
        this._dataService = _dataService;
        this.format = { title: '', search: '', class: '', style: '', columns: [], buttons: [] };
        this.data = '';
        this.use_parameters = 'N';
        this.function = '';
        this.sql = '';
        this.card = "Y";
        this.card_class = '';
        this.card_style = '';
        this.container_class = 'container-fluid m-2 p-2';
        this.container_style = '';
        this.closable = "N";
        this.bs_row = 'N';
        this.bs_col = '';
        this.list_class = 'table table-striped table-condensed';
        this.list_style = '';
        this.title = 'Title Not Set';
        this.id = '0';
        this.id2 = '0';
        this.id3 = '0';
        this.left = 'col-6';
        this.right = 'col-6';
        this.class = '';
        this.style = "";
        this.row_click = new EventEmitter();
        this.parameters = { page: '', id: '', id2: '', id3: '' };
        this.last_parameters = { page: 'xxx', id: 'xxx', id2: 'xxx', id3: 'xxx' };
        this.adding = 'N';
        this.counter = 0;
        this.page = '';
    }
    ngOnInit() {
    }
    rowClick(m) {
        this.row_click.emit(m);
    }
    ngAfterViewInit() {
        if (this.use_parameters === 'Y') {
            this._dataService.paramSubject.subscribe(d => {
                this.parameters = d;
                this._dataService.getSQL(this.sql, this.parameters).subscribe((data) => {
                    this.list = data;
                    this.list.forEach(function (value) {
                        value.active = 'N';
                    });
                });
            });
        }
        if (this.use_parameters === 'N') {
            this.parameters.page = this.page;
            this.parameters.id = this.id;
            this.parameters.id2 = this.id2;
            this.parameters.id3 = this.id3;
            console.log(this.parameters);
            this._dataService.getSQL(this.sql, this.parameters).subscribe((data) => {
                if (data[0] !== undefined) {
                    this.list = data[0];
                }
            });
        }
        this.format.title = this.title;
        this.format.class = this.class;
        this.format.style = this.style;
        this.row_list.forEach((e) => {
            let column_template = { column_name: '', class: '', type: '', style: '', title: '', value: '' };
            if (e.nativeElement.nodeName == 'TH') {
                column_template.type = "data";
                column_template.value = e.nativeElement.id;
                column_template.title = e.nativeElement.innerHTML;
            }
            if (e.nativeElement.nodeName == 'TD') {
                column_template.type = "boilerplate";
                column_template.value = '';
                column_template.title = e.nativeElement.innerHTML;
            }
            if (e.nativeElement.className !== undefined) {
                column_template.class = e.nativeElement.className;
            }
            column_template.style = e.nativeElement.style.cssText;
            this.format.columns.push(column_template);
        });
        if (this.last_parameters.page != this.parameters.page ||
            this.last_parameters.id != this.parameters.id ||
            this.last_parameters.id2 != this.parameters.id2 ||
            this.last_parameters.id3 != this.parameters.id3) {
            this.last_parameters.page = this.parameters.page;
            this.last_parameters.id = this.parameters.id;
            this.last_parameters.id2 = this.parameters.id2;
            this.last_parameters.id3 = this.parameters.id3;
            console.log("Getting SQL");
            console.log(this.sql);
            console.log(this.parameters);
            this.myDataObs = this._dataService.getSQL(this.sql, this.parameters).subscribe((data) => {
                if (data[0] !== undefined) {
                    this.list = data[0];
                    console.log(this.list);
                }
            });
        }
    }
    tableRefresh() {
        this.myDataObs.unsubscribe();
        this.myDataObs = this._dataService.getSQL(this.sql, this.parameters).subscribe((data) => {
            if (data[0] !== undefined) {
                this.list = data[0];
            }
        });
    }
    ngOnDestroy() {
        //  this.myObs.unsubscribe();
        //  this.myDataObs.unsubscribe();
    }
}
SqlDataPreviewComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.3", ngImport: i0, type: SqlDataPreviewComponent, deps: [{ token: SQLDataService }], target: i0.ɵɵFactoryTarget.Component });
SqlDataPreviewComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.3", type: SqlDataPreviewComponent, isStandalone: true, selector: "sql-data-preview", inputs: { use_parameters: "use_parameters", function: "function", sql: "sql", card: "card", card_class: "card_class", card_style: "card_style", container_class: "container_class", container_style: "container_style", closable: "closable", bs_row: "bs_row", bs_col: "bs_col", list_class: "list_class", list_style: "list_style", title: "title", id: "id", id2: "id2", id3: "id3", left: "left", right: "right", class: "class", style: "style" }, outputs: { row_click: "row_click" }, queries: [{ propertyName: "row_list", predicate: ["row"] }], ngImport: i0, template: "<!-- NOT A CARD FORMAT-->\n<div *ngIf=\"card!='Y'\" [class]=\"container_class\" [style]=\"container_style\">\n        <div class=\"card\">\n                    <ul class=\"list-group list-group-flush\">\n                        <li class=\"list-group-item\" *ngIf=\"format.title!=''\" style=\"background-color: lightgray;\">{{ title }}</li>\n                        <ng-container *ngFor=\"let m of format.columns\">\n                            <li class=\"list-group-item\" *ngIf=\"m.type=='data'\">\n                                <div class=\"row\">\n                                    <div [class]=\"left\">\n                                    <b>{{ m.title }}</b>\n                                    </div>\n                                    <div [class]=\"right\" [innerHTML]=\"list[m.value]\">\n                                    </div>\n                                </div>\n                            </li>  \n                            <li class=\"list-group-item\" *ngIf=\"m.type!='data'\">\n                                <div class=\"row\">\n                                    <div class=\"col-12\">\n                                    <b>{{ m.title }}</b>\n                                    </div>\n                                </div>\n                            </li>    \n                        </ng-container>     \n                    </ul>\n        </div>              \n</div>\n<div *ngIf=\"card=='Y'\" [class]=\"container_class\" [style]=\"container_style\">\n    <div class=\"card\">\n        <div class=\"card-header\">\n          {{ title }}\n        </div>\n        <div *ngIf=\"adding=='Y'\" class=\"card-body\">\n\n        </div>\n        <div class=\"card-body\">\n            <ul class=\"list-group list-group-flush\">\n                <ng-container *ngFor=\"let m of format.columns\">\n                    <li class=\"list-group-item\" *ngIf=\"m.type=='data'\" class=\"p-2\">\n                        <div class=\"row\">\n                            <div [class]=\"left\">\n                            <b>{{ m.title }}</b>\n                            </div>\n                            <div [class]=\"right\" [innerHTML]=\"list[m.value]\">\n                            </div>\n                        </div>\n                    </li>  \n                    <li class=\"list-group-item\" *ngIf=\"m.type!='data'\" class=\"p-2\">\n                        <div class=\"row\">\n                            <div class=\"col-12\">\n                            <b>{{ m.title }}</b>\n                            </div>\n                        </div>\n                    </li>    \n                </ng-container>     \n            </ul>\n        </div>\n      </div>\n</div>", styles: [""], dependencies: [{ kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "ngmodule", type: FormsModule }, { kind: "ngmodule", type: NgxTablePaginationModule }, { kind: "ngmodule", type: Ng2SearchPipeModule }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.3", ngImport: i0, type: SqlDataPreviewComponent, decorators: [{
            type: Component,
            args: [{ selector: 'sql-data-preview', standalone: true, imports: [CommonModule,
                        FormsModule,
                        NgxTablePaginationModule,
                        Ng2SearchPipeModule], template: "<!-- NOT A CARD FORMAT-->\n<div *ngIf=\"card!='Y'\" [class]=\"container_class\" [style]=\"container_style\">\n        <div class=\"card\">\n                    <ul class=\"list-group list-group-flush\">\n                        <li class=\"list-group-item\" *ngIf=\"format.title!=''\" style=\"background-color: lightgray;\">{{ title }}</li>\n                        <ng-container *ngFor=\"let m of format.columns\">\n                            <li class=\"list-group-item\" *ngIf=\"m.type=='data'\">\n                                <div class=\"row\">\n                                    <div [class]=\"left\">\n                                    <b>{{ m.title }}</b>\n                                    </div>\n                                    <div [class]=\"right\" [innerHTML]=\"list[m.value]\">\n                                    </div>\n                                </div>\n                            </li>  \n                            <li class=\"list-group-item\" *ngIf=\"m.type!='data'\">\n                                <div class=\"row\">\n                                    <div class=\"col-12\">\n                                    <b>{{ m.title }}</b>\n                                    </div>\n                                </div>\n                            </li>    \n                        </ng-container>     \n                    </ul>\n        </div>              \n</div>\n<div *ngIf=\"card=='Y'\" [class]=\"container_class\" [style]=\"container_style\">\n    <div class=\"card\">\n        <div class=\"card-header\">\n          {{ title }}\n        </div>\n        <div *ngIf=\"adding=='Y'\" class=\"card-body\">\n\n        </div>\n        <div class=\"card-body\">\n            <ul class=\"list-group list-group-flush\">\n                <ng-container *ngFor=\"let m of format.columns\">\n                    <li class=\"list-group-item\" *ngIf=\"m.type=='data'\" class=\"p-2\">\n                        <div class=\"row\">\n                            <div [class]=\"left\">\n                            <b>{{ m.title }}</b>\n                            </div>\n                            <div [class]=\"right\" [innerHTML]=\"list[m.value]\">\n                            </div>\n                        </div>\n                    </li>  \n                    <li class=\"list-group-item\" *ngIf=\"m.type!='data'\" class=\"p-2\">\n                        <div class=\"row\">\n                            <div class=\"col-12\">\n                            <b>{{ m.title }}</b>\n                            </div>\n                        </div>\n                    </li>    \n                </ng-container>     \n            </ul>\n        </div>\n      </div>\n</div>" }]
        }], ctorParameters: function () { return [{ type: SQLDataService }]; }, propDecorators: { row_list: [{
                type: ContentChildren,
                args: ['row']
            }], use_parameters: [{
                type: Input
            }], function: [{
                type: Input
            }], sql: [{
                type: Input
            }], card: [{
                type: Input
            }], card_class: [{
                type: Input
            }], card_style: [{
                type: Input
            }], container_class: [{
                type: Input
            }], container_style: [{
                type: Input
            }], closable: [{
                type: Input
            }], bs_row: [{
                type: Input
            }], bs_col: [{
                type: Input
            }], list_class: [{
                type: Input
            }], list_style: [{
                type: Input
            }], title: [{
                type: Input
            }], id: [{
                type: Input
            }], id2: [{
                type: Input
            }], id3: [{
                type: Input
            }], left: [{
                type: Input
            }], right: [{
                type: Input
            }], class: [{
                type: Input
            }], style: [{
                type: Input
            }], row_click: [{
                type: Output
            }] } });

class SqlDataPreview2Component {
    constructor(_dataService) {
        this._dataService = _dataService;
        this.format = { title: '', search: '', class: '', style: '', left_column: [], right_column: [], buttons: [] };
        this.data = '';
        this.use_parameters = 'N';
        this.function = '';
        this.sql = '';
        this.card = "Y";
        this.card_class = '';
        this.card_style = '';
        this.container_class = 'container-fluid m-2 p-2';
        this.container_style = '';
        this.closable = "N";
        this.bs_row = 'N';
        this.bs_col = '';
        this.list_class = 'table table-striped table-condensed';
        this.list_style = '';
        this.title = 'Title Not Set';
        this.id = '0';
        this.id2 = '0';
        this.id3 = '0';
        this.left = 'col-6';
        this.right = 'col-6';
        this.class = '';
        this.style = "";
        this.row_click = new EventEmitter();
        this.parameters = { page: '', id: '', id2: '', id3: '' };
        this.last_parameters = { page: 'xxx', id: 'xxx', id2: 'xxx', id3: 'xxx' };
        this.counter = 0;
        this.page = '';
        this.adding = 'N';
    }
    ngOnInit() {
    }
    rowClick(m) {
        this.row_click.emit(m);
    }
    ngAfterViewInit() {
        if (this.use_parameters === 'Y') {
            this._dataService.paramSubject.subscribe(d => {
                this.parameters = d;
                this._dataService.getSQL(this.sql, this.parameters).subscribe((data) => {
                    this.list = data;
                    this.list.forEach(function (value) {
                        value.active = 'N';
                    });
                });
            });
        }
        if (this.use_parameters === 'N') {
            this.parameters.page = this.page;
            this.parameters.id = this.id;
            this.parameters.id2 = this.id2;
            this.parameters.id3 = this.id3;
            console.log(this.parameters);
            this._dataService.getSQL(this.sql, this.parameters).subscribe((data) => {
                if (data[0] !== undefined) {
                    this.list = data[0];
                }
            });
        }
        this.format.title = this.title;
        this.format.class = this.class;
        this.format.style = this.style;
        this.left_row_list.forEach((e) => {
            let left_column_template = { column_name: '', class: '', type: '', style: '', title: '', value: '' };
            if (e.nativeElement.nodeName == 'TH') {
                left_column_template.type = "data";
                left_column_template.value = e.nativeElement.id;
                left_column_template.title = e.nativeElement.innerHTML;
            }
            if (e.nativeElement.nodeName == 'TD') {
                left_column_template.type = "boilerplate";
                left_column_template.value = '';
                left_column_template.title = e.nativeElement.innerHTML;
            }
            if (e.nativeElement.className !== undefined) {
                left_column_template.class = e.nativeElement.className;
            }
            left_column_template.style = e.nativeElement.style.cssText;
            this.format.left_column.push(left_column_template);
        });
        this.right_row_list.forEach((e) => {
            let right_column_template = { column_name: '', class: '', type: '', style: '', title: '', value: '' };
            if (e.nativeElement.nodeName == 'TH') {
                right_column_template.type = "data";
                right_column_template.value = e.nativeElement.id;
                right_column_template.title = e.nativeElement.innerHTML;
            }
            if (e.nativeElement.nodeName == 'TD') {
                right_column_template.type = "boilerplate";
                right_column_template.value = '';
                right_column_template.title = e.nativeElement.innerHTML;
            }
            if (e.nativeElement.className !== undefined) {
                right_column_template.class = e.nativeElement.className;
            }
            right_column_template.style = e.nativeElement.style.cssText;
            this.format.right_column.push(right_column_template);
        });
        if (this.last_parameters.page != this.parameters.page ||
            this.last_parameters.id != this.parameters.id ||
            this.last_parameters.id2 != this.parameters.id2 ||
            this.last_parameters.id3 != this.parameters.id3) {
            this.last_parameters.page = this.parameters.page;
            this.last_parameters.id = this.parameters.id;
            this.last_parameters.id2 = this.parameters.id2;
            this.last_parameters.id3 = this.parameters.id3;
            console.log("Getting SQL");
            console.log(this.sql);
            console.log(this.parameters);
            this.myDataObs = this._dataService.getSQL(this.sql, this.parameters).subscribe((data) => {
                if (data[0] !== undefined) {
                    this.list = data[0];
                    console.log(this.list);
                }
            });
        }
    }
    tableRefresh() {
        this.myDataObs.unsubscribe();
        this.myDataObs = this._dataService.getSQL(this.sql, this.parameters).subscribe((data) => {
            if (data[0] !== undefined) {
                this.list = data[0];
            }
        });
    }
    ngOnDestroy() {
        this.myObs.unsubscribe();
        this.myDataObs.unsubscribe();
    }
}
SqlDataPreview2Component.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.3", ngImport: i0, type: SqlDataPreview2Component, deps: [{ token: SQLDataService }], target: i0.ɵɵFactoryTarget.Component });
SqlDataPreview2Component.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.3", type: SqlDataPreview2Component, isStandalone: true, selector: "lib-sql-data-preview2", inputs: { use_parameters: "use_parameters", function: "function", sql: "sql", card: "card", card_class: "card_class", card_style: "card_style", container_class: "container_class", container_style: "container_style", closable: "closable", bs_row: "bs_row", bs_col: "bs_col", list_class: "list_class", list_style: "list_style", title: "title", id: "id", id2: "id2", id3: "id3", left: "left", right: "right", class: "class", style: "style" }, outputs: { row_click: "row_click" }, queries: [{ propertyName: "left_row_list", predicate: ["left"] }, { propertyName: "right_row_list", predicate: ["right"] }], ngImport: i0, template: "<!-- NOT A CARD FORMAT-->\n<div *ngIf=\"card!='Y'\" [class]=\"container_class\" [style]=\"container_style\">\n    <div class=\"card\">\n                <ul class=\"list-group list-group-flush\">\n                    <li class=\"list-group-item\" *ngIf=\"format.title!=''\" style=\"background-color: lightgray;\">{{ title }}</li>\n                    <li class=\"list-group-item\" *ngIf=\"format.title!=''\">\n                        <div class=\"row\">\n                            <div class=\"col-6\">\n                                <ul class=\"list-group list-group-flush\">\n                                    <ng-container *ngFor=\"let m of format.left_column\">\n                                        <li class=\"list-group-item\" *ngIf=\"m.type=='data'\">\n                                            <div class=\"row\">\n                                                <div [class]=\"left\">\n                                                <b>{{ m.title }}</b>\n                                                </div>\n                                                <div [class]=\"right\" [innerHTML]=\"list[m.value]\">\n                                                </div>\n                                            </div>\n                                        </li>  \n                                        <li class=\"list-group-item\" *ngIf=\"m.type!='data'\">\n                                            <div class=\"row\">\n                                                <div class=\"col-12\">\n                                                <b>{{ m.title }}</b>\n                                                </div>\n                                            </div>\n                                        </li>    \n                                    </ng-container>     \n                                </ul>\n                            </div>\n                            <div class=\"col-6\">\n                                <ul class=\"list-group list-group-flush\">\n                                    <ng-container *ngFor=\"let m of format.right_column\">\n                                        <li class=\"list-group-item\" *ngIf=\"m.type=='data'\">\n                                            <div class=\"row\">\n                                                <div [class]=\"left\">\n                                                <b>{{ m.title }}</b>\n                                                </div>\n                                                <div [class]=\"right\" [innerHTML]=\"list[m.value]\">\n                                                </div>\n                                            </div>\n                                        </li>  \n                                        <li class=\"list-group-item\" *ngIf=\"m.type!='data'\">\n                                            <div class=\"row\">\n                                                <div class=\"col-12\">\n                                                <b>{{ m.title }}</b>\n                                                </div>\n                                            </div>\n                                        </li>    \n                                    </ng-container>     \n                                </ul>\n                            </div>                            \n                        </div>\n                    </li>\n                </ul>\n    </div>              \n</div>\n<div *ngIf=\"card=='Y'\" [class]=\"container_class\" [style]=\"container_style\">\n<div class=\"card\">\n    <div class=\"card-header\">\n      {{ title }}\n    </div>\n    <div class=\"card-body\">\n        <div class=\"row\">\n            <div class=\"col-6\">\n                <ul class=\"list-group list-group-flush\">\n                    <ng-container *ngFor=\"let m of format.left_column\">\n                        <li class=\"list-group-item\" *ngIf=\"m.type=='data'\" class=\"p-2\">\n                            <div class=\"row\">\n                                <div [class]=\"left\">\n                                <b>{{ m.title }}</b>\n                                </div>\n                                <div [class]=\"right\" [innerHTML]=\"list[m.value]\">\n                                </div>\n                            </div>\n                        </li>  \n                        <li class=\"list-group-item\" *ngIf=\"m.type!='data'\" class=\"p-2\">\n                            <div class=\"row\">\n                                <div class=\"col-12\">\n                                <b>{{ m.title }}</b>\n                                </div>\n                            </div>\n                        </li>    \n                    </ng-container>     \n                </ul>\n            </div>\n            <div class=\"col-6\">\n                <ul class=\"list-group list-group-flush\">\n                    <ng-container *ngFor=\"let m of format.right_column\">\n                        <li class=\"list-group-item\" *ngIf=\"m.type=='data'\" class=\"p-2\">\n                            <div class=\"row\">\n                                <div [class]=\"left\">\n                                <b>{{ m.title }}</b>\n                                </div>\n                                <div [class]=\"right\" [innerHTML]=\"list[m.value]\">\n                                </div>\n                            </div>\n                        </li>  \n                        <li class=\"list-group-item\" *ngIf=\"m.type!='data'\" class=\"p-2\">\n                            <div class=\"row\">\n                                <div class=\"col-12\">\n                                <b>{{ m.title }}</b>\n                                </div>\n                            </div>\n                        </li>    \n                    </ng-container>     \n                </ul>\n            </div>            \n        </div>\n    </div>\n  </div>\n</div>", styles: [""], dependencies: [{ kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "ngmodule", type: FormsModule }, { kind: "ngmodule", type: NgxTablePaginationModule }, { kind: "ngmodule", type: Ng2SearchPipeModule }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.3", ngImport: i0, type: SqlDataPreview2Component, decorators: [{
            type: Component,
            args: [{ selector: 'lib-sql-data-preview2', standalone: true, imports: [CommonModule,
                        FormsModule,
                        NgxTablePaginationModule,
                        Ng2SearchPipeModule], template: "<!-- NOT A CARD FORMAT-->\n<div *ngIf=\"card!='Y'\" [class]=\"container_class\" [style]=\"container_style\">\n    <div class=\"card\">\n                <ul class=\"list-group list-group-flush\">\n                    <li class=\"list-group-item\" *ngIf=\"format.title!=''\" style=\"background-color: lightgray;\">{{ title }}</li>\n                    <li class=\"list-group-item\" *ngIf=\"format.title!=''\">\n                        <div class=\"row\">\n                            <div class=\"col-6\">\n                                <ul class=\"list-group list-group-flush\">\n                                    <ng-container *ngFor=\"let m of format.left_column\">\n                                        <li class=\"list-group-item\" *ngIf=\"m.type=='data'\">\n                                            <div class=\"row\">\n                                                <div [class]=\"left\">\n                                                <b>{{ m.title }}</b>\n                                                </div>\n                                                <div [class]=\"right\" [innerHTML]=\"list[m.value]\">\n                                                </div>\n                                            </div>\n                                        </li>  \n                                        <li class=\"list-group-item\" *ngIf=\"m.type!='data'\">\n                                            <div class=\"row\">\n                                                <div class=\"col-12\">\n                                                <b>{{ m.title }}</b>\n                                                </div>\n                                            </div>\n                                        </li>    \n                                    </ng-container>     \n                                </ul>\n                            </div>\n                            <div class=\"col-6\">\n                                <ul class=\"list-group list-group-flush\">\n                                    <ng-container *ngFor=\"let m of format.right_column\">\n                                        <li class=\"list-group-item\" *ngIf=\"m.type=='data'\">\n                                            <div class=\"row\">\n                                                <div [class]=\"left\">\n                                                <b>{{ m.title }}</b>\n                                                </div>\n                                                <div [class]=\"right\" [innerHTML]=\"list[m.value]\">\n                                                </div>\n                                            </div>\n                                        </li>  \n                                        <li class=\"list-group-item\" *ngIf=\"m.type!='data'\">\n                                            <div class=\"row\">\n                                                <div class=\"col-12\">\n                                                <b>{{ m.title }}</b>\n                                                </div>\n                                            </div>\n                                        </li>    \n                                    </ng-container>     \n                                </ul>\n                            </div>                            \n                        </div>\n                    </li>\n                </ul>\n    </div>              \n</div>\n<div *ngIf=\"card=='Y'\" [class]=\"container_class\" [style]=\"container_style\">\n<div class=\"card\">\n    <div class=\"card-header\">\n      {{ title }}\n    </div>\n    <div class=\"card-body\">\n        <div class=\"row\">\n            <div class=\"col-6\">\n                <ul class=\"list-group list-group-flush\">\n                    <ng-container *ngFor=\"let m of format.left_column\">\n                        <li class=\"list-group-item\" *ngIf=\"m.type=='data'\" class=\"p-2\">\n                            <div class=\"row\">\n                                <div [class]=\"left\">\n                                <b>{{ m.title }}</b>\n                                </div>\n                                <div [class]=\"right\" [innerHTML]=\"list[m.value]\">\n                                </div>\n                            </div>\n                        </li>  \n                        <li class=\"list-group-item\" *ngIf=\"m.type!='data'\" class=\"p-2\">\n                            <div class=\"row\">\n                                <div class=\"col-12\">\n                                <b>{{ m.title }}</b>\n                                </div>\n                            </div>\n                        </li>    \n                    </ng-container>     \n                </ul>\n            </div>\n            <div class=\"col-6\">\n                <ul class=\"list-group list-group-flush\">\n                    <ng-container *ngFor=\"let m of format.right_column\">\n                        <li class=\"list-group-item\" *ngIf=\"m.type=='data'\" class=\"p-2\">\n                            <div class=\"row\">\n                                <div [class]=\"left\">\n                                <b>{{ m.title }}</b>\n                                </div>\n                                <div [class]=\"right\" [innerHTML]=\"list[m.value]\">\n                                </div>\n                            </div>\n                        </li>  \n                        <li class=\"list-group-item\" *ngIf=\"m.type!='data'\" class=\"p-2\">\n                            <div class=\"row\">\n                                <div class=\"col-12\">\n                                <b>{{ m.title }}</b>\n                                </div>\n                            </div>\n                        </li>    \n                    </ng-container>     \n                </ul>\n            </div>            \n        </div>\n    </div>\n  </div>\n</div>" }]
        }], ctorParameters: function () { return [{ type: SQLDataService }]; }, propDecorators: { left_row_list: [{
                type: ContentChildren,
                args: ['left']
            }], right_row_list: [{
                type: ContentChildren,
                args: ['right']
            }], use_parameters: [{
                type: Input
            }], function: [{
                type: Input
            }], sql: [{
                type: Input
            }], card: [{
                type: Input
            }], card_class: [{
                type: Input
            }], card_style: [{
                type: Input
            }], container_class: [{
                type: Input
            }], container_style: [{
                type: Input
            }], closable: [{
                type: Input
            }], bs_row: [{
                type: Input
            }], bs_col: [{
                type: Input
            }], list_class: [{
                type: Input
            }], list_style: [{
                type: Input
            }], title: [{
                type: Input
            }], id: [{
                type: Input
            }], id2: [{
                type: Input
            }], id3: [{
                type: Input
            }], left: [{
                type: Input
            }], right: [{
                type: Input
            }], class: [{
                type: Input
            }], style: [{
                type: Input
            }], row_click: [{
                type: Output
            }] } });

class SqlDataPreview3Component {
    constructor(_dataService) {
        this._dataService = _dataService;
        this.format = { title: '', search: '', class: '', style: '', left_column: [], center_column: [], right_column: [], buttons: [] };
        this.data = '';
        this.use_parameters = 'N';
        this.function = '';
        this.sql = '';
        this.card = "Y";
        this.card_class = '';
        this.card_style = '';
        this.container_class = 'container-fluid m-2 p-2';
        this.container_style = '';
        this.closable = "N";
        this.bs_row = 'N';
        this.bs_col = '';
        this.list_class = 'table table-striped table-condensed';
        this.list_style = '';
        this.title = 'Title Not Set';
        this.id = '0';
        this.id2 = '0';
        this.id3 = '0';
        this.left = 'col-6';
        this.right = 'col-6';
        this.class = '';
        this.style = "";
        this.row_click = new EventEmitter();
        this.parameters = { page: '', id: '', id2: '', id3: '' };
        this.last_parameters = { page: 'xxx', id: 'xxx', id2: 'xxx', id3: 'xxx' };
        this.counter = 0;
        this.page = '';
    }
    ngOnInit() {
    }
    rowClick(m) {
        this.row_click.emit(m);
    }
    ngAfterViewInit() {
        if (this.use_parameters === 'Y') {
            this._dataService.paramSubject.subscribe(d => {
                this.parameters = d;
                this._dataService.getSQL(this.sql, this.parameters).subscribe((data) => {
                    this.list = data;
                    this.list.forEach(function (value) {
                        value.active = 'N';
                    });
                });
            });
        }
        if (this.use_parameters === 'N') {
            this.parameters.page = this.page;
            this.parameters.id = this.id;
            this.parameters.id2 = this.id2;
            this.parameters.id3 = this.id3;
            console.log(this.parameters);
            this._dataService.getSQL(this.sql, this.parameters).subscribe((data) => {
                if (data[0] !== undefined) {
                    this.list = data[0];
                }
            });
        }
        this.format.title = this.title;
        this.format.class = this.class;
        this.format.style = this.style;
        this.left_row_list.forEach((e) => {
            let left_column_template = { column_name: '', class: '', type: '', style: '', title: '', value: '' };
            if (e.nativeElement.nodeName == 'TH') {
                left_column_template.type = "data";
                left_column_template.value = e.nativeElement.id;
                left_column_template.title = e.nativeElement.innerHTML;
            }
            if (e.nativeElement.nodeName == 'TD') {
                left_column_template.type = "boilerplate";
                left_column_template.value = '';
                left_column_template.title = e.nativeElement.innerHTML;
            }
            if (e.nativeElement.className !== undefined) {
                left_column_template.class = e.nativeElement.className;
            }
            left_column_template.style = e.nativeElement.style.cssText;
            this.format.left_column.push(left_column_template);
        });
        this.center_row_list.forEach((e) => {
            let center_column_template = { column_name: '', class: '', type: '', style: '', title: '', value: '' };
            if (e.nativeElement.nodeName == 'TH') {
                center_column_template.type = "data";
                center_column_template.value = e.nativeElement.id;
                center_column_template.title = e.nativeElement.innerHTML;
            }
            if (e.nativeElement.nodeName == 'TD') {
                center_column_template.type = "boilerplate";
                center_column_template.value = '';
                center_column_template.title = e.nativeElement.innerHTML;
            }
            if (e.nativeElement.className !== undefined) {
                center_column_template.class = e.nativeElement.className;
            }
            center_column_template.style = e.nativeElement.style.cssText;
            this.format.center_column.push(center_column_template);
        });
        this.right_row_list.forEach((e) => {
            let right_column_template = { column_name: '', class: '', type: '', style: '', title: '', value: '' };
            if (e.nativeElement.nodeName == 'TH') {
                right_column_template.type = "data";
                right_column_template.value = e.nativeElement.id;
                right_column_template.title = e.nativeElement.innerHTML;
            }
            if (e.nativeElement.nodeName == 'TD') {
                right_column_template.type = "boilerplate";
                right_column_template.value = '';
                right_column_template.title = e.nativeElement.innerHTML;
            }
            if (e.nativeElement.className !== undefined) {
                right_column_template.class = e.nativeElement.className;
            }
            right_column_template.style = e.nativeElement.style.cssText;
            this.format.right_column.push(right_column_template);
        });
        if (this.last_parameters.page != this.parameters.page ||
            this.last_parameters.id != this.parameters.id ||
            this.last_parameters.id2 != this.parameters.id2 ||
            this.last_parameters.id3 != this.parameters.id3) {
            this.last_parameters.page = this.parameters.page;
            this.last_parameters.id = this.parameters.id;
            this.last_parameters.id2 = this.parameters.id2;
            this.last_parameters.id3 = this.parameters.id3;
            console.log("Getting SQL");
            console.log(this.sql);
            console.log(this.parameters);
            this.myDataObs = this._dataService.getSQL(this.sql, this.parameters).subscribe((data) => {
                if (data[0] !== undefined) {
                    this.list = data[0];
                    console.log(this.list);
                }
            });
        }
    }
    tableRefresh() {
        this.myDataObs.unsubscribe();
        this.myDataObs = this._dataService.getSQL(this.sql, this.parameters).subscribe((data) => {
            if (data[0] !== undefined) {
                this.list = data[0];
            }
        });
    }
    ngOnDestroy() {
        this.myObs.unsubscribe();
        this.myDataObs.unsubscribe();
    }
}
SqlDataPreview3Component.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.3", ngImport: i0, type: SqlDataPreview3Component, deps: [{ token: SQLDataService }], target: i0.ɵɵFactoryTarget.Component });
SqlDataPreview3Component.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.3", type: SqlDataPreview3Component, isStandalone: true, selector: "lib-sql-data-preview3", inputs: { use_parameters: "use_parameters", function: "function", sql: "sql", card: "card", card_class: "card_class", card_style: "card_style", container_class: "container_class", container_style: "container_style", closable: "closable", bs_row: "bs_row", bs_col: "bs_col", list_class: "list_class", list_style: "list_style", title: "title", id: "id", id2: "id2", id3: "id3", left: "left", right: "right", class: "class", style: "style" }, outputs: { row_click: "row_click" }, queries: [{ propertyName: "left_row_list", predicate: ["left"] }, { propertyName: "center_row_list", predicate: ["right"] }, { propertyName: "right_row_list", predicate: ["right"] }], ngImport: i0, template: "<!-- NOT A CARD FORMAT-->\n<div *ngIf=\"card!='Y'\" [class]=\"container_class\" [style]=\"container_style\">\n    <div class=\"card\">\n                <ul class=\"list-group list-group-flush\">\n                    <li class=\"list-group-item\" *ngIf=\"format.title!=''\" style=\"background-color: lightgray;\">{{ title }}</li>\n                    <li class=\"list-group-item\" *ngIf=\"format.title!=''\">\n                        <div class=\"row\">\n                            <div class=\"col-4\">\n                                <ul class=\"list-group list-group-flush\">\n                                    <ng-container *ngFor=\"let m of format.center_column\">\n                                        <li class=\"list-group-item\" *ngIf=\"m.type=='data'\">\n                                            <div class=\"row\">\n                                                <div [class]=\"left\">\n                                                <b>{{ m.title }}</b>\n                                                </div>\n                                                <div [class]=\"right\" [innerHTML]=\"list[m.value]\">\n                                                </div>\n                                            </div>\n                                        </li>  \n                                        <li class=\"list-group-item\" *ngIf=\"m.type!='data'\">\n                                            <div class=\"row\">\n                                                <div class=\"col-12\">\n                                                <b>{{ m.title }}</b>\n                                                </div>\n                                            </div>\n                                        </li>    \n                                    </ng-container>     \n                                </ul>\n                            </div>\n                            <div class=\"col-4\">\n                                <ul class=\"list-group list-group-flush\">\n                                    <ng-container *ngFor=\"let m of format.center_column\">\n                                        <li class=\"list-group-item\" *ngIf=\"m.type=='data'\">\n                                            <div class=\"row\">\n                                                <div [class]=\"left\">\n                                                <b>{{ m.title }}</b>\n                                                </div>\n                                                <div [class]=\"right\" [innerHTML]=\"list[m.value]\">\n                                                </div>\n                                            </div>\n                                        </li>  \n                                        <li class=\"list-group-item\" *ngIf=\"m.type!='data'\">\n                                            <div class=\"row\">\n                                                <div class=\"col-12\">\n                                                <b>{{ m.title }}</b>\n                                                </div>\n                                            </div>\n                                        </li>    \n                                    </ng-container>     \n                                </ul>\n                            </div>                            \n                            <div class=\"col-4\">\n                                <ul class=\"list-group list-group-flush\">\n                                    <ng-container *ngFor=\"let m of format.right_column\">\n                                        <li class=\"list-group-item\" *ngIf=\"m.type=='data'\">\n                                            <div class=\"row\">\n                                                <div [class]=\"left\">\n                                                <b>{{ m.title }}</b>\n                                                </div>\n                                                <div [class]=\"right\" [innerHTML]=\"list[m.value]\">\n                                                </div>\n                                            </div>\n                                        </li>  \n                                        <li class=\"list-group-item\" *ngIf=\"m.type!='data'\">\n                                            <div class=\"row\">\n                                                <div class=\"col-12\">\n                                                <b>{{ m.title }}</b>\n                                                </div>\n                                            </div>\n                                        </li>    \n                                    </ng-container>     \n                                </ul>\n                            </div>                            \n                        </div>\n                    </li>\n                </ul>\n    </div>              \n</div>\n<div *ngIf=\"card=='Y'\" [class]=\"container_class\" [style]=\"container_style\">\n<div class=\"card\">\n    <div class=\"card-header\">\n      {{ title }}\n    </div>\n    <div class=\"card-body\">\n        <div class=\"row\">\n            <div class=\"col-6\">\n                <ul class=\"list-group list-group-flush\">\n                    <ng-container *ngFor=\"let m of format.left_column\">\n                        <li class=\"list-group-item\" *ngIf=\"m.type=='data'\" class=\"p-2\">\n                            <div class=\"row\">\n                                <div [class]=\"left\">\n                                <b>{{ m.title }}</b>\n                                </div>\n                                <div [class]=\"right\" [innerHTML]=\"list[m.value]\">\n                                </div>\n                            </div>\n                        </li>  \n                        <li class=\"list-group-item\" *ngIf=\"m.type!='data'\" class=\"p-2\">\n                            <div class=\"row\">\n                                <div class=\"col-12\">\n                                <b>{{ m.title }}</b>\n                                </div>\n                            </div>\n                        </li>    \n                    </ng-container>     \n                </ul>\n            </div>\n            <div class=\"col-6\">\n                <ul class=\"list-group list-group-flush\">\n                    <ng-container *ngFor=\"let m of format.right_column\">\n                        <li class=\"list-group-item\" *ngIf=\"m.type=='data'\" class=\"p-2\">\n                            <div class=\"row\">\n                                <div [class]=\"left\">\n                                <b>{{ m.title }}</b>\n                                </div>\n                                <div [class]=\"right\" [innerHTML]=\"list[m.value]\">\n                                </div>\n                            </div>\n                        </li>  \n                        <li class=\"list-group-item\" *ngIf=\"m.type!='data'\" class=\"p-2\">\n                            <div class=\"row\">\n                                <div class=\"col-12\">\n                                <b>{{ m.title }}</b>\n                                </div>\n                            </div>\n                        </li>    \n                    </ng-container>     \n                </ul>\n            </div>            \n        </div>\n    </div>\n  </div>\n</div>", styles: [""], dependencies: [{ kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "ngmodule", type: FormsModule }, { kind: "ngmodule", type: NgxTablePaginationModule }, { kind: "ngmodule", type: Ng2SearchPipeModule }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.3", ngImport: i0, type: SqlDataPreview3Component, decorators: [{
            type: Component,
            args: [{ selector: 'lib-sql-data-preview3', standalone: true, imports: [CommonModule,
                        FormsModule,
                        NgxTablePaginationModule,
                        Ng2SearchPipeModule], template: "<!-- NOT A CARD FORMAT-->\n<div *ngIf=\"card!='Y'\" [class]=\"container_class\" [style]=\"container_style\">\n    <div class=\"card\">\n                <ul class=\"list-group list-group-flush\">\n                    <li class=\"list-group-item\" *ngIf=\"format.title!=''\" style=\"background-color: lightgray;\">{{ title }}</li>\n                    <li class=\"list-group-item\" *ngIf=\"format.title!=''\">\n                        <div class=\"row\">\n                            <div class=\"col-4\">\n                                <ul class=\"list-group list-group-flush\">\n                                    <ng-container *ngFor=\"let m of format.center_column\">\n                                        <li class=\"list-group-item\" *ngIf=\"m.type=='data'\">\n                                            <div class=\"row\">\n                                                <div [class]=\"left\">\n                                                <b>{{ m.title }}</b>\n                                                </div>\n                                                <div [class]=\"right\" [innerHTML]=\"list[m.value]\">\n                                                </div>\n                                            </div>\n                                        </li>  \n                                        <li class=\"list-group-item\" *ngIf=\"m.type!='data'\">\n                                            <div class=\"row\">\n                                                <div class=\"col-12\">\n                                                <b>{{ m.title }}</b>\n                                                </div>\n                                            </div>\n                                        </li>    \n                                    </ng-container>     \n                                </ul>\n                            </div>\n                            <div class=\"col-4\">\n                                <ul class=\"list-group list-group-flush\">\n                                    <ng-container *ngFor=\"let m of format.center_column\">\n                                        <li class=\"list-group-item\" *ngIf=\"m.type=='data'\">\n                                            <div class=\"row\">\n                                                <div [class]=\"left\">\n                                                <b>{{ m.title }}</b>\n                                                </div>\n                                                <div [class]=\"right\" [innerHTML]=\"list[m.value]\">\n                                                </div>\n                                            </div>\n                                        </li>  \n                                        <li class=\"list-group-item\" *ngIf=\"m.type!='data'\">\n                                            <div class=\"row\">\n                                                <div class=\"col-12\">\n                                                <b>{{ m.title }}</b>\n                                                </div>\n                                            </div>\n                                        </li>    \n                                    </ng-container>     \n                                </ul>\n                            </div>                            \n                            <div class=\"col-4\">\n                                <ul class=\"list-group list-group-flush\">\n                                    <ng-container *ngFor=\"let m of format.right_column\">\n                                        <li class=\"list-group-item\" *ngIf=\"m.type=='data'\">\n                                            <div class=\"row\">\n                                                <div [class]=\"left\">\n                                                <b>{{ m.title }}</b>\n                                                </div>\n                                                <div [class]=\"right\" [innerHTML]=\"list[m.value]\">\n                                                </div>\n                                            </div>\n                                        </li>  \n                                        <li class=\"list-group-item\" *ngIf=\"m.type!='data'\">\n                                            <div class=\"row\">\n                                                <div class=\"col-12\">\n                                                <b>{{ m.title }}</b>\n                                                </div>\n                                            </div>\n                                        </li>    \n                                    </ng-container>     \n                                </ul>\n                            </div>                            \n                        </div>\n                    </li>\n                </ul>\n    </div>              \n</div>\n<div *ngIf=\"card=='Y'\" [class]=\"container_class\" [style]=\"container_style\">\n<div class=\"card\">\n    <div class=\"card-header\">\n      {{ title }}\n    </div>\n    <div class=\"card-body\">\n        <div class=\"row\">\n            <div class=\"col-6\">\n                <ul class=\"list-group list-group-flush\">\n                    <ng-container *ngFor=\"let m of format.left_column\">\n                        <li class=\"list-group-item\" *ngIf=\"m.type=='data'\" class=\"p-2\">\n                            <div class=\"row\">\n                                <div [class]=\"left\">\n                                <b>{{ m.title }}</b>\n                                </div>\n                                <div [class]=\"right\" [innerHTML]=\"list[m.value]\">\n                                </div>\n                            </div>\n                        </li>  \n                        <li class=\"list-group-item\" *ngIf=\"m.type!='data'\" class=\"p-2\">\n                            <div class=\"row\">\n                                <div class=\"col-12\">\n                                <b>{{ m.title }}</b>\n                                </div>\n                            </div>\n                        </li>    \n                    </ng-container>     \n                </ul>\n            </div>\n            <div class=\"col-6\">\n                <ul class=\"list-group list-group-flush\">\n                    <ng-container *ngFor=\"let m of format.right_column\">\n                        <li class=\"list-group-item\" *ngIf=\"m.type=='data'\" class=\"p-2\">\n                            <div class=\"row\">\n                                <div [class]=\"left\">\n                                <b>{{ m.title }}</b>\n                                </div>\n                                <div [class]=\"right\" [innerHTML]=\"list[m.value]\">\n                                </div>\n                            </div>\n                        </li>  \n                        <li class=\"list-group-item\" *ngIf=\"m.type!='data'\" class=\"p-2\">\n                            <div class=\"row\">\n                                <div class=\"col-12\">\n                                <b>{{ m.title }}</b>\n                                </div>\n                            </div>\n                        </li>    \n                    </ng-container>     \n                </ul>\n            </div>            \n        </div>\n    </div>\n  </div>\n</div>" }]
        }], ctorParameters: function () { return [{ type: SQLDataService }]; }, propDecorators: { left_row_list: [{
                type: ContentChildren,
                args: ['left']
            }], center_row_list: [{
                type: ContentChildren,
                args: ['right']
            }], right_row_list: [{
                type: ContentChildren,
                args: ['right']
            }], use_parameters: [{
                type: Input
            }], function: [{
                type: Input
            }], sql: [{
                type: Input
            }], card: [{
                type: Input
            }], card_class: [{
                type: Input
            }], card_style: [{
                type: Input
            }], container_class: [{
                type: Input
            }], container_style: [{
                type: Input
            }], closable: [{
                type: Input
            }], bs_row: [{
                type: Input
            }], bs_col: [{
                type: Input
            }], list_class: [{
                type: Input
            }], list_style: [{
                type: Input
            }], title: [{
                type: Input
            }], id: [{
                type: Input
            }], id2: [{
                type: Input
            }], id3: [{
                type: Input
            }], left: [{
                type: Input
            }], right: [{
                type: Input
            }], class: [{
                type: Input
            }], style: [{
                type: Input
            }], row_click: [{
                type: Output
            }] } });

class SqlEditPreviewComponent {
    constructor(_dataService) {
        this._dataService = _dataService;
        this.format = { title: '', search: '', class: '', style: '', columns: [], buttons: [] };
        this.data = '';
        this.use_parameters = 'N';
        this.function = '';
        this.sql = '';
        this.card = "Y";
        this.card_class = '';
        this.card_style = '';
        this.container_class = 'container-fluid m-2 p-2';
        this.container_style = '';
        this.closable = "N";
        this.bs_row = 'N';
        this.bs_col = '';
        this.list_class = 'table table-striped table-condensed';
        this.list_style = '';
        this.title = 'Title Not Set';
        this.id = '0';
        this.id2 = '0';
        this.id3 = '0';
        this.left = 'col-6';
        this.right = 'col-6';
        this.class = '';
        this.style = "";
        this.row_click = new EventEmitter();
        this.parameters = { page: '', id: '', id2: '', id3: '' };
        this.last_parameters = { page: 'xxx', id: 'xxx', id2: 'xxx', id3: 'xxx' };
        this.counter = 0;
        this.page = '';
        this.adding = 'N';
    }
    ngOnInit() {
    }
    rowClick(m) {
        this.row_click.emit(m);
    }
    ngAfterViewInit() {
        if (this.use_parameters === 'Y') {
            this._dataService.paramSubject.subscribe(d => {
                this.parameters = d;
                this._dataService.getSQL(this.sql, this.parameters).subscribe((data) => {
                    this.list = data;
                    this.list.forEach(function (value) {
                        value.active = 'N';
                    });
                });
            });
        }
        if (this.use_parameters === 'N') {
            this.parameters.page = this.page;
            this.parameters.id = this.id;
            this.parameters.id2 = this.id2;
            this.parameters.id3 = this.id3;
            console.log(this.parameters);
            this._dataService.getSQL(this.sql, this.parameters).subscribe((data) => {
                if (data[0] !== undefined) {
                    this.list = data[0];
                }
            });
        }
        this.format.title = this.title;
        this.format.class = this.class;
        this.format.style = this.style;
        this.row_list.forEach((e) => {
            let column_template = { column_name: '', class: '', type: '', style: '', title: '', value: '' };
            if (e.nativeElement.nodeName == 'TH') {
                column_template.type = "data";
                column_template.value = e.nativeElement.id;
                column_template.title = e.nativeElement.innerHTML;
            }
            if (e.nativeElement.nodeName == 'TD') {
                column_template.type = "boilerplate";
                column_template.value = '';
                column_template.title = e.nativeElement.innerHTML;
            }
            if (e.nativeElement.className !== undefined) {
                column_template.class = e.nativeElement.className;
            }
            column_template.style = e.nativeElement.style.cssText;
            this.format.columns.push(column_template);
        });
        if (this.last_parameters.page != this.parameters.page ||
            this.last_parameters.id != this.parameters.id ||
            this.last_parameters.id2 != this.parameters.id2 ||
            this.last_parameters.id3 != this.parameters.id3) {
            this.last_parameters.page = this.parameters.page;
            this.last_parameters.id = this.parameters.id;
            this.last_parameters.id2 = this.parameters.id2;
            this.last_parameters.id3 = this.parameters.id3;
            console.log("Getting SQL");
            console.log(this.sql);
            console.log(this.parameters);
            this.myDataObs = this._dataService.getSQL(this.sql, this.parameters).subscribe((data) => {
                if (data[0] !== undefined) {
                    this.list = data[0];
                    console.log(this.list);
                }
            });
        }
    }
    tableRefresh() {
        this.myDataObs.unsubscribe();
        this.myDataObs = this._dataService.getSQL(this.sql, this.parameters).subscribe((data) => {
            if (data[0] !== undefined) {
                this.list = data[0];
            }
        });
    }
    addClick() {
        let p = { id: '', id2: '', id3: '' };
        if (this.adding === 'Y') {
            this.adding = 'N';
        }
        else {
            this.adding = 'Y';
        }
    }
    ngOnDestroy() {
        this.myObs.unsubscribe();
        this.myDataObs.unsubscribe();
    }
}
SqlEditPreviewComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.3", ngImport: i0, type: SqlEditPreviewComponent, deps: [{ token: SQLDataService }], target: i0.ɵɵFactoryTarget.Component });
SqlEditPreviewComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.3", type: SqlEditPreviewComponent, isStandalone: true, selector: "lib-sql-edit-preview", inputs: { use_parameters: "use_parameters", function: "function", sql: "sql", card: "card", card_class: "card_class", card_style: "card_style", container_class: "container_class", container_style: "container_style", closable: "closable", bs_row: "bs_row", bs_col: "bs_col", list_class: "list_class", list_style: "list_style", title: "title", id: "id", id2: "id2", id3: "id3", left: "left", right: "right", class: "class", style: "style" }, outputs: { row_click: "row_click" }, queries: [{ propertyName: "row_list", predicate: ["row"] }], ngImport: i0, template: "<!-- NOT A CARD FORMAT-->\n<div *ngIf=\"card!='Y'\" [class]=\"container_class\" [style]=\"container_style\">\n    <div class=\"card\">\n                <ul class=\"list-group list-group-flush\">\n                    <li class=\"list-group-item\" style=\"background-color: lightgray;\">\n                        <div class=\"row\" style=\"width:100%;\">\n                            <div class=\"col-md-9\">\n                                <h2>{{ title }}</h2>\n                            </div>\n                            <div class=\"col-md-3\" style=\"text-align: right;\">\n                                <button (click)=\"addClick()\" class=\"btn btn-primary\"><i class=\"bi bi-plus-square\"></i></button>\n                            </div>\n                        </div>\n                    </li>\n                    <ng-container *ngIf=\"adding=='N'\">\n                    <ng-container *ngFor=\"let m of format.columns\">\n                        <li class=\"list-group-item\" *ngIf=\"m.type=='data'\">\n                            <div class=\"row\">\n                                <div [class]=\"left\">\n                                <b>{{ m.title }}</b>\n                                </div>\n                                <div [class]=\"right\" [innerHTML]=\"list[m.value]\">\n                                </div>\n                            </div>\n                        </li>  \n                        <li class=\"list-group-item\" *ngIf=\"m.type!='data'\">\n                            <div class=\"row\">\n                                <div class=\"col-12\">\n                                <b>{{ m.title }}</b>\n                                </div>\n                            </div>\n                        </li>    \n                    </ng-container>     \n                </ng-container>\n                </ul>\n    </div>              \n</div>\n<div *ngIf=\"card=='Y'\" [class]=\"container_class\" [style]=\"container_style\">\n<div class=\"card\">\n    <div class=\"card-header\">\n        <div class=\"row\" style=\"width:100%;\">\n            <div class=\"col-md-9\">\n                <h2>{{ title }}</h2>\n            </div>\n            <div class=\"col-md-3\" style=\"text-align: right;\">\n                <button (click)=\"addClick()\" class=\"btn btn-primary\"><i class=\"bi bi-plus-square\"></i></button>\n            </div>\n        </div>\n    </div>\n    <div class=\"card-body\">\n        <div *ngIf=\"adding=='Y'\" class=\"row\">\n            <div class=\"col-12\">\n                <ng-container *ngTemplateOutlet=\"contentTmpl\"></ng-container>\n            </div>\n            <div class=\"col-12\" style=\"text-align: right;\">\n                <button (click)=\"addClick()\" class=\"btn btn-secondary\">Close</button>\n            </div>\n        </div>\n        <ul *ngIf=\"adding=='N'\"  class=\"list-group list-group-flush\">\n            <ng-container *ngFor=\"let m of format.columns\">\n                <li class=\"list-group-item\" *ngIf=\"m.type=='data'\" class=\"p-2\">\n                    <div class=\"row\">\n                        <div [class]=\"left\">\n                        <b>{{ m.title }}</b>\n                        </div>\n                        <div [class]=\"right\" [innerHTML]=\"list[m.value]\">\n                        </div>\n                    </div>\n                </li>  \n                <li class=\"list-group-item\" *ngIf=\"m.type!='data'\" class=\"p-2\">\n                    <div class=\"row\">\n                        <div class=\"col-12\">\n                        <b>{{ m.title }}</b>\n                        </div>\n                    </div>\n                </li>    \n            </ng-container>     \n        </ul>\n    </div>\n  </div>\n</div>\n<ng-template #contentTmpl>\n    <ng-content select=\"[form]\"></ng-content>\n</ng-template>\n", styles: [""], dependencies: [{ kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i2.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "ngmodule", type: FormsModule }, { kind: "ngmodule", type: NgxTablePaginationModule }, { kind: "ngmodule", type: Ng2SearchPipeModule }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.3", ngImport: i0, type: SqlEditPreviewComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lib-sql-edit-preview', standalone: true, imports: [CommonModule,
                        FormsModule,
                        NgxTablePaginationModule,
                        Ng2SearchPipeModule], template: "<!-- NOT A CARD FORMAT-->\n<div *ngIf=\"card!='Y'\" [class]=\"container_class\" [style]=\"container_style\">\n    <div class=\"card\">\n                <ul class=\"list-group list-group-flush\">\n                    <li class=\"list-group-item\" style=\"background-color: lightgray;\">\n                        <div class=\"row\" style=\"width:100%;\">\n                            <div class=\"col-md-9\">\n                                <h2>{{ title }}</h2>\n                            </div>\n                            <div class=\"col-md-3\" style=\"text-align: right;\">\n                                <button (click)=\"addClick()\" class=\"btn btn-primary\"><i class=\"bi bi-plus-square\"></i></button>\n                            </div>\n                        </div>\n                    </li>\n                    <ng-container *ngIf=\"adding=='N'\">\n                    <ng-container *ngFor=\"let m of format.columns\">\n                        <li class=\"list-group-item\" *ngIf=\"m.type=='data'\">\n                            <div class=\"row\">\n                                <div [class]=\"left\">\n                                <b>{{ m.title }}</b>\n                                </div>\n                                <div [class]=\"right\" [innerHTML]=\"list[m.value]\">\n                                </div>\n                            </div>\n                        </li>  \n                        <li class=\"list-group-item\" *ngIf=\"m.type!='data'\">\n                            <div class=\"row\">\n                                <div class=\"col-12\">\n                                <b>{{ m.title }}</b>\n                                </div>\n                            </div>\n                        </li>    \n                    </ng-container>     \n                </ng-container>\n                </ul>\n    </div>              \n</div>\n<div *ngIf=\"card=='Y'\" [class]=\"container_class\" [style]=\"container_style\">\n<div class=\"card\">\n    <div class=\"card-header\">\n        <div class=\"row\" style=\"width:100%;\">\n            <div class=\"col-md-9\">\n                <h2>{{ title }}</h2>\n            </div>\n            <div class=\"col-md-3\" style=\"text-align: right;\">\n                <button (click)=\"addClick()\" class=\"btn btn-primary\"><i class=\"bi bi-plus-square\"></i></button>\n            </div>\n        </div>\n    </div>\n    <div class=\"card-body\">\n        <div *ngIf=\"adding=='Y'\" class=\"row\">\n            <div class=\"col-12\">\n                <ng-container *ngTemplateOutlet=\"contentTmpl\"></ng-container>\n            </div>\n            <div class=\"col-12\" style=\"text-align: right;\">\n                <button (click)=\"addClick()\" class=\"btn btn-secondary\">Close</button>\n            </div>\n        </div>\n        <ul *ngIf=\"adding=='N'\"  class=\"list-group list-group-flush\">\n            <ng-container *ngFor=\"let m of format.columns\">\n                <li class=\"list-group-item\" *ngIf=\"m.type=='data'\" class=\"p-2\">\n                    <div class=\"row\">\n                        <div [class]=\"left\">\n                        <b>{{ m.title }}</b>\n                        </div>\n                        <div [class]=\"right\" [innerHTML]=\"list[m.value]\">\n                        </div>\n                    </div>\n                </li>  \n                <li class=\"list-group-item\" *ngIf=\"m.type!='data'\" class=\"p-2\">\n                    <div class=\"row\">\n                        <div class=\"col-12\">\n                        <b>{{ m.title }}</b>\n                        </div>\n                    </div>\n                </li>    \n            </ng-container>     \n        </ul>\n    </div>\n  </div>\n</div>\n<ng-template #contentTmpl>\n    <ng-content select=\"[form]\"></ng-content>\n</ng-template>\n" }]
        }], ctorParameters: function () { return [{ type: SQLDataService }]; }, propDecorators: { row_list: [{
                type: ContentChildren,
                args: ['row']
            }], use_parameters: [{
                type: Input
            }], function: [{
                type: Input
            }], sql: [{
                type: Input
            }], card: [{
                type: Input
            }], card_class: [{
                type: Input
            }], card_style: [{
                type: Input
            }], container_class: [{
                type: Input
            }], container_style: [{
                type: Input
            }], closable: [{
                type: Input
            }], bs_row: [{
                type: Input
            }], bs_col: [{
                type: Input
            }], list_class: [{
                type: Input
            }], list_style: [{
                type: Input
            }], title: [{
                type: Input
            }], id: [{
                type: Input
            }], id2: [{
                type: Input
            }], id3: [{
                type: Input
            }], left: [{
                type: Input
            }], right: [{
                type: Input
            }], class: [{
                type: Input
            }], style: [{
                type: Input
            }], row_click: [{
                type: Output
            }] } });

class SqlEditPreview2Component {
    constructor(_dataService) {
        this._dataService = _dataService;
        this.format = { title: '', search: '', class: '', style: '', left_column: [], right_column: [], buttons: [] };
        this.data = '';
        this.use_parameters = 'N';
        this.function = '';
        this.sql = '';
        this.card = "Y";
        this.card_class = '';
        this.card_style = '';
        this.container_class = 'container-fluid m-2 p-2';
        this.container_style = '';
        this.closable = "N";
        this.bs_row = 'N';
        this.bs_col = '';
        this.list_class = 'table table-striped table-condensed';
        this.list_style = '';
        this.title = 'Title Not Set';
        this.id = '0';
        this.id2 = '0';
        this.id3 = '0';
        this.left = 'col-6';
        this.right = 'col-6';
        this.class = '';
        this.style = "";
        this.row_click = new EventEmitter();
        this.parameters = { page: '', id: '', id2: '', id3: '' };
        this.last_parameters = { page: 'xxx', id: 'xxx', id2: 'xxx', id3: 'xxx' };
        this.counter = 0;
        this.page = '';
        this.adding = 'N';
    }
    ngOnInit() {
    }
    rowClick(m) {
        this.row_click.emit(m);
    }
    addClick() {
        let p = { id: '', id2: '', id3: '' };
        if (this.adding === 'Y') {
            this.adding = 'N';
        }
        else {
            this.adding = 'Y';
        }
    }
    ngAfterViewInit() {
        if (this.use_parameters === 'Y') {
            this._dataService.paramSubject.subscribe(d => {
                this.parameters = d;
                this._dataService.getSQL(this.sql, this.parameters).subscribe((data) => {
                    this.list = data;
                    this.list.forEach(function (value) {
                        value.active = 'N';
                    });
                });
            });
        }
        if (this.use_parameters === 'N') {
            this.parameters.page = this.page;
            this.parameters.id = this.id;
            this.parameters.id2 = this.id2;
            this.parameters.id3 = this.id3;
            console.log(this.parameters);
            this._dataService.getSQL(this.sql, this.parameters).subscribe((data) => {
                if (data[0] !== undefined) {
                    this.list = data[0];
                }
            });
        }
        this.format.title = this.title;
        this.format.class = this.class;
        this.format.style = this.style;
        this.left_row_list.forEach((e) => {
            let left_column_template = { column_name: '', class: '', type: '', style: '', title: '', value: '' };
            if (e.nativeElement.nodeName == 'TH') {
                left_column_template.type = "data";
                left_column_template.value = e.nativeElement.id;
                left_column_template.title = e.nativeElement.innerHTML;
            }
            if (e.nativeElement.nodeName == 'TD') {
                left_column_template.type = "boilerplate";
                left_column_template.value = '';
                left_column_template.title = e.nativeElement.innerHTML;
            }
            if (e.nativeElement.className !== undefined) {
                left_column_template.class = e.nativeElement.className;
            }
            left_column_template.style = e.nativeElement.style.cssText;
            this.format.left_column.push(left_column_template);
        });
        this.right_row_list.forEach((e) => {
            let right_column_template = { column_name: '', class: '', type: '', style: '', title: '', value: '' };
            if (e.nativeElement.nodeName == 'TH') {
                right_column_template.type = "data";
                right_column_template.value = e.nativeElement.id;
                right_column_template.title = e.nativeElement.innerHTML;
            }
            if (e.nativeElement.nodeName == 'TD') {
                right_column_template.type = "boilerplate";
                right_column_template.value = '';
                right_column_template.title = e.nativeElement.innerHTML;
            }
            if (e.nativeElement.className !== undefined) {
                right_column_template.class = e.nativeElement.className;
            }
            right_column_template.style = e.nativeElement.style.cssText;
            this.format.right_column.push(right_column_template);
        });
        if (this.last_parameters.page != this.parameters.page ||
            this.last_parameters.id != this.parameters.id ||
            this.last_parameters.id2 != this.parameters.id2 ||
            this.last_parameters.id3 != this.parameters.id3) {
            this.last_parameters.page = this.parameters.page;
            this.last_parameters.id = this.parameters.id;
            this.last_parameters.id2 = this.parameters.id2;
            this.last_parameters.id3 = this.parameters.id3;
            console.log("Getting SQL");
            console.log(this.sql);
            console.log(this.parameters);
            this.myDataObs = this._dataService.getSQL(this.sql, this.parameters).subscribe((data) => {
                if (data[0] !== undefined) {
                    this.list = data[0];
                    console.log(this.list);
                }
            });
        }
    }
    tableRefresh() {
        this.myDataObs.unsubscribe();
        this.myDataObs = this._dataService.getSQL(this.sql, this.parameters).subscribe((data) => {
            if (data[0] !== undefined) {
                this.list = data[0];
            }
        });
    }
    ngOnDestroy() {
        this.myObs.unsubscribe();
        this.myDataObs.unsubscribe();
    }
}
SqlEditPreview2Component.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.3", ngImport: i0, type: SqlEditPreview2Component, deps: [{ token: SQLDataService }], target: i0.ɵɵFactoryTarget.Component });
SqlEditPreview2Component.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.3", type: SqlEditPreview2Component, isStandalone: true, selector: "lib-sql-edit-preview2", inputs: { use_parameters: "use_parameters", function: "function", sql: "sql", card: "card", card_class: "card_class", card_style: "card_style", container_class: "container_class", container_style: "container_style", closable: "closable", bs_row: "bs_row", bs_col: "bs_col", list_class: "list_class", list_style: "list_style", title: "title", id: "id", id2: "id2", id3: "id3", left: "left", right: "right", class: "class", style: "style" }, outputs: { row_click: "row_click" }, queries: [{ propertyName: "left_row_list", predicate: ["left"] }, { propertyName: "right_row_list", predicate: ["right"] }], ngImport: i0, template: "<!-- NOT A CARD FORMAT-->\n<div *ngIf=\"card!='Y'\" [class]=\"container_class\" [style]=\"container_style\">\n    <div class=\"card\">\n                <ul class=\"list-group list-group-flush\">\n                    <li class=\"list-group-item\" style=\"background-color: lightgray;\">\n                        <div class=\"row\" style=\"width:100%;\">\n                            <div class=\"col-md-9\">\n                                <h2>{{ title }}</h2>\n                            </div>\n                            <div class=\"col-md-3\" style=\"text-align: right;\">\n                                <button (click)=\"addClick()\" class=\"btn btn-primary\"><i class=\"bi bi-plus-square\"></i></button>\n                            </div>\n                        </div>\n                    </li>\n                    <div *ngIf=\"adding=='Y'\" class=\"row\">\n                        <div class=\"col-12\">\n                            <ng-container *ngTemplateOutlet=\"contentTmpl\"></ng-container>\n                        </div>\n                        <div class=\"col-12\" style=\"text-align: right;\">\n                            <button (click)=\"addClick()\" class=\"btn btn-secondary\">Close</button>\n                        </div>\n                    </div>\n                    <li class=\"list-group-item\" *ngIf=\"adding!='Y'\">\n                        <div class=\"row\">\n                            <div class=\"col-6\">\n                                <ul class=\"list-group list-group-flush\">\n                                    <ng-container *ngFor=\"let m of format.left_column\">\n                                        <li class=\"list-group-item\" *ngIf=\"m.type=='data'\">\n                                            <div class=\"row\">\n                                                <div [class]=\"left\">\n                                                <b>{{ m.title }}</b>\n                                                </div>\n                                                <div [class]=\"right\" [innerHTML]=\"list[m.value]\">\n                                                </div>\n                                            </div>\n                                        </li>  \n                                        <li class=\"list-group-item\" *ngIf=\"m.type!='data'\">\n                                            <div class=\"row\">\n                                                <div class=\"col-12\">\n                                                <b>{{ m.title }}</b>\n                                                </div>\n                                            </div>\n                                        </li>    \n                                    </ng-container>     \n                                </ul>\n                            </div>\n                            <div class=\"col-6\">\n                                <ul class=\"list-group list-group-flush\">\n                                    <ng-container *ngFor=\"let m of format.right_column\">\n                                        <li class=\"list-group-item\" *ngIf=\"m.type=='data'\">\n                                            <div class=\"row\">\n                                                <div [class]=\"left\">\n                                                <b>{{ m.title }}</b>\n                                                </div>\n                                                <div [class]=\"right\" [innerHTML]=\"list[m.value]\">\n                                                </div>\n                                            </div>\n                                        </li>  \n                                        <li class=\"list-group-item\" *ngIf=\"m.type!='data'\">\n                                            <div class=\"row\">\n                                                <div class=\"col-12\">\n                                                <b>{{ m.title }}</b>\n                                                </div>\n                                            </div>\n                                        </li>    \n                                    </ng-container>     \n                                </ul>\n                            </div>                            \n                        </div>\n                    </li>\n                </ul>\n    </div>              \n</div>\n<div *ngIf=\"card=='Y'\" [class]=\"container_class\" [style]=\"container_style\">\n<div class=\"card\">\n    <div class=\"card-header\">\n        <div class=\"row\" style=\"width:100%;\">\n            <div class=\"col-md-9\">\n                <h2>{{ title }}</h2>\n            </div>\n            <div class=\"col-md-3\" style=\"text-align: right;\">\n                <button (click)=\"addClick()\" class=\"btn btn-primary\"><i class=\"bi bi-plus-square\"></i></button>\n            </div>\n        </div>\n    </div>\n    <div class=\"card-body\">\n        <div *ngIf=\"adding=='Y'\" class=\"row\">\n            <div class=\"col-12\">\n                <ng-container *ngTemplateOutlet=\"contentTmpl\"></ng-container>\n            </div>\n            <div class=\"col-12\" style=\"text-align: right;\">\n                <button (click)=\"addClick()\" class=\"btn btn-secondary\">Close</button>\n            </div>\n        </div>\n        <div class=\"row\">\n            <div class=\"col-6\">\n                <ul class=\"list-group list-group-flush\">\n                    <ng-container *ngFor=\"let m of format.left_column\">\n                        <li class=\"list-group-item\" *ngIf=\"m.type=='data'\" class=\"p-2\">\n                            <div class=\"row\">\n                                <div [class]=\"left\">\n                                <b>{{ m.title }}</b>\n                                </div>\n                                <div [class]=\"right\" [innerHTML]=\"list[m.value]\">\n                                </div>\n                            </div>\n                        </li>  \n                        <li class=\"list-group-item\" *ngIf=\"m.type!='data'\" class=\"p-2\">\n                            <div class=\"row\">\n                                <div class=\"col-12\">\n                                <b>{{ m.title }}</b>\n                                </div>\n                            </div>\n                        </li>    \n                    </ng-container>     \n                </ul>\n            </div>\n            <div class=\"col-6\">\n                <ul class=\"list-group list-group-flush\">\n                    <ng-container *ngFor=\"let m of format.right_column\">\n                        <li class=\"list-group-item\" *ngIf=\"m.type=='data'\" class=\"p-2\">\n                            <div class=\"row\">\n                                <div [class]=\"left\">\n                                <b>{{ m.title }}</b>\n                                </div>\n                                <div [class]=\"right\" [innerHTML]=\"list[m.value]\">\n                                </div>\n                            </div>\n                        </li>  \n                        <li class=\"list-group-item\" *ngIf=\"m.type!='data'\" class=\"p-2\">\n                            <div class=\"row\">\n                                <div class=\"col-12\">\n                                <b>{{ m.title }}</b>\n                                </div>\n                            </div>\n                        </li>    \n                    </ng-container>     \n                </ul>\n            </div>            \n        </div>\n    </div>\n  </div>\n</div>\n<ng-template #contentTmpl>\n    <ng-content select=\"[form]\"></ng-content>\n</ng-template>\n", styles: [""], dependencies: [{ kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i2.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "ngmodule", type: FormsModule }, { kind: "ngmodule", type: NgxTablePaginationModule }, { kind: "ngmodule", type: Ng2SearchPipeModule }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.3", ngImport: i0, type: SqlEditPreview2Component, decorators: [{
            type: Component,
            args: [{ selector: 'lib-sql-edit-preview2', standalone: true, imports: [CommonModule,
                        FormsModule,
                        NgxTablePaginationModule,
                        Ng2SearchPipeModule], template: "<!-- NOT A CARD FORMAT-->\n<div *ngIf=\"card!='Y'\" [class]=\"container_class\" [style]=\"container_style\">\n    <div class=\"card\">\n                <ul class=\"list-group list-group-flush\">\n                    <li class=\"list-group-item\" style=\"background-color: lightgray;\">\n                        <div class=\"row\" style=\"width:100%;\">\n                            <div class=\"col-md-9\">\n                                <h2>{{ title }}</h2>\n                            </div>\n                            <div class=\"col-md-3\" style=\"text-align: right;\">\n                                <button (click)=\"addClick()\" class=\"btn btn-primary\"><i class=\"bi bi-plus-square\"></i></button>\n                            </div>\n                        </div>\n                    </li>\n                    <div *ngIf=\"adding=='Y'\" class=\"row\">\n                        <div class=\"col-12\">\n                            <ng-container *ngTemplateOutlet=\"contentTmpl\"></ng-container>\n                        </div>\n                        <div class=\"col-12\" style=\"text-align: right;\">\n                            <button (click)=\"addClick()\" class=\"btn btn-secondary\">Close</button>\n                        </div>\n                    </div>\n                    <li class=\"list-group-item\" *ngIf=\"adding!='Y'\">\n                        <div class=\"row\">\n                            <div class=\"col-6\">\n                                <ul class=\"list-group list-group-flush\">\n                                    <ng-container *ngFor=\"let m of format.left_column\">\n                                        <li class=\"list-group-item\" *ngIf=\"m.type=='data'\">\n                                            <div class=\"row\">\n                                                <div [class]=\"left\">\n                                                <b>{{ m.title }}</b>\n                                                </div>\n                                                <div [class]=\"right\" [innerHTML]=\"list[m.value]\">\n                                                </div>\n                                            </div>\n                                        </li>  \n                                        <li class=\"list-group-item\" *ngIf=\"m.type!='data'\">\n                                            <div class=\"row\">\n                                                <div class=\"col-12\">\n                                                <b>{{ m.title }}</b>\n                                                </div>\n                                            </div>\n                                        </li>    \n                                    </ng-container>     \n                                </ul>\n                            </div>\n                            <div class=\"col-6\">\n                                <ul class=\"list-group list-group-flush\">\n                                    <ng-container *ngFor=\"let m of format.right_column\">\n                                        <li class=\"list-group-item\" *ngIf=\"m.type=='data'\">\n                                            <div class=\"row\">\n                                                <div [class]=\"left\">\n                                                <b>{{ m.title }}</b>\n                                                </div>\n                                                <div [class]=\"right\" [innerHTML]=\"list[m.value]\">\n                                                </div>\n                                            </div>\n                                        </li>  \n                                        <li class=\"list-group-item\" *ngIf=\"m.type!='data'\">\n                                            <div class=\"row\">\n                                                <div class=\"col-12\">\n                                                <b>{{ m.title }}</b>\n                                                </div>\n                                            </div>\n                                        </li>    \n                                    </ng-container>     \n                                </ul>\n                            </div>                            \n                        </div>\n                    </li>\n                </ul>\n    </div>              \n</div>\n<div *ngIf=\"card=='Y'\" [class]=\"container_class\" [style]=\"container_style\">\n<div class=\"card\">\n    <div class=\"card-header\">\n        <div class=\"row\" style=\"width:100%;\">\n            <div class=\"col-md-9\">\n                <h2>{{ title }}</h2>\n            </div>\n            <div class=\"col-md-3\" style=\"text-align: right;\">\n                <button (click)=\"addClick()\" class=\"btn btn-primary\"><i class=\"bi bi-plus-square\"></i></button>\n            </div>\n        </div>\n    </div>\n    <div class=\"card-body\">\n        <div *ngIf=\"adding=='Y'\" class=\"row\">\n            <div class=\"col-12\">\n                <ng-container *ngTemplateOutlet=\"contentTmpl\"></ng-container>\n            </div>\n            <div class=\"col-12\" style=\"text-align: right;\">\n                <button (click)=\"addClick()\" class=\"btn btn-secondary\">Close</button>\n            </div>\n        </div>\n        <div class=\"row\">\n            <div class=\"col-6\">\n                <ul class=\"list-group list-group-flush\">\n                    <ng-container *ngFor=\"let m of format.left_column\">\n                        <li class=\"list-group-item\" *ngIf=\"m.type=='data'\" class=\"p-2\">\n                            <div class=\"row\">\n                                <div [class]=\"left\">\n                                <b>{{ m.title }}</b>\n                                </div>\n                                <div [class]=\"right\" [innerHTML]=\"list[m.value]\">\n                                </div>\n                            </div>\n                        </li>  \n                        <li class=\"list-group-item\" *ngIf=\"m.type!='data'\" class=\"p-2\">\n                            <div class=\"row\">\n                                <div class=\"col-12\">\n                                <b>{{ m.title }}</b>\n                                </div>\n                            </div>\n                        </li>    \n                    </ng-container>     \n                </ul>\n            </div>\n            <div class=\"col-6\">\n                <ul class=\"list-group list-group-flush\">\n                    <ng-container *ngFor=\"let m of format.right_column\">\n                        <li class=\"list-group-item\" *ngIf=\"m.type=='data'\" class=\"p-2\">\n                            <div class=\"row\">\n                                <div [class]=\"left\">\n                                <b>{{ m.title }}</b>\n                                </div>\n                                <div [class]=\"right\" [innerHTML]=\"list[m.value]\">\n                                </div>\n                            </div>\n                        </li>  \n                        <li class=\"list-group-item\" *ngIf=\"m.type!='data'\" class=\"p-2\">\n                            <div class=\"row\">\n                                <div class=\"col-12\">\n                                <b>{{ m.title }}</b>\n                                </div>\n                            </div>\n                        </li>    \n                    </ng-container>     \n                </ul>\n            </div>            \n        </div>\n    </div>\n  </div>\n</div>\n<ng-template #contentTmpl>\n    <ng-content select=\"[form]\"></ng-content>\n</ng-template>\n" }]
        }], ctorParameters: function () { return [{ type: SQLDataService }]; }, propDecorators: { left_row_list: [{
                type: ContentChildren,
                args: ['left']
            }], right_row_list: [{
                type: ContentChildren,
                args: ['right']
            }], use_parameters: [{
                type: Input
            }], function: [{
                type: Input
            }], sql: [{
                type: Input
            }], card: [{
                type: Input
            }], card_class: [{
                type: Input
            }], card_style: [{
                type: Input
            }], container_class: [{
                type: Input
            }], container_style: [{
                type: Input
            }], closable: [{
                type: Input
            }], bs_row: [{
                type: Input
            }], bs_col: [{
                type: Input
            }], list_class: [{
                type: Input
            }], list_style: [{
                type: Input
            }], title: [{
                type: Input
            }], id: [{
                type: Input
            }], id2: [{
                type: Input
            }], id3: [{
                type: Input
            }], left: [{
                type: Input
            }], right: [{
                type: Input
            }], class: [{
                type: Input
            }], style: [{
                type: Input
            }], row_click: [{
                type: Output
            }] } });

class SqlEditPreview3Component {
    constructor(_dataService) {
        this._dataService = _dataService;
        this.adding = 'N';
        this.format = { title: '', search: '', class: '', style: '', left_column: [], center_column: [], right_column: [], buttons: [] };
        this.data = '';
        this.use_parameters = 'N';
        this.function = '';
        this.sql = '';
        this.card = "Y";
        this.card_class = '';
        this.card_style = '';
        this.container_class = 'container-fluid m-2 p-2';
        this.container_style = '';
        this.closable = "N";
        this.bs_row = 'N';
        this.bs_col = '';
        this.list_class = 'table table-striped table-condensed';
        this.list_style = '';
        this.title = 'Title Not Set';
        this.id = '0';
        this.id2 = '0';
        this.id3 = '0';
        this.left = 'col-6';
        this.right = 'col-6';
        this.class = '';
        this.style = "";
        this.row_click = new EventEmitter();
        this.parameters = { page: '', id: '', id2: '', id3: '' };
        this.last_parameters = { page: 'xxx', id: 'xxx', id2: 'xxx', id3: 'xxx' };
        this.counter = 0;
        this.page = '';
    }
    ngOnInit() {
    }
    rowClick(m) {
        this.row_click.emit(m);
    }
    ngAfterViewInit() {
        if (this.use_parameters === 'Y') {
            this._dataService.paramSubject.subscribe(d => {
                this.parameters = d;
                this._dataService.getSQL(this.sql, this.parameters).subscribe((data) => {
                    this.list = data;
                    this.list.forEach(function (value) {
                        value.active = 'N';
                    });
                });
            });
        }
        if (this.use_parameters === 'N') {
            this.parameters.page = this.page;
            this.parameters.id = this.id;
            this.parameters.id2 = this.id2;
            this.parameters.id3 = this.id3;
            console.log(this.parameters);
            this._dataService.getSQL(this.sql, this.parameters).subscribe((data) => {
                if (data[0] !== undefined) {
                    this.list = data[0];
                }
            });
        }
        this.format.title = this.title;
        this.format.class = this.class;
        this.format.style = this.style;
        this.left_row_list.forEach((e) => {
            let left_column_template = { column_name: '', class: '', type: '', style: '', title: '', value: '' };
            if (e.nativeElement.nodeName == 'TH') {
                left_column_template.type = "data";
                left_column_template.value = e.nativeElement.id;
                left_column_template.title = e.nativeElement.innerHTML;
            }
            if (e.nativeElement.nodeName == 'TD') {
                left_column_template.type = "boilerplate";
                left_column_template.value = '';
                left_column_template.title = e.nativeElement.innerHTML;
            }
            if (e.nativeElement.className !== undefined) {
                left_column_template.class = e.nativeElement.className;
            }
            left_column_template.style = e.nativeElement.style.cssText;
            this.format.left_column.push(left_column_template);
        });
        this.center_row_list.forEach((e) => {
            let center_column_template = { column_name: '', class: '', type: '', style: '', title: '', value: '' };
            if (e.nativeElement.nodeName == 'TH') {
                center_column_template.type = "data";
                center_column_template.value = e.nativeElement.id;
                center_column_template.title = e.nativeElement.innerHTML;
            }
            if (e.nativeElement.nodeName == 'TD') {
                center_column_template.type = "boilerplate";
                center_column_template.value = '';
                center_column_template.title = e.nativeElement.innerHTML;
            }
            if (e.nativeElement.className !== undefined) {
                center_column_template.class = e.nativeElement.className;
            }
            center_column_template.style = e.nativeElement.style.cssText;
            this.format.center_column.push(center_column_template);
        });
        this.right_row_list.forEach((e) => {
            let right_column_template = { column_name: '', class: '', type: '', style: '', title: '', value: '' };
            if (e.nativeElement.nodeName == 'TH') {
                right_column_template.type = "data";
                right_column_template.value = e.nativeElement.id;
                right_column_template.title = e.nativeElement.innerHTML;
            }
            if (e.nativeElement.nodeName == 'TD') {
                right_column_template.type = "boilerplate";
                right_column_template.value = '';
                right_column_template.title = e.nativeElement.innerHTML;
            }
            if (e.nativeElement.className !== undefined) {
                right_column_template.class = e.nativeElement.className;
            }
            right_column_template.style = e.nativeElement.style.cssText;
            this.format.right_column.push(right_column_template);
        });
        if (this.last_parameters.page != this.parameters.page ||
            this.last_parameters.id != this.parameters.id ||
            this.last_parameters.id2 != this.parameters.id2 ||
            this.last_parameters.id3 != this.parameters.id3) {
            this.last_parameters.page = this.parameters.page;
            this.last_parameters.id = this.parameters.id;
            this.last_parameters.id2 = this.parameters.id2;
            this.last_parameters.id3 = this.parameters.id3;
            console.log("Getting SQL");
            console.log(this.sql);
            console.log(this.parameters);
            this.myDataObs = this._dataService.getSQL(this.sql, this.parameters).subscribe((data) => {
                if (data[0] !== undefined) {
                    this.list = data[0];
                    console.log(this.list);
                }
            });
        }
    }
    addClick() {
        let p = { id: '', id2: '', id3: '' };
        if (this.adding === 'Y') {
            this.adding = 'N';
        }
        else {
            this.adding = 'Y';
        }
    }
    tableRefresh() {
        this.myDataObs.unsubscribe();
        this.myDataObs = this._dataService.getSQL(this.sql, this.parameters).subscribe((data) => {
            if (data[0] !== undefined) {
                this.list = data[0];
            }
        });
    }
    ngOnDestroy() {
        this.myObs.unsubscribe();
        this.myDataObs.unsubscribe();
    }
}
SqlEditPreview3Component.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.3", ngImport: i0, type: SqlEditPreview3Component, deps: [{ token: SQLDataService }], target: i0.ɵɵFactoryTarget.Component });
SqlEditPreview3Component.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.3", type: SqlEditPreview3Component, isStandalone: true, selector: "lib-sql-edit-preview3", inputs: { use_parameters: "use_parameters", function: "function", sql: "sql", card: "card", card_class: "card_class", card_style: "card_style", container_class: "container_class", container_style: "container_style", closable: "closable", bs_row: "bs_row", bs_col: "bs_col", list_class: "list_class", list_style: "list_style", title: "title", id: "id", id2: "id2", id3: "id3", left: "left", right: "right", class: "class", style: "style" }, outputs: { row_click: "row_click" }, queries: [{ propertyName: "left_row_list", predicate: ["left"] }, { propertyName: "center_row_list", predicate: ["right"] }, { propertyName: "right_row_list", predicate: ["right"] }], ngImport: i0, template: "<!-- NOT A CARD FORMAT-->\n<div *ngIf=\"card!='Y'\" [class]=\"container_class\" [style]=\"container_style\">\n    <div class=\"card\">\n                <ul class=\"list-group list-group-flush\">\n                    <li class=\"list-group-item\" *ngIf=\"format.title!=''\" style=\"background-color: lightgray;\">\n                        <div class=\"row\" style=\"width:100%;\">\n                            <div class=\"col-md-9\">\n                                <h2>{{ title }}</h2>\n                            </div>\n                            <div class=\"col-md-3\" style=\"text-align: right;\">\n                                <button (click)=\"addClick()\" class=\"btn btn-primary\"><i class=\"bi bi-plus-square\"></i></button>\n                            </div>\n                        </div>\n                    </li>\n                    <div *ngIf=\"adding=='Y'\" class=\"row\">\n                        <div class=\"col-12\">\n                            <ng-container *ngTemplateOutlet=\"contentTmpl\"></ng-container>\n                        </div>\n                        <div class=\"col-12\" style=\"text-align: right;\">\n                            <button (click)=\"addClick()\" class=\"btn btn-secondary\">Close</button>\n                        </div>\n                    </div>\n                    <li *ngIf=\"adding!='Y'\" class=\"list-group-item\">\n                        <div class=\"row\">\n                            <div class=\"col-4\">\n                                <ul class=\"list-group list-group-flush\">\n                                    <ng-container *ngFor=\"let m of format.center_column\">\n                                        <li class=\"list-group-item\" *ngIf=\"m.type=='data'\">\n                                            <div class=\"row\">\n                                                <div [class]=\"left\">\n                                                <b>{{ m.title }}</b>\n                                                </div>\n                                                <div [class]=\"right\" [innerHTML]=\"list[m.value]\">\n                                                </div>\n                                            </div>\n                                        </li>  \n                                        <li class=\"list-group-item\" *ngIf=\"m.type!='data'\">\n                                            <div class=\"row\">\n                                                <div class=\"col-12\">\n                                                <b>{{ m.title }}</b>\n                                                </div>\n                                            </div>\n                                        </li>    \n                                    </ng-container>     \n                                </ul>\n                            </div>\n                            <div class=\"col-4\">\n                                <ul class=\"list-group list-group-flush\">\n                                    <ng-container *ngFor=\"let m of format.center_column\">\n                                        <li class=\"list-group-item\" *ngIf=\"m.type=='data'\">\n                                            <div class=\"row\">\n                                                <div [class]=\"left\">\n                                                <b>{{ m.title }}</b>\n                                                </div>\n                                                <div [class]=\"right\" [innerHTML]=\"list[m.value]\">\n                                                </div>\n                                            </div>\n                                        </li>  \n                                        <li class=\"list-group-item\" *ngIf=\"m.type!='data'\">\n                                            <div class=\"row\">\n                                                <div class=\"col-12\">\n                                                <b>{{ m.title }}</b>\n                                                </div>\n                                            </div>\n                                        </li>    \n                                    </ng-container>     \n                                </ul>\n                            </div>                            \n                            <div class=\"col-4\">\n                                <ul class=\"list-group list-group-flush\">\n                                    <ng-container *ngFor=\"let m of format.right_column\">\n                                        <li class=\"list-group-item\" *ngIf=\"m.type=='data'\">\n                                            <div class=\"row\">\n                                                <div [class]=\"left\">\n                                                <b>{{ m.title }}</b>\n                                                </div>\n                                                <div [class]=\"right\" [innerHTML]=\"list[m.value]\">\n                                                </div>\n                                            </div>\n                                        </li>  \n                                        <li class=\"list-group-item\" *ngIf=\"m.type!='data'\">\n                                            <div class=\"row\">\n                                                <div class=\"col-12\">\n                                                <b>{{ m.title }}</b>\n                                                </div>\n                                            </div>\n                                        </li>    \n                                    </ng-container>     \n                                </ul>\n                            </div>                            \n                        </div>\n                    </li>\n                </ul>\n    </div>              \n</div>\n<div *ngIf=\"card=='Y'\" [class]=\"container_class\" [style]=\"container_style\">\n<div class=\"card\">\n    <div class=\"card-header\">\n        <div class=\"row\" style=\"width:100%;\">\n            <div class=\"col-md-9\">\n                <h2>{{ title }}</h2>\n            </div>\n            <div class=\"col-md-3\" style=\"text-align: right;\">\n                <button (click)=\"addClick()\" class=\"btn btn-primary\"><i class=\"bi bi-plus-square\"></i></button>\n            </div>\n        </div>\n    </div>\n    <div  *ngIf=\"adding=='Y'\" class=\"card-body\">\n        <div class=\"row\">\n            <div class=\"col-12\">\n                <ng-container *ngTemplateOutlet=\"contentTmpl\"></ng-container>\n            </div>\n        </div>\n    </div>       \n    <div  *ngIf=\"adding!='Y'\" class=\"card-body\">\n        <div class=\"row\">\n            <div class=\"col-6\">\n                <ul class=\"list-group list-group-flush\">\n                    <ng-container *ngFor=\"let m of format.left_column\">\n                        <li class=\"list-group-item\" *ngIf=\"m.type=='data'\" class=\"p-2\">\n                            <div class=\"row\">\n                                <div [class]=\"left\">\n                                <b>{{ m.title }}</b>\n                                </div>\n                                <div [class]=\"right\" [innerHTML]=\"list[m.value]\">\n                                </div>\n                            </div>\n                        </li>  \n                        <li class=\"list-group-item\" *ngIf=\"m.type!='data'\" class=\"p-2\">\n                            <div class=\"row\">\n                                <div class=\"col-12\">\n                                <b>{{ m.title }}</b>\n                                </div>\n                            </div>\n                        </li>    \n                    </ng-container>     \n                </ul>\n            </div>\n            <div class=\"col-6\">\n                <ul class=\"list-group list-group-flush\">\n                    <ng-container *ngFor=\"let m of format.right_column\">\n                        <li class=\"list-group-item\" *ngIf=\"m.type=='data'\" class=\"p-2\">\n                            <div class=\"row\">\n                                <div [class]=\"left\">\n                                <b>{{ m.title }}</b>\n                                </div>\n                                <div [class]=\"right\" [innerHTML]=\"list[m.value]\">\n                                </div>\n                            </div>\n                        </li>  \n                        <li class=\"list-group-item\" *ngIf=\"m.type!='data'\" class=\"p-2\">\n                            <div class=\"row\">\n                                <div class=\"col-12\">\n                                <b>{{ m.title }}</b>\n                                </div>\n                            </div>\n                        </li>    \n                    </ng-container>     \n                </ul>\n            </div>            \n        </div>\n    </div>\n    </div>\n    </div>\n    \n<ng-template #contentTmpl>\n    <ng-content select=\"[form]\"></ng-content>\n</ng-template>\n", styles: [""], dependencies: [{ kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i2.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "ngmodule", type: FormsModule }, { kind: "ngmodule", type: NgxTablePaginationModule }, { kind: "ngmodule", type: Ng2SearchPipeModule }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.3", ngImport: i0, type: SqlEditPreview3Component, decorators: [{
            type: Component,
            args: [{ selector: 'lib-sql-edit-preview3', standalone: true, imports: [CommonModule,
                        FormsModule,
                        NgxTablePaginationModule,
                        Ng2SearchPipeModule], template: "<!-- NOT A CARD FORMAT-->\n<div *ngIf=\"card!='Y'\" [class]=\"container_class\" [style]=\"container_style\">\n    <div class=\"card\">\n                <ul class=\"list-group list-group-flush\">\n                    <li class=\"list-group-item\" *ngIf=\"format.title!=''\" style=\"background-color: lightgray;\">\n                        <div class=\"row\" style=\"width:100%;\">\n                            <div class=\"col-md-9\">\n                                <h2>{{ title }}</h2>\n                            </div>\n                            <div class=\"col-md-3\" style=\"text-align: right;\">\n                                <button (click)=\"addClick()\" class=\"btn btn-primary\"><i class=\"bi bi-plus-square\"></i></button>\n                            </div>\n                        </div>\n                    </li>\n                    <div *ngIf=\"adding=='Y'\" class=\"row\">\n                        <div class=\"col-12\">\n                            <ng-container *ngTemplateOutlet=\"contentTmpl\"></ng-container>\n                        </div>\n                        <div class=\"col-12\" style=\"text-align: right;\">\n                            <button (click)=\"addClick()\" class=\"btn btn-secondary\">Close</button>\n                        </div>\n                    </div>\n                    <li *ngIf=\"adding!='Y'\" class=\"list-group-item\">\n                        <div class=\"row\">\n                            <div class=\"col-4\">\n                                <ul class=\"list-group list-group-flush\">\n                                    <ng-container *ngFor=\"let m of format.center_column\">\n                                        <li class=\"list-group-item\" *ngIf=\"m.type=='data'\">\n                                            <div class=\"row\">\n                                                <div [class]=\"left\">\n                                                <b>{{ m.title }}</b>\n                                                </div>\n                                                <div [class]=\"right\" [innerHTML]=\"list[m.value]\">\n                                                </div>\n                                            </div>\n                                        </li>  \n                                        <li class=\"list-group-item\" *ngIf=\"m.type!='data'\">\n                                            <div class=\"row\">\n                                                <div class=\"col-12\">\n                                                <b>{{ m.title }}</b>\n                                                </div>\n                                            </div>\n                                        </li>    \n                                    </ng-container>     \n                                </ul>\n                            </div>\n                            <div class=\"col-4\">\n                                <ul class=\"list-group list-group-flush\">\n                                    <ng-container *ngFor=\"let m of format.center_column\">\n                                        <li class=\"list-group-item\" *ngIf=\"m.type=='data'\">\n                                            <div class=\"row\">\n                                                <div [class]=\"left\">\n                                                <b>{{ m.title }}</b>\n                                                </div>\n                                                <div [class]=\"right\" [innerHTML]=\"list[m.value]\">\n                                                </div>\n                                            </div>\n                                        </li>  \n                                        <li class=\"list-group-item\" *ngIf=\"m.type!='data'\">\n                                            <div class=\"row\">\n                                                <div class=\"col-12\">\n                                                <b>{{ m.title }}</b>\n                                                </div>\n                                            </div>\n                                        </li>    \n                                    </ng-container>     \n                                </ul>\n                            </div>                            \n                            <div class=\"col-4\">\n                                <ul class=\"list-group list-group-flush\">\n                                    <ng-container *ngFor=\"let m of format.right_column\">\n                                        <li class=\"list-group-item\" *ngIf=\"m.type=='data'\">\n                                            <div class=\"row\">\n                                                <div [class]=\"left\">\n                                                <b>{{ m.title }}</b>\n                                                </div>\n                                                <div [class]=\"right\" [innerHTML]=\"list[m.value]\">\n                                                </div>\n                                            </div>\n                                        </li>  \n                                        <li class=\"list-group-item\" *ngIf=\"m.type!='data'\">\n                                            <div class=\"row\">\n                                                <div class=\"col-12\">\n                                                <b>{{ m.title }}</b>\n                                                </div>\n                                            </div>\n                                        </li>    \n                                    </ng-container>     \n                                </ul>\n                            </div>                            \n                        </div>\n                    </li>\n                </ul>\n    </div>              \n</div>\n<div *ngIf=\"card=='Y'\" [class]=\"container_class\" [style]=\"container_style\">\n<div class=\"card\">\n    <div class=\"card-header\">\n        <div class=\"row\" style=\"width:100%;\">\n            <div class=\"col-md-9\">\n                <h2>{{ title }}</h2>\n            </div>\n            <div class=\"col-md-3\" style=\"text-align: right;\">\n                <button (click)=\"addClick()\" class=\"btn btn-primary\"><i class=\"bi bi-plus-square\"></i></button>\n            </div>\n        </div>\n    </div>\n    <div  *ngIf=\"adding=='Y'\" class=\"card-body\">\n        <div class=\"row\">\n            <div class=\"col-12\">\n                <ng-container *ngTemplateOutlet=\"contentTmpl\"></ng-container>\n            </div>\n        </div>\n    </div>       \n    <div  *ngIf=\"adding!='Y'\" class=\"card-body\">\n        <div class=\"row\">\n            <div class=\"col-6\">\n                <ul class=\"list-group list-group-flush\">\n                    <ng-container *ngFor=\"let m of format.left_column\">\n                        <li class=\"list-group-item\" *ngIf=\"m.type=='data'\" class=\"p-2\">\n                            <div class=\"row\">\n                                <div [class]=\"left\">\n                                <b>{{ m.title }}</b>\n                                </div>\n                                <div [class]=\"right\" [innerHTML]=\"list[m.value]\">\n                                </div>\n                            </div>\n                        </li>  \n                        <li class=\"list-group-item\" *ngIf=\"m.type!='data'\" class=\"p-2\">\n                            <div class=\"row\">\n                                <div class=\"col-12\">\n                                <b>{{ m.title }}</b>\n                                </div>\n                            </div>\n                        </li>    \n                    </ng-container>     \n                </ul>\n            </div>\n            <div class=\"col-6\">\n                <ul class=\"list-group list-group-flush\">\n                    <ng-container *ngFor=\"let m of format.right_column\">\n                        <li class=\"list-group-item\" *ngIf=\"m.type=='data'\" class=\"p-2\">\n                            <div class=\"row\">\n                                <div [class]=\"left\">\n                                <b>{{ m.title }}</b>\n                                </div>\n                                <div [class]=\"right\" [innerHTML]=\"list[m.value]\">\n                                </div>\n                            </div>\n                        </li>  \n                        <li class=\"list-group-item\" *ngIf=\"m.type!='data'\" class=\"p-2\">\n                            <div class=\"row\">\n                                <div class=\"col-12\">\n                                <b>{{ m.title }}</b>\n                                </div>\n                            </div>\n                        </li>    \n                    </ng-container>     \n                </ul>\n            </div>            \n        </div>\n    </div>\n    </div>\n    </div>\n    \n<ng-template #contentTmpl>\n    <ng-content select=\"[form]\"></ng-content>\n</ng-template>\n" }]
        }], ctorParameters: function () { return [{ type: SQLDataService }]; }, propDecorators: { left_row_list: [{
                type: ContentChildren,
                args: ['left']
            }], center_row_list: [{
                type: ContentChildren,
                args: ['right']
            }], right_row_list: [{
                type: ContentChildren,
                args: ['right']
            }], use_parameters: [{
                type: Input
            }], function: [{
                type: Input
            }], sql: [{
                type: Input
            }], card: [{
                type: Input
            }], card_class: [{
                type: Input
            }], card_style: [{
                type: Input
            }], container_class: [{
                type: Input
            }], container_style: [{
                type: Input
            }], closable: [{
                type: Input
            }], bs_row: [{
                type: Input
            }], bs_col: [{
                type: Input
            }], list_class: [{
                type: Input
            }], list_style: [{
                type: Input
            }], title: [{
                type: Input
            }], id: [{
                type: Input
            }], id2: [{
                type: Input
            }], id3: [{
                type: Input
            }], left: [{
                type: Input
            }], right: [{
                type: Input
            }], class: [{
                type: Input
            }], style: [{
                type: Input
            }], row_click: [{
                type: Output
            }] } });

class SqlEditorComponent {
    ngAfterViewInit() {
    }
    constructor(_dataService) {
        this._dataService = _dataService;
        this.html = '';
        this.toolbar = [
            ['bold', 'italic'],
            ['underline', 'strike'],
            ['code', 'blockquote'],
            ['ordered_list', 'bullet_list'],
            [{ heading: ['h1', 'h2', 'h3', 'h4', 'h5', 'h6'] }],
            ['link', 'image'],
            ['text_color', 'background_color'],
            ['align_left', 'align_center', 'align_right', 'align_justify'],
        ];
        this.value = '';
        this.fieldData = '';
        this.preview = 'Y';
        this.edit = 'Y';
        this.col = '';
        this.class = '';
        this.style = '';
        this.hint = '';
        this.icon = '';
        this.label = 'Label not set';
        this.placeholder = '';
        this.appearance = 'outline';
        this.bs_row = 'Y';
        this.bs_col = 'col-12';
        this.top_label = 'N';
        this.counter = 0;
        this.showing_preview = 'N';
        this.change = new EventEmitter();
        this.myObs = this._dataService.dataSubject.subscribe(d => {
            this.data = d;
            this.fieldData = this.data;
            if (this.fieldData[this.col] === undefined) {
                this.value = JSON.parse('{ "type": "doc", "content": [] }');
                this.editordoc = "";
            }
            else {
                if (this.fieldData[this.col] !== '') {
                    this.value = JSON.parse(this.fieldData[this.col]);
                    this.editordoc = toHTML(this.value);
                }
                else {
                    this.value = JSON.parse('{ "type": "doc", "content": [] }');
                    this.editordoc = "";
                }
            }
            this.counter++;
        });
    }
    showPreview() {
        this.edit = 'N';
    }
    showEdit() {
        this.edit = 'Y';
    }
    ngOnInit() {
        this.editor = new Editor();
    }
    handleChange() {
        this.fieldData['submit'] = 'N';
        this.fieldData[this.col] = JSON.stringify(this.value);
        this.editordoc = toHTML(this.value);
        this._dataService.pushNotification(this.fieldData);
    }
    ngOnDestroy() {
        this.myObs.unsubscribe();
    }
}
SqlEditorComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.3", ngImport: i0, type: SqlEditorComponent, deps: [{ token: SQLDataService }], target: i0.ɵɵFactoryTarget.Component });
SqlEditorComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.3", type: SqlEditorComponent, isStandalone: true, selector: "sql-editor", inputs: { preview: "preview", edit: "edit", col: "col", data: "data", class: "class", style: "style", hint: "hint", icon: "icon", label: "label", placeholder: "placeholder", appearance: "appearance", bs_row: "bs_row", bs_col: "bs_col", top_label: "top_label" }, outputs: { change: "change" }, ngImport: i0, template: "<div *ngIf=\"preview=='Y'\">\n  <div class=\"card\">\n    <div class=\"card-body\">\n       {{ label }} <button (click)=\"showPreview()\" class=\"btn dark\" style=\"margin-left: 10px; margin-right: 10px;\"><i class=\"bi bi-binoculars\"></i></button>\n       <button (click)=\"showEdit()\" class=\"btn dark\"><i class=\"bi bi-pencil-square\"></i></button>\n  <div *ngIf=\"edit=='N'\" class=\"card\">\n        <div class=\"card-body\" [innerHTML]=\"editordoc\">\n        </div>\n  </div>\n  <div *ngIf=\"edit=='Y'\">\n      <span>\n        <ng-container *ngTemplateOutlet=\"contentTmpl\"></ng-container>\n      </span>\n    </div>\n</div>\n</div>\n</div>\n<div *ngIf=\"preview=='N'\">\n  <span>{{ label }}</span>\n  <ng-container *ngTemplateOutlet=\"contentTmpl\"></ng-container>\n</div>\n\n<ng-template #contentTmpl>\n    <span>\n          <div class=\"editor\" [style]=\"style\">\n            <ngx-editor-menu [editor]=\"editor\" [toolbar]=\"toolbar\"></ngx-editor-menu>\n            <ngx-editor [editor]=\"editor\" (ngModelChange)=\"handleChange();\" [(ngModel)]=\"value\"></ngx-editor>\n          </div>\n  </span>\n</ng-template>\n", styles: [".container{width:100%;max-width:900px;min-width:320px;margin:auto;display:flex;flex-direction:column;align-items:center;justify-content:center}.container .title,.container .content{width:100%}.container .content .display{display:flex;flex-direction:column;align-items:center;margin-bottom:1rem}.container .content .display .logo{display:flex;flex-direction:column;align-items:center;text-align:center;margin-bottom:.5rem}.container .content .display .badges img:not(:last-child){margin-right:5px}.editor{border:2px solid rgba(0,0,0,.2);border-radius:4px}.editor .NgxEditor__MenuBar{border-top-left-radius:4px;border-top-right-radius:4px;border-bottom:1px solid rgba(0,0,0,.2)}.editor .NgxEditor{border-top-left-radius:0;border-top-right-radius:0;border:none}.editor .CodeMirror{border:1px solid #eee;height:auto;margin-bottom:.7rem}.editor .CodeMirror pre{white-space:pre!important}\n"], dependencies: [{ kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i2.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "ngmodule", type: FormsModule }, { kind: "directive", type: i3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "ngmodule", type: MatFormFieldModule }, { kind: "ngmodule", type: MatInputModule }, { kind: "ngmodule", type: NgxEditorModule }, { kind: "component", type: i4$3.NgxEditorComponent, selector: "ngx-editor", inputs: ["editor", "outputFormat", "placeholder"], outputs: ["focusOut", "focusIn"] }, { kind: "component", type: i4$3.MenuComponent, selector: "ngx-editor-menu", inputs: ["toolbar", "colorPresets", "disabled", "editor", "customMenuRef", "dropdownPlacement"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.3", ngImport: i0, type: SqlEditorComponent, decorators: [{
            type: Component,
            args: [{ selector: 'sql-editor', standalone: true, imports: [CommonModule, FormsModule, MatFormFieldModule, MatInputModule, NgxEditorModule], template: "<div *ngIf=\"preview=='Y'\">\n  <div class=\"card\">\n    <div class=\"card-body\">\n       {{ label }} <button (click)=\"showPreview()\" class=\"btn dark\" style=\"margin-left: 10px; margin-right: 10px;\"><i class=\"bi bi-binoculars\"></i></button>\n       <button (click)=\"showEdit()\" class=\"btn dark\"><i class=\"bi bi-pencil-square\"></i></button>\n  <div *ngIf=\"edit=='N'\" class=\"card\">\n        <div class=\"card-body\" [innerHTML]=\"editordoc\">\n        </div>\n  </div>\n  <div *ngIf=\"edit=='Y'\">\n      <span>\n        <ng-container *ngTemplateOutlet=\"contentTmpl\"></ng-container>\n      </span>\n    </div>\n</div>\n</div>\n</div>\n<div *ngIf=\"preview=='N'\">\n  <span>{{ label }}</span>\n  <ng-container *ngTemplateOutlet=\"contentTmpl\"></ng-container>\n</div>\n\n<ng-template #contentTmpl>\n    <span>\n          <div class=\"editor\" [style]=\"style\">\n            <ngx-editor-menu [editor]=\"editor\" [toolbar]=\"toolbar\"></ngx-editor-menu>\n            <ngx-editor [editor]=\"editor\" (ngModelChange)=\"handleChange();\" [(ngModel)]=\"value\"></ngx-editor>\n          </div>\n  </span>\n</ng-template>\n", styles: [".container{width:100%;max-width:900px;min-width:320px;margin:auto;display:flex;flex-direction:column;align-items:center;justify-content:center}.container .title,.container .content{width:100%}.container .content .display{display:flex;flex-direction:column;align-items:center;margin-bottom:1rem}.container .content .display .logo{display:flex;flex-direction:column;align-items:center;text-align:center;margin-bottom:.5rem}.container .content .display .badges img:not(:last-child){margin-right:5px}.editor{border:2px solid rgba(0,0,0,.2);border-radius:4px}.editor .NgxEditor__MenuBar{border-top-left-radius:4px;border-top-right-radius:4px;border-bottom:1px solid rgba(0,0,0,.2)}.editor .NgxEditor{border-top-left-radius:0;border-top-right-radius:0;border:none}.editor .CodeMirror{border:1px solid #eee;height:auto;margin-bottom:.7rem}.editor .CodeMirror pre{white-space:pre!important}\n"] }]
        }], ctorParameters: function () { return [{ type: SQLDataService }]; }, propDecorators: { preview: [{
                type: Input
            }], edit: [{
                type: Input
            }], col: [{
                type: Input
            }], data: [{
                type: Input
            }], class: [{
                type: Input
            }], style: [{
                type: Input
            }], hint: [{
                type: Input
            }], icon: [{
                type: Input
            }], label: [{
                type: Input
            }], placeholder: [{
                type: Input
            }], appearance: [{
                type: Input
            }], bs_row: [{
                type: Input
            }], bs_col: [{
                type: Input
            }], top_label: [{
                type: Input
            }], change: [{
                type: Output
            }] } });

class RouteParameterResolver {
    constructor(dataService) {
        this.dataService = dataService;
    }
    resolve(route, state) {
        this.path = '';
        if (state.url !== undefined) {
            this.path = state.url;
        }
        this.r = this.dataService.pingParameters(this.path).pipe(catchError(err => {
            console.log(err);
            return of(null);
        }));
        console.log(this.r);
        this.dataService.paramSubject.next(this.r);
        this.dataService.containerSubject.next(this.r);
        return (this.r);
    }
}
RouteParameterResolver.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.3", ngImport: i0, type: RouteParameterResolver, deps: [{ token: SQLDataService }], target: i0.ɵɵFactoryTarget.Injectable });
RouteParameterResolver.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.3", ngImport: i0, type: RouteParameterResolver, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.3", ngImport: i0, type: RouteParameterResolver, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: SQLDataService }]; } });

/*
 * Public API Surface of sql-components
 */

/**
 * Generated bundle index. Do not edit.
 */

export { MY_DATE_FORMATS, PostInsertTriggerComponent, PreInsertTriggerComponent, PreUpdateTriggerComponent, RouteParameterResolver, SQLDataService, SqlAddTableComponent, SqlCalendarComponent, SqlCardComponent, SqlCheckboxComponent, SqlComponentsComponent, SqlComponentsModule, SqlComponentsService, SqlDataMenuComponent, SqlDataPreview2Component, SqlDataPreview3Component, SqlDataPreviewComponent, SqlDataSelectComponent, SqlDatepickerComponent, SqlDefaultValueComponent, SqlDeleteComponent, SqlDeleteDialogComponent, SqlEditPreview2Component, SqlEditPreview3Component, SqlEditPreviewComponent, SqlEditTableComponent, SqlEditorComponent, SqlFormComponent, SqlFullcalendarComponent, SqlInputComponent, SqlMenuComponent, SqlPanelComponent, SqlRadioGroupComponent, SqlSelectComponent, SqlSubmitComponent, SqlTableComponent, SqlTextareaComponent, SqlUploadFormComponent };
//# sourceMappingURL=sql-components.mjs.map
